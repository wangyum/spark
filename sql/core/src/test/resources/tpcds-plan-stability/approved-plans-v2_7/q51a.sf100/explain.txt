== Physical Plan ==
TakeOrderedAndProject (66)
+- * Filter (65)
   +- * HashAggregate (64)
      +- * HashAggregate (63)
         +- * Project (62)
            +- * SortMergeJoin Inner (61)
               :- Window (56)
               :  +- * Sort (55)
               :     +- Exchange (54)
               :        +- * Project (53)
               :           +- * Filter (52)
               :              +- * SortMergeJoin FullOuter (51)
               :                 :- * Sort (25)
               :                 :  +- Exchange (24)
               :                 :     +- * HashAggregate (23)
               :                 :        +- * HashAggregate (22)
               :                 :           +- * Project (21)
               :                 :              +- * SortMergeJoin Inner (20)
               :                 :                 :- * Sort (15)
               :                 :                 :  +- Exchange (14)
               :                 :                 :     +- * Project (13)
               :                 :                 :        +- Window (12)
               :                 :                 :           +- * Sort (11)
               :                 :                 :              +- Exchange (10)
               :                 :                 :                 +- * HashAggregate (9)
               :                 :                 :                    +- Exchange (8)
               :                 :                 :                       +- * HashAggregate (7)
               :                 :                 :                          +- * Project (6)
               :                 :                 :                             +- * BroadcastHashJoin Inner BuildRight (5)
               :                 :                 :                                :- * Filter (3)
               :                 :                 :                                :  +- * ColumnarToRow (2)
               :                 :                 :                                :     +- Scan parquet spark_catalog.default.web_sales (1)
               :                 :                 :                                +- ReusedExchange (4)
               :                 :                 +- * Project (19)
               :                 :                    +- Window (18)
               :                 :                       +- * Sort (17)
               :                 :                          +- ReusedExchange (16)
               :                 +- * Sort (50)
               :                    +- Exchange (49)
               :                       +- * HashAggregate (48)
               :                          +- * HashAggregate (47)
               :                             +- * Project (46)
               :                                +- * SortMergeJoin Inner (45)
               :                                   :- * Sort (40)
               :                                   :  +- Exchange (39)
               :                                   :     +- * Project (38)
               :                                   :        +- Window (37)
               :                                   :           +- * Sort (36)
               :                                   :              +- Exchange (35)
               :                                   :                 +- * HashAggregate (34)
               :                                   :                    +- Exchange (33)
               :                                   :                       +- * HashAggregate (32)
               :                                   :                          +- * Project (31)
               :                                   :                             +- * BroadcastHashJoin Inner BuildRight (30)
               :                                   :                                :- * Filter (28)
               :                                   :                                :  +- * ColumnarToRow (27)
               :                                   :                                :     +- Scan parquet spark_catalog.default.store_sales (26)
               :                                   :                                +- ReusedExchange (29)
               :                                   +- * Project (44)
               :                                      +- Window (43)
               :                                         +- * Sort (42)
               :                                            +- ReusedExchange (41)
               +- * Project (60)
                  +- Window (59)
                     +- * Sort (58)
                        +- ReusedExchange (57)


(1) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(4) ReusedExchange [Reuses operator id: 71]
Output [2]: [d_date_sk#5, d_date#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [ws_item_sk#1, d_date#6, sum#8]

(8) Exchange
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#9]
Results [4]: [ws_item_sk#1 AS item_sk#10, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#9,17,2) AS sumws#11, ws_item_sk#1]

(10) Exchange
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(11) Sort [codegen id : 4]
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(12) Window
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#12], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(13) Project [codegen id : 5]
Output [4]: [item_sk#10, d_date#6, sumws#11, rk#12]
Input [5]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1, rk#12]

(14) Exchange
Input [4]: [item_sk#10, d_date#6, sumws#11, rk#12]
Arguments: hashpartitioning(item_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(15) Sort [codegen id : 6]
Input [4]: [item_sk#10, d_date#6, sumws#11, rk#12]
Arguments: [item_sk#10 ASC NULLS FIRST], false, 0

(16) ReusedExchange [Reuses operator id: 10]
Output [4]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14]

(17) Sort [codegen id : 10]
Input [4]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14]
Arguments: [ws_item_sk#14 ASC NULLS FIRST, d_date#13 ASC NULLS FIRST], false, 0

(18) Window
Input [4]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14]
Arguments: [row_number() windowspecdefinition(ws_item_sk#14, d_date#13 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#15], [ws_item_sk#14], [d_date#13 ASC NULLS FIRST]

(19) Project [codegen id : 11]
Output [3]: [item_sk#10 AS item_sk#16, sumws#11 AS sumws#17, rk#15]
Input [5]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14, rk#15]

(20) SortMergeJoin [codegen id : 12]
Left keys [1]: [item_sk#10]
Right keys [1]: [item_sk#16]
Join type: Inner
Join condition: (rk#12 >= rk#15)

(21) Project [codegen id : 12]
Output [4]: [item_sk#10, d_date#6, sumws#11, sumws#17]
Input [7]: [item_sk#10, d_date#6, sumws#11, rk#12, item_sk#16, sumws#17, rk#15]

(22) HashAggregate [codegen id : 12]
Input [4]: [item_sk#10, d_date#6, sumws#11, sumws#17]
Keys [3]: [item_sk#10, d_date#6, sumws#11]
Functions [1]: [partial_sum(sumws#17)]
Aggregate Attributes [2]: [sum#18, isEmpty#19]
Results [5]: [item_sk#10, d_date#6, sumws#11, sum#20, isEmpty#21]

(23) HashAggregate [codegen id : 12]
Input [5]: [item_sk#10, d_date#6, sumws#11, sum#20, isEmpty#21]
Keys [3]: [item_sk#10, d_date#6, sumws#11]
Functions [1]: [sum(sumws#17)]
Aggregate Attributes [1]: [sum(sumws#17)#22]
Results [3]: [item_sk#10, d_date#6, sum(sumws#17)#22 AS cume_sales#23]

(24) Exchange
Input [3]: [item_sk#10, d_date#6, cume_sales#23]
Arguments: hashpartitioning(item_sk#10, d_date#6, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(25) Sort [codegen id : 13]
Input [3]: [item_sk#10, d_date#6, cume_sales#23]
Arguments: [item_sk#10 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(26) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 15]
Input [3]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26]

(28) Filter [codegen id : 15]
Input [3]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Condition : isnotnull(ss_item_sk#24)

(29) ReusedExchange [Reuses operator id: 71]
Output [2]: [d_date_sk#27, d_date#28]

(30) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ss_sold_date_sk#26]
Right keys [1]: [d_date_sk#27]
Join type: Inner
Join condition: None

(31) Project [codegen id : 15]
Output [3]: [ss_item_sk#24, ss_sales_price#25, d_date#28]
Input [5]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26, d_date_sk#27, d_date#28]

(32) HashAggregate [codegen id : 15]
Input [3]: [ss_item_sk#24, ss_sales_price#25, d_date#28]
Keys [2]: [ss_item_sk#24, d_date#28]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum#29]
Results [3]: [ss_item_sk#24, d_date#28, sum#30]

(33) Exchange
Input [3]: [ss_item_sk#24, d_date#28, sum#30]
Arguments: hashpartitioning(ss_item_sk#24, d_date#28, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(34) HashAggregate [codegen id : 16]
Input [3]: [ss_item_sk#24, d_date#28, sum#30]
Keys [2]: [ss_item_sk#24, d_date#28]
Functions [1]: [sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#25))#31]
Results [4]: [ss_item_sk#24 AS item_sk#32, d_date#28, MakeDecimal(sum(UnscaledValue(ss_sales_price#25))#31,17,2) AS sumss#33, ss_item_sk#24]

(35) Exchange
Input [4]: [item_sk#32, d_date#28, sumss#33, ss_item_sk#24]
Arguments: hashpartitioning(ss_item_sk#24, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(36) Sort [codegen id : 17]
Input [4]: [item_sk#32, d_date#28, sumss#33, ss_item_sk#24]
Arguments: [ss_item_sk#24 ASC NULLS FIRST, d_date#28 ASC NULLS FIRST], false, 0

(37) Window
Input [4]: [item_sk#32, d_date#28, sumss#33, ss_item_sk#24]
Arguments: [row_number() windowspecdefinition(ss_item_sk#24, d_date#28 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#34], [ss_item_sk#24], [d_date#28 ASC NULLS FIRST]

(38) Project [codegen id : 18]
Output [4]: [item_sk#32, d_date#28, sumss#33, rk#34]
Input [5]: [item_sk#32, d_date#28, sumss#33, ss_item_sk#24, rk#34]

(39) Exchange
Input [4]: [item_sk#32, d_date#28, sumss#33, rk#34]
Arguments: hashpartitioning(item_sk#32, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(40) Sort [codegen id : 19]
Input [4]: [item_sk#32, d_date#28, sumss#33, rk#34]
Arguments: [item_sk#32 ASC NULLS FIRST], false, 0

(41) ReusedExchange [Reuses operator id: 35]
Output [4]: [item_sk#32, d_date#35, sumss#33, ss_item_sk#36]

(42) Sort [codegen id : 23]
Input [4]: [item_sk#32, d_date#35, sumss#33, ss_item_sk#36]
Arguments: [ss_item_sk#36 ASC NULLS FIRST, d_date#35 ASC NULLS FIRST], false, 0

(43) Window
Input [4]: [item_sk#32, d_date#35, sumss#33, ss_item_sk#36]
Arguments: [row_number() windowspecdefinition(ss_item_sk#36, d_date#35 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#37], [ss_item_sk#36], [d_date#35 ASC NULLS FIRST]

(44) Project [codegen id : 24]
Output [3]: [item_sk#32 AS item_sk#38, sumss#33 AS sumss#39, rk#37]
Input [5]: [item_sk#32, d_date#35, sumss#33, ss_item_sk#36, rk#37]

(45) SortMergeJoin [codegen id : 25]
Left keys [1]: [item_sk#32]
Right keys [1]: [item_sk#38]
Join type: Inner
Join condition: (rk#34 >= rk#37)

(46) Project [codegen id : 25]
Output [4]: [item_sk#32, d_date#28, sumss#33, sumss#39]
Input [7]: [item_sk#32, d_date#28, sumss#33, rk#34, item_sk#38, sumss#39, rk#37]

(47) HashAggregate [codegen id : 25]
Input [4]: [item_sk#32, d_date#28, sumss#33, sumss#39]
Keys [3]: [item_sk#32, d_date#28, sumss#33]
Functions [1]: [partial_sum(sumss#39)]
Aggregate Attributes [2]: [sum#40, isEmpty#41]
Results [5]: [item_sk#32, d_date#28, sumss#33, sum#42, isEmpty#43]

(48) HashAggregate [codegen id : 25]
Input [5]: [item_sk#32, d_date#28, sumss#33, sum#42, isEmpty#43]
Keys [3]: [item_sk#32, d_date#28, sumss#33]
Functions [1]: [sum(sumss#39)]
Aggregate Attributes [1]: [sum(sumss#39)#44]
Results [3]: [item_sk#32, d_date#28, sum(sumss#39)#44 AS cume_sales#45]

(49) Exchange
Input [3]: [item_sk#32, d_date#28, cume_sales#45]
Arguments: hashpartitioning(item_sk#32, d_date#28, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(50) Sort [codegen id : 26]
Input [3]: [item_sk#32, d_date#28, cume_sales#45]
Arguments: [item_sk#32 ASC NULLS FIRST, d_date#28 ASC NULLS FIRST], false, 0

(51) SortMergeJoin [codegen id : 27]
Left keys [2]: [item_sk#10, d_date#6]
Right keys [2]: [item_sk#32, d_date#28]
Join type: FullOuter
Join condition: None

(52) Filter [codegen id : 27]
Input [6]: [item_sk#10, d_date#6, cume_sales#23, item_sk#32, d_date#28, cume_sales#45]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#10) THEN item_sk#10 ELSE item_sk#32 END)

(53) Project [codegen id : 27]
Output [4]: [CASE WHEN isnotnull(item_sk#10) THEN item_sk#10 ELSE item_sk#32 END AS item_sk#46, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#28 END AS d_date#47, cume_sales#23 AS web_sales#48, cume_sales#45 AS store_sales#49]
Input [6]: [item_sk#10, d_date#6, cume_sales#23, item_sk#32, d_date#28, cume_sales#45]

(54) Exchange
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: hashpartitioning(item_sk#46, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(55) Sort [codegen id : 28]
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: [item_sk#46 ASC NULLS FIRST, d_date#47 ASC NULLS FIRST], false, 0

(56) Window
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: [row_number() windowspecdefinition(item_sk#46, d_date#47 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#50], [item_sk#46], [d_date#47 ASC NULLS FIRST]

(57) ReusedExchange [Reuses operator id: 54]
Output [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]

(58) Sort [codegen id : 56]
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: [item_sk#46 ASC NULLS FIRST, d_date#47 ASC NULLS FIRST], false, 0

(59) Window
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: [row_number() windowspecdefinition(item_sk#46, d_date#47 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#51], [item_sk#46], [d_date#47 ASC NULLS FIRST]

(60) Project [codegen id : 57]
Output [4]: [item_sk#46 AS item_sk#52, web_sales#48 AS web_sales#53, store_sales#49 AS store_sales#54, rk#51]
Input [5]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, rk#51]

(61) SortMergeJoin [codegen id : 58]
Left keys [1]: [item_sk#46]
Right keys [1]: [item_sk#52]
Join type: Inner
Join condition: (rk#50 >= rk#51)

(62) Project [codegen id : 58]
Output [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_sales#53, store_sales#54]
Input [9]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, rk#50, item_sk#52, web_sales#53, store_sales#54, rk#51]

(63) HashAggregate [codegen id : 58]
Input [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_sales#53, store_sales#54]
Keys [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Functions [2]: [partial_max(web_sales#53), partial_max(store_sales#54)]
Aggregate Attributes [2]: [max#55, max#56]
Results [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, max#57, max#58]

(64) HashAggregate [codegen id : 58]
Input [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, max#57, max#58]
Keys [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Functions [2]: [max(web_sales#53), max(store_sales#54)]
Aggregate Attributes [2]: [max(web_sales#53)#59, max(store_sales#54)#60]
Results [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, max(web_sales#53)#59 AS web_cumulative#61, max(store_sales#54)#60 AS store_cumulative#62]

(65) Filter [codegen id : 58]
Input [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_cumulative#61, store_cumulative#62]
Condition : ((isnotnull(web_cumulative#61) AND isnotnull(store_cumulative#62)) AND (web_cumulative#61 > store_cumulative#62))

(66) TakeOrderedAndProject
Input [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_cumulative#61, store_cumulative#62]
Arguments: 100, [item_sk#46 ASC NULLS FIRST, d_date#47 ASC NULLS FIRST], [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_cumulative#61, store_cumulative#62]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (71)
+- * Project (70)
   +- * Filter (69)
      +- * ColumnarToRow (68)
         +- Scan parquet spark_catalog.default.date_dim (67)


(67) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(68) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#63]

(69) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#63]
Condition : (((isnotnull(d_month_seq#63) AND (d_month_seq#63 >= 1212)) AND (d_month_seq#63 <= 1223)) AND isnotnull(d_date_sk#5))

(70) Project [codegen id : 1]
Output [2]: [d_date_sk#5, d_date#6]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#63]

(71) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

Subquery:2 Hosting operator id = 26 Hosting Expression = ss_sold_date_sk#26 IN dynamicpruning#4


