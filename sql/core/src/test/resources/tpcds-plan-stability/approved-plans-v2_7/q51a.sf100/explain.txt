== Physical Plan ==
TakeOrderedAndProject (85)
+- * Filter (84)
   +- * HashAggregate (83)
      +- * HashAggregate (82)
         +- * Project (81)
            +- * SortMergeJoin Inner (80)
               :- * Sort (72)
               :  +- * HashAggregate (71)
               :     +- Window (70)
               :        +- * Sort (69)
               :           +- Exchange (68)
               :              +- * Project (67)
               :                 +- * Filter (66)
               :                    +- * SortMergeJoin FullOuter (65)
               :                       :- * Sort (32)
               :                       :  +- Exchange (31)
               :                       :     +- * HashAggregate (30)
               :                       :        +- * HashAggregate (29)
               :                       :           +- * Project (28)
               :                       :              +- * SortMergeJoin Inner (27)
               :                       :                 :- * Sort (18)
               :                       :                 :  +- Exchange (17)
               :                       :                 :     +- * HashAggregate (16)
               :                       :                 :        +- * Project (15)
               :                       :                 :           +- Window (14)
               :                       :                 :              +- * Sort (13)
               :                       :                 :                 +- Exchange (12)
               :                       :                 :                    +- * HashAggregate (11)
               :                       :                 :                       +- Exchange (10)
               :                       :                 :                          +- * HashAggregate (9)
               :                       :                 :                             +- * Project (8)
               :                       :                 :                                +- * BroadcastHashJoin Inner BuildRight (7)
               :                       :                 :                                   :- * Project (5)
               :                       :                 :                                   :  +- * HashAggregate (4)
               :                       :                 :                                   :     +- * Filter (3)
               :                       :                 :                                   :        +- * ColumnarToRow (2)
               :                       :                 :                                   :           +- Scan parquet default.web_sales (1)
               :                       :                 :                                   +- ReusedExchange (6)
               :                       :                 +- * Sort (26)
               :                       :                    +- Exchange (25)
               :                       :                       +- * Project (24)
               :                       :                          +- * HashAggregate (23)
               :                       :                             +- * Project (22)
               :                       :                                +- Window (21)
               :                       :                                   +- * Sort (20)
               :                       :                                      +- ReusedExchange (19)
               :                       +- * Sort (64)
               :                          +- Exchange (63)
               :                             +- * HashAggregate (62)
               :                                +- * HashAggregate (61)
               :                                   +- * Project (60)
               :                                      +- * SortMergeJoin Inner (59)
               :                                         :- * Sort (50)
               :                                         :  +- Exchange (49)
               :                                         :     +- * HashAggregate (48)
               :                                         :        +- * Project (47)
               :                                         :           +- Window (46)
               :                                         :              +- * Sort (45)
               :                                         :                 +- Exchange (44)
               :                                         :                    +- * HashAggregate (43)
               :                                         :                       +- Exchange (42)
               :                                         :                          +- * HashAggregate (41)
               :                                         :                             +- * Project (40)
               :                                         :                                +- * BroadcastHashJoin Inner BuildRight (39)
               :                                         :                                   :- * Project (37)
               :                                         :                                   :  +- * HashAggregate (36)
               :                                         :                                   :     +- * Filter (35)
               :                                         :                                   :        +- * ColumnarToRow (34)
               :                                         :                                   :           +- Scan parquet default.store_sales (33)
               :                                         :                                   +- ReusedExchange (38)
               :                                         +- * Sort (58)
               :                                            +- Exchange (57)
               :                                               +- * Project (56)
               :                                                  +- * HashAggregate (55)
               :                                                     +- * Project (54)
               :                                                        +- Window (53)
               :                                                           +- * Sort (52)
               :                                                              +- ReusedExchange (51)
               +- * Sort (79)
                  +- * Project (78)
                     +- * HashAggregate (77)
                        +- * Project (76)
                           +- Window (75)
                              +- * Sort (74)
                                 +- ReusedExchange (73)


(1) Scan parquet default.web_sales
Output [34]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#34), dynamicpruningexpression(ws_sold_date_sk#34 IN dynamicpruning#35)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_sold_time_sk:int,ws_ship_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_bill_cdemo_sk:int,ws_bill_hdemo_sk:int,ws_bill_addr_sk:int,ws_ship_customer_sk:int,ws_ship_cdemo_sk:int,ws_ship_hdemo_sk:int,ws_ship_addr_sk:int,ws_web_page_sk:int,ws_web_site_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_promo_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_list_price:decimal(7,2),ws_sales_price:decimal(7,2),ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2),ws_ext_tax:decimal(7,2),ws_coupon_amt:decimal(7,2),ws_ext_ship_cost:decimal(7,2),ws_net_paid:decimal(7,2),ws_net_paid_inc_tax:decimal(7,2),ws_net_paid_inc_ship:decimal(7,2),ws_net_paid_inc_ship_tax:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [34]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34]

(3) Filter [codegen id : 2]
Input [34]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34]
Condition : isnotnull(ws_item_sk#3)

(4) HashAggregate [codegen id : 2]
Input [34]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34]
Keys [2]: [ws_sold_date_sk#34, ws_item_sk#3]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#21))]
Aggregate Attributes [1]: [sum#36]
Results [3]: [ws_sold_date_sk#34, ws_item_sk#3, sum#37]

(5) Project [codegen id : 2]
Output [3]: [ws_sold_date_sk#34, ws_item_sk#3, sum#37 AS _pushedexpression#38]
Input [3]: [ws_sold_date_sk#34, ws_item_sk#3, sum#37]

(6) ReusedExchange [Reuses operator id: 90]
Output [2]: [d_date_sk#39, d_date#40]

(7) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#34]
Right keys [1]: [d_date_sk#39]
Join condition: None

(8) Project [codegen id : 2]
Output [3]: [ws_item_sk#3, _pushedexpression#41, d_date#40]
Input [5]: [ws_sold_date_sk#34, ws_item_sk#3, _pushedexpression#38, d_date_sk#39, d_date#40]

(9) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#3, _pushedexpression#41, d_date#40]
Keys [2]: [ws_item_sk#3, d_date#40]
Functions [1]: [partial_sum(_pushedexpression#41)]
Aggregate Attributes [2]: [sum#42, isEmpty#43]
Results [4]: [ws_item_sk#3, d_date#40, sum#44, isEmpty#45]

(10) Exchange
Input [4]: [ws_item_sk#3, d_date#40, sum#44, isEmpty#45]
Arguments: hashpartitioning(ws_item_sk#3, d_date#40, 5), ENSURE_REQUIREMENTS, [id=#46]

(11) HashAggregate [codegen id : 3]
Input [4]: [ws_item_sk#3, d_date#40, sum#44, isEmpty#45]
Keys [2]: [ws_item_sk#3, d_date#40]
Functions [1]: [sum(_pushedexpression#41)]
Aggregate Attributes [1]: [sum(_pushedexpression#41)#47]
Results [4]: [ws_item_sk#3 AS item_sk#48, d_date#40, cast(sum(_pushedexpression#41)#47 as decimal(17,2)) AS sumws#49, ws_item_sk#3]

(12) Exchange
Input [4]: [item_sk#48, d_date#40, sumws#49, ws_item_sk#3]
Arguments: hashpartitioning(ws_item_sk#3, 5), ENSURE_REQUIREMENTS, [id=#50]

(13) Sort [codegen id : 4]
Input [4]: [item_sk#48, d_date#40, sumws#49, ws_item_sk#3]
Arguments: [ws_item_sk#3 ASC NULLS FIRST, d_date#40 ASC NULLS FIRST], false, 0

(14) Window
Input [4]: [item_sk#48, d_date#40, sumws#49, ws_item_sk#3]
Arguments: [row_number() windowspecdefinition(ws_item_sk#3, d_date#40 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#51], [ws_item_sk#3], [d_date#40 ASC NULLS FIRST]

(15) Project [codegen id : 5]
Output [4]: [item_sk#48, d_date#40, sumws#49, rk#51]
Input [5]: [item_sk#48, d_date#40, sumws#49, ws_item_sk#3, rk#51]

(16) HashAggregate [codegen id : 5]
Input [4]: [item_sk#48, d_date#40, sumws#49, rk#51]
Keys [5]: [item_sk#48, rk#51, item_sk#48, d_date#40, sumws#49]
Functions: []
Aggregate Attributes: []
Results [5]: [item_sk#48, rk#51, item_sk#48, d_date#40, sumws#49]

(17) Exchange
Input [5]: [item_sk#48, rk#51, item_sk#48, d_date#40, sumws#49]
Arguments: hashpartitioning(item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#52]

(18) Sort [codegen id : 6]
Input [5]: [item_sk#48, rk#51, item_sk#48, d_date#40, sumws#49]
Arguments: [item_sk#48 ASC NULLS FIRST], false, 0

(19) ReusedExchange [Reuses operator id: 12]
Output [4]: [item_sk#48, d_date#53, sumws#49, ws_item_sk#54]

(20) Sort [codegen id : 10]
Input [4]: [item_sk#48, d_date#53, sumws#49, ws_item_sk#54]
Arguments: [ws_item_sk#54 ASC NULLS FIRST, d_date#53 ASC NULLS FIRST], false, 0

(21) Window
Input [4]: [item_sk#48, d_date#53, sumws#49, ws_item_sk#54]
Arguments: [row_number() windowspecdefinition(ws_item_sk#54, d_date#53 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#55], [ws_item_sk#54], [d_date#53 ASC NULLS FIRST]

(22) Project [codegen id : 11]
Output [4]: [item_sk#48 AS item_sk#56, d_date#53, sumws#49 AS sumws#57, rk#55]
Input [5]: [item_sk#48, d_date#53, sumws#49, ws_item_sk#54, rk#55]

(23) HashAggregate [codegen id : 11]
Input [4]: [item_sk#56, d_date#53, sumws#57, rk#55]
Keys [2]: [item_sk#56, rk#55]
Functions [1]: [partial_sum(sumws#57)]
Aggregate Attributes [2]: [sum#58, isEmpty#59]
Results [4]: [item_sk#56, rk#55, sum#60, isEmpty#61]

(24) Project [codegen id : 11]
Output [3]: [item_sk#56, rk#55, sum#60 AS _pushedexpression#62]
Input [4]: [item_sk#56, rk#55, sum#60, isEmpty#61]

(25) Exchange
Input [3]: [item_sk#56, rk#55, _pushedexpression#62]
Arguments: hashpartitioning(item_sk#56, 5), ENSURE_REQUIREMENTS, [id=#63]

(26) Sort [codegen id : 12]
Input [3]: [item_sk#56, rk#55, _pushedexpression#62]
Arguments: [item_sk#56 ASC NULLS FIRST], false, 0

(27) SortMergeJoin [codegen id : 13]
Left keys [1]: [item_sk#48]
Right keys [1]: [item_sk#56]
Join condition: (rk#51 >= rk#55)

(28) Project [codegen id : 13]
Output [5]: [item_sk#48, item_sk#48, d_date#40, sumws#49, _pushedexpression#62]
Input [8]: [item_sk#48, rk#51, item_sk#48, d_date#40, sumws#49, item_sk#56, rk#55, _pushedexpression#62]

(29) HashAggregate [codegen id : 13]
Input [5]: [item_sk#48, item_sk#48, d_date#40, sumws#49, _pushedexpression#62]
Keys [3]: [item_sk#48, d_date#40, sumws#49]
Functions [1]: [partial_sum(_pushedexpression#62)]
Aggregate Attributes [2]: [sum#64, isEmpty#65]
Results [5]: [item_sk#48, d_date#40, sumws#49, sum#66, isEmpty#67]

(30) HashAggregate [codegen id : 13]
Input [5]: [item_sk#48, d_date#40, sumws#49, sum#66, isEmpty#67]
Keys [3]: [item_sk#48, d_date#40, sumws#49]
Functions [1]: [sum(_pushedexpression#62)]
Aggregate Attributes [1]: [sum(_pushedexpression#62)#68]
Results [3]: [item_sk#48, d_date#40, cast(sum(_pushedexpression#62)#68 as decimal(27,2)) AS cume_sales#69]

(31) Exchange
Input [3]: [item_sk#48, d_date#40, cume_sales#69]
Arguments: hashpartitioning(item_sk#48, d_date#40, 5), ENSURE_REQUIREMENTS, [id=#70]

(32) Sort [codegen id : 14]
Input [3]: [item_sk#48, d_date#40, cume_sales#69]
Arguments: [item_sk#48 ASC NULLS FIRST, d_date#40 ASC NULLS FIRST], false, 0

(33) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#71, ss_item_sk#72, ss_customer_sk#73, ss_cdemo_sk#74, ss_hdemo_sk#75, ss_addr_sk#76, ss_store_sk#77, ss_promo_sk#78, ss_ticket_number#79, ss_quantity#80, ss_wholesale_cost#81, ss_list_price#82, ss_sales_price#83, ss_ext_discount_amt#84, ss_ext_sales_price#85, ss_ext_wholesale_cost#86, ss_ext_list_price#87, ss_ext_tax#88, ss_coupon_amt#89, ss_net_paid#90, ss_net_paid_inc_tax#91, ss_net_profit#92, ss_sold_date_sk#93]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#93), dynamicpruningexpression(ss_sold_date_sk#93 IN dynamicpruning#35)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(34) ColumnarToRow [codegen id : 16]
Input [23]: [ss_sold_time_sk#71, ss_item_sk#72, ss_customer_sk#73, ss_cdemo_sk#74, ss_hdemo_sk#75, ss_addr_sk#76, ss_store_sk#77, ss_promo_sk#78, ss_ticket_number#79, ss_quantity#80, ss_wholesale_cost#81, ss_list_price#82, ss_sales_price#83, ss_ext_discount_amt#84, ss_ext_sales_price#85, ss_ext_wholesale_cost#86, ss_ext_list_price#87, ss_ext_tax#88, ss_coupon_amt#89, ss_net_paid#90, ss_net_paid_inc_tax#91, ss_net_profit#92, ss_sold_date_sk#93]

(35) Filter [codegen id : 16]
Input [23]: [ss_sold_time_sk#71, ss_item_sk#72, ss_customer_sk#73, ss_cdemo_sk#74, ss_hdemo_sk#75, ss_addr_sk#76, ss_store_sk#77, ss_promo_sk#78, ss_ticket_number#79, ss_quantity#80, ss_wholesale_cost#81, ss_list_price#82, ss_sales_price#83, ss_ext_discount_amt#84, ss_ext_sales_price#85, ss_ext_wholesale_cost#86, ss_ext_list_price#87, ss_ext_tax#88, ss_coupon_amt#89, ss_net_paid#90, ss_net_paid_inc_tax#91, ss_net_profit#92, ss_sold_date_sk#93]
Condition : isnotnull(ss_item_sk#72)

(36) HashAggregate [codegen id : 16]
Input [23]: [ss_sold_time_sk#71, ss_item_sk#72, ss_customer_sk#73, ss_cdemo_sk#74, ss_hdemo_sk#75, ss_addr_sk#76, ss_store_sk#77, ss_promo_sk#78, ss_ticket_number#79, ss_quantity#80, ss_wholesale_cost#81, ss_list_price#82, ss_sales_price#83, ss_ext_discount_amt#84, ss_ext_sales_price#85, ss_ext_wholesale_cost#86, ss_ext_list_price#87, ss_ext_tax#88, ss_coupon_amt#89, ss_net_paid#90, ss_net_paid_inc_tax#91, ss_net_profit#92, ss_sold_date_sk#93]
Keys [2]: [ss_sold_date_sk#93, ss_item_sk#72]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#83))]
Aggregate Attributes [1]: [sum#94]
Results [3]: [ss_sold_date_sk#93, ss_item_sk#72, sum#95]

(37) Project [codegen id : 16]
Output [3]: [ss_sold_date_sk#93, ss_item_sk#72, sum#95 AS _pushedexpression#96]
Input [3]: [ss_sold_date_sk#93, ss_item_sk#72, sum#95]

(38) ReusedExchange [Reuses operator id: 90]
Output [2]: [d_date_sk#97, d_date#98]

(39) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ss_sold_date_sk#93]
Right keys [1]: [d_date_sk#97]
Join condition: None

(40) Project [codegen id : 16]
Output [3]: [ss_item_sk#72, _pushedexpression#99, d_date#98]
Input [5]: [ss_sold_date_sk#93, ss_item_sk#72, _pushedexpression#96, d_date_sk#97, d_date#98]

(41) HashAggregate [codegen id : 16]
Input [3]: [ss_item_sk#72, _pushedexpression#99, d_date#98]
Keys [2]: [ss_item_sk#72, d_date#98]
Functions [1]: [partial_sum(_pushedexpression#99)]
Aggregate Attributes [2]: [sum#100, isEmpty#101]
Results [4]: [ss_item_sk#72, d_date#98, sum#102, isEmpty#103]

(42) Exchange
Input [4]: [ss_item_sk#72, d_date#98, sum#102, isEmpty#103]
Arguments: hashpartitioning(ss_item_sk#72, d_date#98, 5), ENSURE_REQUIREMENTS, [id=#104]

(43) HashAggregate [codegen id : 17]
Input [4]: [ss_item_sk#72, d_date#98, sum#102, isEmpty#103]
Keys [2]: [ss_item_sk#72, d_date#98]
Functions [1]: [sum(_pushedexpression#99)]
Aggregate Attributes [1]: [sum(_pushedexpression#99)#105]
Results [4]: [ss_item_sk#72 AS item_sk#106, d_date#98, cast(sum(_pushedexpression#99)#105 as decimal(17,2)) AS sumss#107, ss_item_sk#72]

(44) Exchange
Input [4]: [item_sk#106, d_date#98, sumss#107, ss_item_sk#72]
Arguments: hashpartitioning(ss_item_sk#72, 5), ENSURE_REQUIREMENTS, [id=#108]

(45) Sort [codegen id : 18]
Input [4]: [item_sk#106, d_date#98, sumss#107, ss_item_sk#72]
Arguments: [ss_item_sk#72 ASC NULLS FIRST, d_date#98 ASC NULLS FIRST], false, 0

(46) Window
Input [4]: [item_sk#106, d_date#98, sumss#107, ss_item_sk#72]
Arguments: [row_number() windowspecdefinition(ss_item_sk#72, d_date#98 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#109], [ss_item_sk#72], [d_date#98 ASC NULLS FIRST]

(47) Project [codegen id : 19]
Output [4]: [item_sk#106, d_date#98, sumss#107, rk#109]
Input [5]: [item_sk#106, d_date#98, sumss#107, ss_item_sk#72, rk#109]

(48) HashAggregate [codegen id : 19]
Input [4]: [item_sk#106, d_date#98, sumss#107, rk#109]
Keys [5]: [item_sk#106, rk#109, item_sk#106, d_date#98, sumss#107]
Functions: []
Aggregate Attributes: []
Results [5]: [item_sk#106, rk#109, item_sk#106, d_date#98, sumss#107]

(49) Exchange
Input [5]: [item_sk#106, rk#109, item_sk#106, d_date#98, sumss#107]
Arguments: hashpartitioning(item_sk#106, 5), ENSURE_REQUIREMENTS, [id=#110]

(50) Sort [codegen id : 20]
Input [5]: [item_sk#106, rk#109, item_sk#106, d_date#98, sumss#107]
Arguments: [item_sk#106 ASC NULLS FIRST], false, 0

(51) ReusedExchange [Reuses operator id: 44]
Output [4]: [item_sk#106, d_date#111, sumss#107, ss_item_sk#112]

(52) Sort [codegen id : 24]
Input [4]: [item_sk#106, d_date#111, sumss#107, ss_item_sk#112]
Arguments: [ss_item_sk#112 ASC NULLS FIRST, d_date#111 ASC NULLS FIRST], false, 0

(53) Window
Input [4]: [item_sk#106, d_date#111, sumss#107, ss_item_sk#112]
Arguments: [row_number() windowspecdefinition(ss_item_sk#112, d_date#111 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#113], [ss_item_sk#112], [d_date#111 ASC NULLS FIRST]

(54) Project [codegen id : 25]
Output [4]: [item_sk#106 AS item_sk#114, d_date#111, sumss#107 AS sumss#115, rk#113]
Input [5]: [item_sk#106, d_date#111, sumss#107, ss_item_sk#112, rk#113]

(55) HashAggregate [codegen id : 25]
Input [4]: [item_sk#114, d_date#111, sumss#115, rk#113]
Keys [2]: [item_sk#114, rk#113]
Functions [1]: [partial_sum(sumss#115)]
Aggregate Attributes [2]: [sum#116, isEmpty#117]
Results [4]: [item_sk#114, rk#113, sum#118, isEmpty#119]

(56) Project [codegen id : 25]
Output [3]: [item_sk#114, rk#113, sum#118 AS _pushedexpression#120]
Input [4]: [item_sk#114, rk#113, sum#118, isEmpty#119]

(57) Exchange
Input [3]: [item_sk#114, rk#113, _pushedexpression#120]
Arguments: hashpartitioning(item_sk#114, 5), ENSURE_REQUIREMENTS, [id=#121]

(58) Sort [codegen id : 26]
Input [3]: [item_sk#114, rk#113, _pushedexpression#120]
Arguments: [item_sk#114 ASC NULLS FIRST], false, 0

(59) SortMergeJoin [codegen id : 27]
Left keys [1]: [item_sk#106]
Right keys [1]: [item_sk#114]
Join condition: (rk#109 >= rk#113)

(60) Project [codegen id : 27]
Output [5]: [item_sk#106, item_sk#106, d_date#98, sumss#107, _pushedexpression#120]
Input [8]: [item_sk#106, rk#109, item_sk#106, d_date#98, sumss#107, item_sk#114, rk#113, _pushedexpression#120]

(61) HashAggregate [codegen id : 27]
Input [5]: [item_sk#106, item_sk#106, d_date#98, sumss#107, _pushedexpression#120]
Keys [3]: [item_sk#106, d_date#98, sumss#107]
Functions [1]: [partial_sum(_pushedexpression#120)]
Aggregate Attributes [2]: [sum#122, isEmpty#123]
Results [5]: [item_sk#106, d_date#98, sumss#107, sum#124, isEmpty#125]

(62) HashAggregate [codegen id : 27]
Input [5]: [item_sk#106, d_date#98, sumss#107, sum#124, isEmpty#125]
Keys [3]: [item_sk#106, d_date#98, sumss#107]
Functions [1]: [sum(_pushedexpression#120)]
Aggregate Attributes [1]: [sum(_pushedexpression#120)#126]
Results [3]: [item_sk#106, d_date#98, cast(sum(_pushedexpression#120)#126 as decimal(27,2)) AS cume_sales#127]

(63) Exchange
Input [3]: [item_sk#106, d_date#98, cume_sales#127]
Arguments: hashpartitioning(item_sk#106, d_date#98, 5), ENSURE_REQUIREMENTS, [id=#128]

(64) Sort [codegen id : 28]
Input [3]: [item_sk#106, d_date#98, cume_sales#127]
Arguments: [item_sk#106 ASC NULLS FIRST, d_date#98 ASC NULLS FIRST], false, 0

(65) SortMergeJoin [codegen id : 29]
Left keys [2]: [item_sk#48, d_date#40]
Right keys [2]: [item_sk#106, d_date#98]
Join condition: None

(66) Filter [codegen id : 29]
Input [6]: [item_sk#48, d_date#40, cume_sales#69, item_sk#106, d_date#98, cume_sales#127]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#48) THEN item_sk#48 ELSE item_sk#106 END)

(67) Project [codegen id : 29]
Output [4]: [CASE WHEN isnotnull(item_sk#48) THEN item_sk#48 ELSE item_sk#106 END AS item_sk#129, CASE WHEN isnotnull(d_date#40) THEN d_date#40 ELSE d_date#98 END AS d_date#130, cume_sales#69 AS web_sales#131, cume_sales#127 AS store_sales#132]
Input [6]: [item_sk#48, d_date#40, cume_sales#69, item_sk#106, d_date#98, cume_sales#127]

(68) Exchange
Input [4]: [item_sk#129, d_date#130, web_sales#131, store_sales#132]
Arguments: hashpartitioning(item_sk#129, 5), ENSURE_REQUIREMENTS, [id=#133]

(69) Sort [codegen id : 30]
Input [4]: [item_sk#129, d_date#130, web_sales#131, store_sales#132]
Arguments: [item_sk#129 ASC NULLS FIRST, d_date#130 ASC NULLS FIRST], false, 0

(70) Window
Input [4]: [item_sk#129, d_date#130, web_sales#131, store_sales#132]
Arguments: [row_number() windowspecdefinition(item_sk#129, d_date#130 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#134], [item_sk#129], [d_date#130 ASC NULLS FIRST]

(71) HashAggregate [codegen id : 31]
Input [5]: [item_sk#129, d_date#130, web_sales#131, store_sales#132, rk#134]
Keys [6]: [item_sk#129, rk#134, item_sk#129, d_date#130, web_sales#131, store_sales#132]
Functions: []
Aggregate Attributes: []
Results [6]: [item_sk#129, rk#134, item_sk#129, d_date#130, web_sales#131, store_sales#132]

(72) Sort [codegen id : 31]
Input [6]: [item_sk#129, rk#134, item_sk#129, d_date#130, web_sales#131, store_sales#132]
Arguments: [item_sk#129 ASC NULLS FIRST], false, 0

(73) ReusedExchange [Reuses operator id: 68]
Output [4]: [item_sk#129, d_date#130, web_sales#131, store_sales#132]

(74) Sort [codegen id : 61]
Input [4]: [item_sk#129, d_date#130, web_sales#131, store_sales#132]
Arguments: [item_sk#129 ASC NULLS FIRST, d_date#130 ASC NULLS FIRST], false, 0

(75) Window
Input [4]: [item_sk#129, d_date#130, web_sales#131, store_sales#132]
Arguments: [row_number() windowspecdefinition(item_sk#129, d_date#130 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#135], [item_sk#129], [d_date#130 ASC NULLS FIRST]

(76) Project [codegen id : 62]
Output [5]: [item_sk#129 AS item_sk#136, d_date#130 AS d_date#137, web_sales#131 AS web_sales#138, store_sales#132 AS store_sales#139, rk#135]
Input [5]: [item_sk#129, d_date#130, web_sales#131, store_sales#132, rk#135]

(77) HashAggregate [codegen id : 62]
Input [5]: [item_sk#136, d_date#137, web_sales#138, store_sales#139, rk#135]
Keys [2]: [item_sk#136, rk#135]
Functions [2]: [partial_max(web_sales#138), partial_max(store_sales#139)]
Aggregate Attributes [2]: [max#140, max#141]
Results [4]: [item_sk#136, rk#135, max#142, max#143]

(78) Project [codegen id : 62]
Output [4]: [item_sk#136, rk#135, max#142 AS _pushedexpression#144, max#143 AS _pushedexpression#145]
Input [4]: [item_sk#136, rk#135, max#142, max#143]

(79) Sort [codegen id : 62]
Input [4]: [item_sk#136, rk#135, _pushedexpression#144, _pushedexpression#145]
Arguments: [item_sk#136 ASC NULLS FIRST], false, 0

(80) SortMergeJoin [codegen id : 63]
Left keys [1]: [item_sk#129]
Right keys [1]: [item_sk#136]
Join condition: (rk#134 >= rk#135)

(81) Project [codegen id : 63]
Output [7]: [item_sk#129, item_sk#129, d_date#130, web_sales#131, store_sales#132, _pushedexpression#144, _pushedexpression#145]
Input [10]: [item_sk#129, rk#134, item_sk#129, d_date#130, web_sales#131, store_sales#132, item_sk#136, rk#135, _pushedexpression#144, _pushedexpression#145]

(82) HashAggregate [codegen id : 63]
Input [7]: [item_sk#129, item_sk#129, d_date#130, web_sales#131, store_sales#132, _pushedexpression#144, _pushedexpression#145]
Keys [4]: [item_sk#129, d_date#130, web_sales#131, store_sales#132]
Functions [2]: [partial_max(_pushedexpression#144), partial_max(_pushedexpression#145)]
Aggregate Attributes [2]: [max#146, max#147]
Results [6]: [item_sk#129, d_date#130, web_sales#131, store_sales#132, max#148, max#149]

(83) HashAggregate [codegen id : 63]
Input [6]: [item_sk#129, d_date#130, web_sales#131, store_sales#132, max#148, max#149]
Keys [4]: [item_sk#129, d_date#130, web_sales#131, store_sales#132]
Functions [2]: [max(_pushedexpression#144), max(_pushedexpression#145)]
Aggregate Attributes [2]: [max(_pushedexpression#144)#150, max(_pushedexpression#145)#151]
Results [6]: [item_sk#129, d_date#130, web_sales#131, store_sales#132, max(_pushedexpression#144)#150 AS web_cumulative#152, max(_pushedexpression#145)#151 AS store_cumulative#153]

(84) Filter [codegen id : 63]
Input [6]: [item_sk#129, d_date#130, web_sales#131, store_sales#132, web_cumulative#152, store_cumulative#153]
Condition : ((isnotnull(web_cumulative#152) AND isnotnull(store_cumulative#153)) AND (web_cumulative#152 > store_cumulative#153))

(85) TakeOrderedAndProject
Input [6]: [item_sk#129, d_date#130, web_sales#131, store_sales#132, web_cumulative#152, store_cumulative#153]
Arguments: 100, [item_sk#129 ASC NULLS FIRST, d_date#130 ASC NULLS FIRST], [item_sk#129, d_date#130, web_sales#131, store_sales#132, web_cumulative#152, store_cumulative#153]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#34 IN dynamicpruning#35
BroadcastExchange (90)
+- * HashAggregate (89)
   +- * Filter (88)
      +- * ColumnarToRow (87)
         +- Scan parquet default.date_dim (86)


(86) Scan parquet default.date_dim
Output [28]: [d_date_sk#39, d_date_id#154, d_date#40, d_month_seq#155, d_week_seq#156, d_quarter_seq#157, d_year#158, d_dow#159, d_moy#160, d_dom#161, d_qoy#162, d_fy_year#163, d_fy_quarter_seq#164, d_fy_week_seq#165, d_day_name#166, d_quarter_name#167, d_holiday#168, d_weekend#169, d_following_holiday#170, d_first_dom#171, d_last_dom#172, d_same_day_ly#173, d_same_day_lq#174, d_current_day#175, d_current_week#176, d_current_month#177, d_current_quarter#178, d_current_year#179]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(87) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#39, d_date_id#154, d_date#40, d_month_seq#155, d_week_seq#156, d_quarter_seq#157, d_year#158, d_dow#159, d_moy#160, d_dom#161, d_qoy#162, d_fy_year#163, d_fy_quarter_seq#164, d_fy_week_seq#165, d_day_name#166, d_quarter_name#167, d_holiday#168, d_weekend#169, d_following_holiday#170, d_first_dom#171, d_last_dom#172, d_same_day_ly#173, d_same_day_lq#174, d_current_day#175, d_current_week#176, d_current_month#177, d_current_quarter#178, d_current_year#179]

(88) Filter [codegen id : 1]
Input [28]: [d_date_sk#39, d_date_id#154, d_date#40, d_month_seq#155, d_week_seq#156, d_quarter_seq#157, d_year#158, d_dow#159, d_moy#160, d_dom#161, d_qoy#162, d_fy_year#163, d_fy_quarter_seq#164, d_fy_week_seq#165, d_day_name#166, d_quarter_name#167, d_holiday#168, d_weekend#169, d_following_holiday#170, d_first_dom#171, d_last_dom#172, d_same_day_ly#173, d_same_day_lq#174, d_current_day#175, d_current_week#176, d_current_month#177, d_current_quarter#178, d_current_year#179]
Condition : (((isnotnull(d_month_seq#155) AND (d_month_seq#155 >= 1212)) AND (d_month_seq#155 <= 1223)) AND isnotnull(d_date_sk#39))

(89) HashAggregate [codegen id : 1]
Input [28]: [d_date_sk#39, d_date_id#154, d_date#40, d_month_seq#155, d_week_seq#156, d_quarter_seq#157, d_year#158, d_dow#159, d_moy#160, d_dom#161, d_qoy#162, d_fy_year#163, d_fy_quarter_seq#164, d_fy_week_seq#165, d_day_name#166, d_quarter_name#167, d_holiday#168, d_weekend#169, d_following_holiday#170, d_first_dom#171, d_last_dom#172, d_same_day_ly#173, d_same_day_lq#174, d_current_day#175, d_current_week#176, d_current_month#177, d_current_quarter#178, d_current_year#179]
Keys [2]: [d_date_sk#39, d_date#40]
Functions: []
Aggregate Attributes: []
Results [2]: [d_date_sk#39, d_date#40]

(90) BroadcastExchange
Input [2]: [d_date_sk#39, d_date#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#180]

Subquery:2 Hosting operator id = 33 Hosting Expression = ss_sold_date_sk#93 IN dynamicpruning#35


