== Physical Plan ==
TakeOrderedAndProject (71)
+- * HashAggregate (70)
   +- Exchange (69)
      +- * HashAggregate (68)
         +- Union (67)
            :- * Project (22)
            :  +- * Filter (21)
            :     +- Window (20)
            :        +- * Sort (19)
            :           +- Window (18)
            :              +- * Sort (17)
            :                 +- Exchange (16)
            :                    +- * HashAggregate (15)
            :                       +- Exchange (14)
            :                          +- * HashAggregate (13)
            :                             +- * Project (12)
            :                                +- * BroadcastHashJoin Inner BuildRight (11)
            :                                   :- * HashAggregate (9)
            :                                   :  +- * BroadcastHashJoin Inner BuildLeft (8)
            :                                   :     :- BroadcastExchange (4)
            :                                   :     :  +- * Filter (3)
            :                                   :     :     +- * ColumnarToRow (2)
            :                                   :     :        +- Scan parquet default.web_sales (1)
            :                                   :     +- * Filter (7)
            :                                   :        +- * ColumnarToRow (6)
            :                                   :           +- Scan parquet default.web_returns (5)
            :                                   +- ReusedExchange (10)
            :- * Project (44)
            :  +- * Filter (43)
            :     +- Window (42)
            :        +- * Sort (41)
            :           +- Window (40)
            :              +- * Sort (39)
            :                 +- Exchange (38)
            :                    +- * HashAggregate (37)
            :                       +- Exchange (36)
            :                          +- * HashAggregate (35)
            :                             +- * Project (34)
            :                                +- * BroadcastHashJoin Inner BuildRight (33)
            :                                   :- * HashAggregate (31)
            :                                   :  +- * BroadcastHashJoin Inner BuildLeft (30)
            :                                   :     :- BroadcastExchange (26)
            :                                   :     :  +- * Filter (25)
            :                                   :     :     +- * ColumnarToRow (24)
            :                                   :     :        +- Scan parquet default.catalog_sales (23)
            :                                   :     +- * Filter (29)
            :                                   :        +- * ColumnarToRow (28)
            :                                   :           +- Scan parquet default.catalog_returns (27)
            :                                   +- ReusedExchange (32)
            +- * Project (66)
               +- * Filter (65)
                  +- Window (64)
                     +- * Sort (63)
                        +- Window (62)
                           +- * Sort (61)
                              +- Exchange (60)
                                 +- * HashAggregate (59)
                                    +- Exchange (58)
                                       +- * HashAggregate (57)
                                          +- * Project (56)
                                             +- * BroadcastHashJoin Inner BuildRight (55)
                                                :- * HashAggregate (53)
                                                :  +- * BroadcastHashJoin Inner BuildLeft (52)
                                                :     :- BroadcastExchange (48)
                                                :     :  +- * Filter (47)
                                                :     :     +- * ColumnarToRow (46)
                                                :     :        +- Scan parquet default.store_sales (45)
                                                :     +- * Filter (51)
                                                :        +- * ColumnarToRow (50)
                                                :           +- Scan parquet default.store_returns (49)
                                                +- ReusedExchange (54)


(1) Scan parquet default.web_sales
Output [34]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#34), dynamicpruningexpression(ws_sold_date_sk#34 IN dynamicpruning#35)]
PushedFilters: [IsNotNull(ws_net_profit), IsNotNull(ws_net_paid), IsNotNull(ws_quantity), GreaterThan(ws_net_profit,1.00), GreaterThan(ws_net_paid,0.00), GreaterThan(ws_quantity,0), IsNotNull(ws_order_number), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_sold_time_sk:int,ws_ship_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_bill_cdemo_sk:int,ws_bill_hdemo_sk:int,ws_bill_addr_sk:int,ws_ship_customer_sk:int,ws_ship_cdemo_sk:int,ws_ship_hdemo_sk:int,ws_ship_addr_sk:int,ws_web_page_sk:int,ws_web_site_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_promo_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_list_price:decimal(7,2),ws_sales_price:decimal(7,2),ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2),ws_ext_tax:decimal(7,2),ws_coupon_amt:decimal(7,2),ws_ext_ship_cost:decimal(7,2),ws_net_paid:decimal(7,2),ws_net_paid_inc_tax:decimal(7,2),ws_net_paid_inc_ship:decimal(7,2),ws_net_paid_inc_ship_tax:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [34]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34]

(3) Filter [codegen id : 1]
Input [34]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34]
Condition : (((((((isnotnull(ws_net_profit#33) AND isnotnull(ws_net_paid#29)) AND isnotnull(ws_quantity#18)) AND (ws_net_profit#33 > 1.00)) AND (ws_net_paid#29 > 0.00)) AND (ws_quantity#18 > 0)) AND isnotnull(ws_order_number#17)) AND isnotnull(ws_item_sk#3))

(4) BroadcastExchange
Input [34]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[16, int, false] as bigint), 32) | (cast(input[2, int, false] as bigint) & 4294967295))),false), [id=#36]

(5) Scan parquet default.web_returns
Output [24]: [wr_returned_time_sk#37, wr_item_sk#38, wr_refunded_customer_sk#39, wr_refunded_cdemo_sk#40, wr_refunded_hdemo_sk#41, wr_refunded_addr_sk#42, wr_returning_customer_sk#43, wr_returning_cdemo_sk#44, wr_returning_hdemo_sk#45, wr_returning_addr_sk#46, wr_web_page_sk#47, wr_reason_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51, wr_return_tax#52, wr_return_amt_inc_tax#53, wr_fee#54, wr_return_ship_cost#55, wr_refunded_cash#56, wr_reversed_charge#57, wr_account_credit#58, wr_net_loss#59, wr_returned_date_sk#60]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_returned_time_sk:int,wr_item_sk:int,wr_refunded_customer_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_hdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_customer_sk:int,wr_returning_cdemo_sk:int,wr_returning_hdemo_sk:int,wr_returning_addr_sk:int,wr_web_page_sk:int,wr_reason_sk:int,wr_order_number:int,wr_return_quantity:int,wr_return_amt:decimal(7,2),wr_return_tax:decimal(7,2),wr_return_amt_inc_tax:decimal(7,2),wr_fee:decimal(7,2),wr_return_ship_cost:decimal(7,2),wr_refunded_cash:decimal(7,2),wr_reversed_charge:decimal(7,2),wr_account_credit:decimal(7,2),wr_net_loss:decimal(7,2)>

(6) ColumnarToRow
Input [24]: [wr_returned_time_sk#37, wr_item_sk#38, wr_refunded_customer_sk#39, wr_refunded_cdemo_sk#40, wr_refunded_hdemo_sk#41, wr_refunded_addr_sk#42, wr_returning_customer_sk#43, wr_returning_cdemo_sk#44, wr_returning_hdemo_sk#45, wr_returning_addr_sk#46, wr_web_page_sk#47, wr_reason_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51, wr_return_tax#52, wr_return_amt_inc_tax#53, wr_fee#54, wr_return_ship_cost#55, wr_refunded_cash#56, wr_reversed_charge#57, wr_account_credit#58, wr_net_loss#59, wr_returned_date_sk#60]

(7) Filter
Input [24]: [wr_returned_time_sk#37, wr_item_sk#38, wr_refunded_customer_sk#39, wr_refunded_cdemo_sk#40, wr_refunded_hdemo_sk#41, wr_refunded_addr_sk#42, wr_returning_customer_sk#43, wr_returning_cdemo_sk#44, wr_returning_hdemo_sk#45, wr_returning_addr_sk#46, wr_web_page_sk#47, wr_reason_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51, wr_return_tax#52, wr_return_amt_inc_tax#53, wr_fee#54, wr_return_ship_cost#55, wr_refunded_cash#56, wr_reversed_charge#57, wr_account_credit#58, wr_net_loss#59, wr_returned_date_sk#60]
Condition : (((isnotnull(wr_return_amt#51) AND (wr_return_amt#51 > 10000.00)) AND isnotnull(wr_order_number#49)) AND isnotnull(wr_item_sk#38))

(8) BroadcastHashJoin [codegen id : 3]
Left keys [2]: [ws_order_number#17, ws_item_sk#3]
Right keys [2]: [wr_order_number#49, wr_item_sk#38]
Join condition: None

(9) HashAggregate [codegen id : 3]
Input [58]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34, wr_returned_time_sk#37, wr_item_sk#38, wr_refunded_customer_sk#39, wr_refunded_cdemo_sk#40, wr_refunded_hdemo_sk#41, wr_refunded_addr_sk#42, wr_returning_customer_sk#43, wr_returning_cdemo_sk#44, wr_returning_hdemo_sk#45, wr_returning_addr_sk#46, wr_web_page_sk#47, wr_reason_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51, wr_return_tax#52, wr_return_amt_inc_tax#53, wr_fee#54, wr_return_ship_cost#55, wr_refunded_cash#56, wr_reversed_charge#57, wr_account_credit#58, wr_net_loss#59, wr_returned_date_sk#60]
Keys [2]: [ws_sold_date_sk#34, ws_item_sk#3]
Functions: []
Aggregate Attributes: []
Results [2]: [ws_sold_date_sk#34, ws_item_sk#3]

(10) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#61]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_sold_date_sk#34]
Right keys [1]: [d_date_sk#61]
Join condition: None

(12) Project [codegen id : 3]
Output [1]: [ws_item_sk#3]
Input [3]: [ws_sold_date_sk#34, ws_item_sk#3, d_date_sk#61]

(13) HashAggregate [codegen id : 3]
Input [1]: [ws_item_sk#3]
Keys [1]: [ws_item_sk#3]
Functions [4]: [partial_sum(coalesce(wr_return_quantity#50, 0)), partial_sum(coalesce(ws_quantity#18, 0)), partial_sum(coalesce(cast(wr_return_amt#51 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#29 as decimal(12,2)), 0.00))]
Aggregate Attributes [6]: [sum#62, sum#63, sum#64, isEmpty#65, sum#66, isEmpty#67]
Results [7]: [ws_item_sk#3, sum#68, sum#69, sum#70, isEmpty#71, sum#72, isEmpty#73]

(14) Exchange
Input [7]: [ws_item_sk#3, sum#68, sum#69, sum#70, isEmpty#71, sum#72, isEmpty#73]
Arguments: hashpartitioning(ws_item_sk#3, 5), ENSURE_REQUIREMENTS, [id=#74]

(15) HashAggregate [codegen id : 4]
Input [7]: [ws_item_sk#3, sum#68, sum#69, sum#70, isEmpty#71, sum#72, isEmpty#73]
Keys [1]: [ws_item_sk#3]
Functions [4]: [sum(coalesce(wr_return_quantity#50, 0)), sum(coalesce(ws_quantity#18, 0)), sum(coalesce(cast(wr_return_amt#51 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#29 as decimal(12,2)), 0.00))]
Aggregate Attributes [4]: [sum(coalesce(wr_return_quantity#50, 0))#75, sum(coalesce(ws_quantity#18, 0))#76, sum(coalesce(cast(wr_return_amt#51 as decimal(12,2)), 0.00))#77, sum(coalesce(cast(ws_net_paid#29 as decimal(12,2)), 0.00))#78]
Results [3]: [ws_item_sk#3 AS item#79, CheckOverflow((promote_precision(cast(sum(coalesce(wr_return_quantity#50, 0))#75 as decimal(15,4))) / promote_precision(cast(sum(coalesce(ws_quantity#18, 0))#76 as decimal(15,4)))), DecimalType(35,20)) AS return_ratio#80, CheckOverflow((promote_precision(cast(sum(coalesce(cast(wr_return_amt#51 as decimal(12,2)), 0.00))#77 as decimal(15,4))) / promote_precision(cast(sum(coalesce(cast(ws_net_paid#29 as decimal(12,2)), 0.00))#78 as decimal(15,4)))), DecimalType(35,20)) AS currency_ratio#81]

(16) Exchange
Input [3]: [item#79, return_ratio#80, currency_ratio#81]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#82]

(17) Sort [codegen id : 5]
Input [3]: [item#79, return_ratio#80, currency_ratio#81]
Arguments: [return_ratio#80 ASC NULLS FIRST], false, 0

(18) Window
Input [3]: [item#79, return_ratio#80, currency_ratio#81]
Arguments: [rank(return_ratio#80) windowspecdefinition(return_ratio#80 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#83], [return_ratio#80 ASC NULLS FIRST]

(19) Sort [codegen id : 6]
Input [4]: [item#79, return_ratio#80, currency_ratio#81, return_rank#83]
Arguments: [currency_ratio#81 ASC NULLS FIRST], false, 0

(20) Window
Input [4]: [item#79, return_ratio#80, currency_ratio#81, return_rank#83]
Arguments: [rank(currency_ratio#81) windowspecdefinition(currency_ratio#81 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#84], [currency_ratio#81 ASC NULLS FIRST]

(21) Filter [codegen id : 7]
Input [5]: [item#79, return_ratio#80, currency_ratio#81, return_rank#83, currency_rank#84]
Condition : ((return_rank#83 <= 10) OR (currency_rank#84 <= 10))

(22) Project [codegen id : 7]
Output [5]: [web AS channel#85, item#79, return_ratio#80, return_rank#83, currency_rank#84]
Input [5]: [item#79, return_ratio#80, currency_ratio#81, return_rank#83, currency_rank#84]

(23) Scan parquet default.catalog_sales
Output [34]: [cs_sold_time_sk#86, cs_ship_date_sk#87, cs_bill_customer_sk#88, cs_bill_cdemo_sk#89, cs_bill_hdemo_sk#90, cs_bill_addr_sk#91, cs_ship_customer_sk#92, cs_ship_cdemo_sk#93, cs_ship_hdemo_sk#94, cs_ship_addr_sk#95, cs_call_center_sk#96, cs_catalog_page_sk#97, cs_ship_mode_sk#98, cs_warehouse_sk#99, cs_item_sk#100, cs_promo_sk#101, cs_order_number#102, cs_quantity#103, cs_wholesale_cost#104, cs_list_price#105, cs_sales_price#106, cs_ext_discount_amt#107, cs_ext_sales_price#108, cs_ext_wholesale_cost#109, cs_ext_list_price#110, cs_ext_tax#111, cs_coupon_amt#112, cs_ext_ship_cost#113, cs_net_paid#114, cs_net_paid_inc_tax#115, cs_net_paid_inc_ship#116, cs_net_paid_inc_ship_tax#117, cs_net_profit#118, cs_sold_date_sk#119]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#119), dynamicpruningexpression(cs_sold_date_sk#119 IN dynamicpruning#35)]
PushedFilters: [IsNotNull(cs_net_profit), IsNotNull(cs_net_paid), IsNotNull(cs_quantity), GreaterThan(cs_net_profit,1.00), GreaterThan(cs_net_paid,0.00), GreaterThan(cs_quantity,0), IsNotNull(cs_order_number), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_time_sk:int,cs_ship_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_bill_addr_sk:int,cs_ship_customer_sk:int,cs_ship_cdemo_sk:int,cs_ship_hdemo_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_catalog_page_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2),cs_ext_tax:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_ext_ship_cost:decimal(7,2),cs_net_paid:decimal(7,2),cs_net_paid_inc_tax:decimal(7,2),cs_net_paid_inc_ship:decimal(7,2),cs_net_paid_inc_ship_tax:decimal(7,2),cs_net_profit:decimal(7,2)>

(24) ColumnarToRow [codegen id : 8]
Input [34]: [cs_sold_time_sk#86, cs_ship_date_sk#87, cs_bill_customer_sk#88, cs_bill_cdemo_sk#89, cs_bill_hdemo_sk#90, cs_bill_addr_sk#91, cs_ship_customer_sk#92, cs_ship_cdemo_sk#93, cs_ship_hdemo_sk#94, cs_ship_addr_sk#95, cs_call_center_sk#96, cs_catalog_page_sk#97, cs_ship_mode_sk#98, cs_warehouse_sk#99, cs_item_sk#100, cs_promo_sk#101, cs_order_number#102, cs_quantity#103, cs_wholesale_cost#104, cs_list_price#105, cs_sales_price#106, cs_ext_discount_amt#107, cs_ext_sales_price#108, cs_ext_wholesale_cost#109, cs_ext_list_price#110, cs_ext_tax#111, cs_coupon_amt#112, cs_ext_ship_cost#113, cs_net_paid#114, cs_net_paid_inc_tax#115, cs_net_paid_inc_ship#116, cs_net_paid_inc_ship_tax#117, cs_net_profit#118, cs_sold_date_sk#119]

(25) Filter [codegen id : 8]
Input [34]: [cs_sold_time_sk#86, cs_ship_date_sk#87, cs_bill_customer_sk#88, cs_bill_cdemo_sk#89, cs_bill_hdemo_sk#90, cs_bill_addr_sk#91, cs_ship_customer_sk#92, cs_ship_cdemo_sk#93, cs_ship_hdemo_sk#94, cs_ship_addr_sk#95, cs_call_center_sk#96, cs_catalog_page_sk#97, cs_ship_mode_sk#98, cs_warehouse_sk#99, cs_item_sk#100, cs_promo_sk#101, cs_order_number#102, cs_quantity#103, cs_wholesale_cost#104, cs_list_price#105, cs_sales_price#106, cs_ext_discount_amt#107, cs_ext_sales_price#108, cs_ext_wholesale_cost#109, cs_ext_list_price#110, cs_ext_tax#111, cs_coupon_amt#112, cs_ext_ship_cost#113, cs_net_paid#114, cs_net_paid_inc_tax#115, cs_net_paid_inc_ship#116, cs_net_paid_inc_ship_tax#117, cs_net_profit#118, cs_sold_date_sk#119]
Condition : (((((((isnotnull(cs_net_profit#118) AND isnotnull(cs_net_paid#114)) AND isnotnull(cs_quantity#103)) AND (cs_net_profit#118 > 1.00)) AND (cs_net_paid#114 > 0.00)) AND (cs_quantity#103 > 0)) AND isnotnull(cs_order_number#102)) AND isnotnull(cs_item_sk#100))

(26) BroadcastExchange
Input [34]: [cs_sold_time_sk#86, cs_ship_date_sk#87, cs_bill_customer_sk#88, cs_bill_cdemo_sk#89, cs_bill_hdemo_sk#90, cs_bill_addr_sk#91, cs_ship_customer_sk#92, cs_ship_cdemo_sk#93, cs_ship_hdemo_sk#94, cs_ship_addr_sk#95, cs_call_center_sk#96, cs_catalog_page_sk#97, cs_ship_mode_sk#98, cs_warehouse_sk#99, cs_item_sk#100, cs_promo_sk#101, cs_order_number#102, cs_quantity#103, cs_wholesale_cost#104, cs_list_price#105, cs_sales_price#106, cs_ext_discount_amt#107, cs_ext_sales_price#108, cs_ext_wholesale_cost#109, cs_ext_list_price#110, cs_ext_tax#111, cs_coupon_amt#112, cs_ext_ship_cost#113, cs_net_paid#114, cs_net_paid_inc_tax#115, cs_net_paid_inc_ship#116, cs_net_paid_inc_ship_tax#117, cs_net_profit#118, cs_sold_date_sk#119]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[16, int, false] as bigint), 32) | (cast(input[14, int, false] as bigint) & 4294967295))),false), [id=#120]

(27) Scan parquet default.catalog_returns
Output [27]: [cr_returned_time_sk#121, cr_item_sk#122, cr_refunded_customer_sk#123, cr_refunded_cdemo_sk#124, cr_refunded_hdemo_sk#125, cr_refunded_addr_sk#126, cr_returning_customer_sk#127, cr_returning_cdemo_sk#128, cr_returning_hdemo_sk#129, cr_returning_addr_sk#130, cr_call_center_sk#131, cr_catalog_page_sk#132, cr_ship_mode_sk#133, cr_warehouse_sk#134, cr_reason_sk#135, cr_order_number#136, cr_return_quantity#137, cr_return_amount#138, cr_return_tax#139, cr_return_amt_inc_tax#140, cr_fee#141, cr_return_ship_cost#142, cr_refunded_cash#143, cr_reversed_charge#144, cr_store_credit#145, cr_net_loss#146, cr_returned_date_sk#147]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_returned_time_sk:int,cr_item_sk:int,cr_refunded_customer_sk:int,cr_refunded_cdemo_sk:int,cr_refunded_hdemo_sk:int,cr_refunded_addr_sk:int,cr_returning_customer_sk:int,cr_returning_cdemo_sk:int,cr_returning_hdemo_sk:int,cr_returning_addr_sk:int,cr_call_center_sk:int,cr_catalog_page_sk:int,cr_ship_mode_sk:int,cr_warehouse_sk:int,cr_reason_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2),cr_return_tax:decimal(7,2),cr_return_amt_inc_tax:decimal(7,2),cr_fee:decimal(7,2),cr_return_ship_cost:decimal(7,2),cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2),cr_net_loss:decimal(7,2)>

(28) ColumnarToRow
Input [27]: [cr_returned_time_sk#121, cr_item_sk#122, cr_refunded_customer_sk#123, cr_refunded_cdemo_sk#124, cr_refunded_hdemo_sk#125, cr_refunded_addr_sk#126, cr_returning_customer_sk#127, cr_returning_cdemo_sk#128, cr_returning_hdemo_sk#129, cr_returning_addr_sk#130, cr_call_center_sk#131, cr_catalog_page_sk#132, cr_ship_mode_sk#133, cr_warehouse_sk#134, cr_reason_sk#135, cr_order_number#136, cr_return_quantity#137, cr_return_amount#138, cr_return_tax#139, cr_return_amt_inc_tax#140, cr_fee#141, cr_return_ship_cost#142, cr_refunded_cash#143, cr_reversed_charge#144, cr_store_credit#145, cr_net_loss#146, cr_returned_date_sk#147]

(29) Filter
Input [27]: [cr_returned_time_sk#121, cr_item_sk#122, cr_refunded_customer_sk#123, cr_refunded_cdemo_sk#124, cr_refunded_hdemo_sk#125, cr_refunded_addr_sk#126, cr_returning_customer_sk#127, cr_returning_cdemo_sk#128, cr_returning_hdemo_sk#129, cr_returning_addr_sk#130, cr_call_center_sk#131, cr_catalog_page_sk#132, cr_ship_mode_sk#133, cr_warehouse_sk#134, cr_reason_sk#135, cr_order_number#136, cr_return_quantity#137, cr_return_amount#138, cr_return_tax#139, cr_return_amt_inc_tax#140, cr_fee#141, cr_return_ship_cost#142, cr_refunded_cash#143, cr_reversed_charge#144, cr_store_credit#145, cr_net_loss#146, cr_returned_date_sk#147]
Condition : (((isnotnull(cr_return_amount#138) AND (cr_return_amount#138 > 10000.00)) AND isnotnull(cr_order_number#136)) AND isnotnull(cr_item_sk#122))

(30) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [cs_order_number#102, cs_item_sk#100]
Right keys [2]: [cr_order_number#136, cr_item_sk#122]
Join condition: None

(31) HashAggregate [codegen id : 10]
Input [61]: [cs_sold_time_sk#86, cs_ship_date_sk#87, cs_bill_customer_sk#88, cs_bill_cdemo_sk#89, cs_bill_hdemo_sk#90, cs_bill_addr_sk#91, cs_ship_customer_sk#92, cs_ship_cdemo_sk#93, cs_ship_hdemo_sk#94, cs_ship_addr_sk#95, cs_call_center_sk#96, cs_catalog_page_sk#97, cs_ship_mode_sk#98, cs_warehouse_sk#99, cs_item_sk#100, cs_promo_sk#101, cs_order_number#102, cs_quantity#103, cs_wholesale_cost#104, cs_list_price#105, cs_sales_price#106, cs_ext_discount_amt#107, cs_ext_sales_price#108, cs_ext_wholesale_cost#109, cs_ext_list_price#110, cs_ext_tax#111, cs_coupon_amt#112, cs_ext_ship_cost#113, cs_net_paid#114, cs_net_paid_inc_tax#115, cs_net_paid_inc_ship#116, cs_net_paid_inc_ship_tax#117, cs_net_profit#118, cs_sold_date_sk#119, cr_returned_time_sk#121, cr_item_sk#122, cr_refunded_customer_sk#123, cr_refunded_cdemo_sk#124, cr_refunded_hdemo_sk#125, cr_refunded_addr_sk#126, cr_returning_customer_sk#127, cr_returning_cdemo_sk#128, cr_returning_hdemo_sk#129, cr_returning_addr_sk#130, cr_call_center_sk#131, cr_catalog_page_sk#132, cr_ship_mode_sk#133, cr_warehouse_sk#134, cr_reason_sk#135, cr_order_number#136, cr_return_quantity#137, cr_return_amount#138, cr_return_tax#139, cr_return_amt_inc_tax#140, cr_fee#141, cr_return_ship_cost#142, cr_refunded_cash#143, cr_reversed_charge#144, cr_store_credit#145, cr_net_loss#146, cr_returned_date_sk#147]
Keys [2]: [cs_sold_date_sk#119, cs_item_sk#100]
Functions: []
Aggregate Attributes: []
Results [2]: [cs_sold_date_sk#119, cs_item_sk#100]

(32) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#148]

(33) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#119]
Right keys [1]: [d_date_sk#148]
Join condition: None

(34) Project [codegen id : 10]
Output [1]: [cs_item_sk#100]
Input [3]: [cs_sold_date_sk#119, cs_item_sk#100, d_date_sk#148]

(35) HashAggregate [codegen id : 10]
Input [1]: [cs_item_sk#100]
Keys [1]: [cs_item_sk#100]
Functions [4]: [partial_sum(coalesce(cr_return_quantity#137, 0)), partial_sum(coalesce(cs_quantity#103, 0)), partial_sum(coalesce(cast(cr_return_amount#138 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#114 as decimal(12,2)), 0.00))]
Aggregate Attributes [6]: [sum#149, sum#150, sum#151, isEmpty#152, sum#153, isEmpty#154]
Results [7]: [cs_item_sk#100, sum#155, sum#156, sum#157, isEmpty#158, sum#159, isEmpty#160]

(36) Exchange
Input [7]: [cs_item_sk#100, sum#155, sum#156, sum#157, isEmpty#158, sum#159, isEmpty#160]
Arguments: hashpartitioning(cs_item_sk#100, 5), ENSURE_REQUIREMENTS, [id=#161]

(37) HashAggregate [codegen id : 11]
Input [7]: [cs_item_sk#100, sum#155, sum#156, sum#157, isEmpty#158, sum#159, isEmpty#160]
Keys [1]: [cs_item_sk#100]
Functions [4]: [sum(coalesce(cr_return_quantity#137, 0)), sum(coalesce(cs_quantity#103, 0)), sum(coalesce(cast(cr_return_amount#138 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#114 as decimal(12,2)), 0.00))]
Aggregate Attributes [4]: [sum(coalesce(cr_return_quantity#137, 0))#162, sum(coalesce(cs_quantity#103, 0))#163, sum(coalesce(cast(cr_return_amount#138 as decimal(12,2)), 0.00))#164, sum(coalesce(cast(cs_net_paid#114 as decimal(12,2)), 0.00))#165]
Results [3]: [cs_item_sk#100 AS item#166, CheckOverflow((promote_precision(cast(sum(coalesce(cr_return_quantity#137, 0))#162 as decimal(15,4))) / promote_precision(cast(sum(coalesce(cs_quantity#103, 0))#163 as decimal(15,4)))), DecimalType(35,20)) AS return_ratio#167, CheckOverflow((promote_precision(cast(sum(coalesce(cast(cr_return_amount#138 as decimal(12,2)), 0.00))#164 as decimal(15,4))) / promote_precision(cast(sum(coalesce(cast(cs_net_paid#114 as decimal(12,2)), 0.00))#165 as decimal(15,4)))), DecimalType(35,20)) AS currency_ratio#168]

(38) Exchange
Input [3]: [item#166, return_ratio#167, currency_ratio#168]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#169]

(39) Sort [codegen id : 12]
Input [3]: [item#166, return_ratio#167, currency_ratio#168]
Arguments: [return_ratio#167 ASC NULLS FIRST], false, 0

(40) Window
Input [3]: [item#166, return_ratio#167, currency_ratio#168]
Arguments: [rank(return_ratio#167) windowspecdefinition(return_ratio#167 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#170], [return_ratio#167 ASC NULLS FIRST]

(41) Sort [codegen id : 13]
Input [4]: [item#166, return_ratio#167, currency_ratio#168, return_rank#170]
Arguments: [currency_ratio#168 ASC NULLS FIRST], false, 0

(42) Window
Input [4]: [item#166, return_ratio#167, currency_ratio#168, return_rank#170]
Arguments: [rank(currency_ratio#168) windowspecdefinition(currency_ratio#168 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#171], [currency_ratio#168 ASC NULLS FIRST]

(43) Filter [codegen id : 14]
Input [5]: [item#166, return_ratio#167, currency_ratio#168, return_rank#170, currency_rank#171]
Condition : ((return_rank#170 <= 10) OR (currency_rank#171 <= 10))

(44) Project [codegen id : 14]
Output [5]: [catalog AS channel#172, item#166, return_ratio#167, return_rank#170, currency_rank#171]
Input [5]: [item#166, return_ratio#167, currency_ratio#168, return_rank#170, currency_rank#171]

(45) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#173, ss_item_sk#174, ss_customer_sk#175, ss_cdemo_sk#176, ss_hdemo_sk#177, ss_addr_sk#178, ss_store_sk#179, ss_promo_sk#180, ss_ticket_number#181, ss_quantity#182, ss_wholesale_cost#183, ss_list_price#184, ss_sales_price#185, ss_ext_discount_amt#186, ss_ext_sales_price#187, ss_ext_wholesale_cost#188, ss_ext_list_price#189, ss_ext_tax#190, ss_coupon_amt#191, ss_net_paid#192, ss_net_paid_inc_tax#193, ss_net_profit#194, ss_sold_date_sk#195]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#195), dynamicpruningexpression(ss_sold_date_sk#195 IN dynamicpruning#35)]
PushedFilters: [IsNotNull(ss_net_profit), IsNotNull(ss_net_paid), IsNotNull(ss_quantity), GreaterThan(ss_net_profit,1.00), GreaterThan(ss_net_paid,0.00), GreaterThan(ss_quantity,0), IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(46) ColumnarToRow [codegen id : 15]
Input [23]: [ss_sold_time_sk#173, ss_item_sk#174, ss_customer_sk#175, ss_cdemo_sk#176, ss_hdemo_sk#177, ss_addr_sk#178, ss_store_sk#179, ss_promo_sk#180, ss_ticket_number#181, ss_quantity#182, ss_wholesale_cost#183, ss_list_price#184, ss_sales_price#185, ss_ext_discount_amt#186, ss_ext_sales_price#187, ss_ext_wholesale_cost#188, ss_ext_list_price#189, ss_ext_tax#190, ss_coupon_amt#191, ss_net_paid#192, ss_net_paid_inc_tax#193, ss_net_profit#194, ss_sold_date_sk#195]

(47) Filter [codegen id : 15]
Input [23]: [ss_sold_time_sk#173, ss_item_sk#174, ss_customer_sk#175, ss_cdemo_sk#176, ss_hdemo_sk#177, ss_addr_sk#178, ss_store_sk#179, ss_promo_sk#180, ss_ticket_number#181, ss_quantity#182, ss_wholesale_cost#183, ss_list_price#184, ss_sales_price#185, ss_ext_discount_amt#186, ss_ext_sales_price#187, ss_ext_wholesale_cost#188, ss_ext_list_price#189, ss_ext_tax#190, ss_coupon_amt#191, ss_net_paid#192, ss_net_paid_inc_tax#193, ss_net_profit#194, ss_sold_date_sk#195]
Condition : (((((((isnotnull(ss_net_profit#194) AND isnotnull(ss_net_paid#192)) AND isnotnull(ss_quantity#182)) AND (ss_net_profit#194 > 1.00)) AND (ss_net_paid#192 > 0.00)) AND (ss_quantity#182 > 0)) AND isnotnull(ss_ticket_number#181)) AND isnotnull(ss_item_sk#174))

(48) BroadcastExchange
Input [23]: [ss_sold_time_sk#173, ss_item_sk#174, ss_customer_sk#175, ss_cdemo_sk#176, ss_hdemo_sk#177, ss_addr_sk#178, ss_store_sk#179, ss_promo_sk#180, ss_ticket_number#181, ss_quantity#182, ss_wholesale_cost#183, ss_list_price#184, ss_sales_price#185, ss_ext_discount_amt#186, ss_ext_sales_price#187, ss_ext_wholesale_cost#188, ss_ext_list_price#189, ss_ext_tax#190, ss_coupon_amt#191, ss_net_paid#192, ss_net_paid_inc_tax#193, ss_net_profit#194, ss_sold_date_sk#195]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[8, int, false] as bigint), 32) | (cast(input[1, int, false] as bigint) & 4294967295))),false), [id=#196]

(49) Scan parquet default.store_returns
Output [20]: [sr_return_time_sk#197, sr_item_sk#198, sr_customer_sk#199, sr_cdemo_sk#200, sr_hdemo_sk#201, sr_addr_sk#202, sr_store_sk#203, sr_reason_sk#204, sr_ticket_number#205, sr_return_quantity#206, sr_return_amt#207, sr_return_tax#208, sr_return_amt_inc_tax#209, sr_fee#210, sr_return_ship_cost#211, sr_refunded_cash#212, sr_reversed_charge#213, sr_store_credit#214, sr_net_loss#215, sr_returned_date_sk#216]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_return_time_sk:int,sr_item_sk:int,sr_customer_sk:int,sr_cdemo_sk:int,sr_hdemo_sk:int,sr_addr_sk:int,sr_store_sk:int,sr_reason_sk:int,sr_ticket_number:int,sr_return_quantity:int,sr_return_amt:decimal(7,2),sr_return_tax:decimal(7,2),sr_return_amt_inc_tax:decimal(7,2),sr_fee:decimal(7,2),sr_return_ship_cost:decimal(7,2),sr_refunded_cash:decimal(7,2),sr_reversed_charge:decimal(7,2),sr_store_credit:decimal(7,2),sr_net_loss:decimal(7,2)>

(50) ColumnarToRow
Input [20]: [sr_return_time_sk#197, sr_item_sk#198, sr_customer_sk#199, sr_cdemo_sk#200, sr_hdemo_sk#201, sr_addr_sk#202, sr_store_sk#203, sr_reason_sk#204, sr_ticket_number#205, sr_return_quantity#206, sr_return_amt#207, sr_return_tax#208, sr_return_amt_inc_tax#209, sr_fee#210, sr_return_ship_cost#211, sr_refunded_cash#212, sr_reversed_charge#213, sr_store_credit#214, sr_net_loss#215, sr_returned_date_sk#216]

(51) Filter
Input [20]: [sr_return_time_sk#197, sr_item_sk#198, sr_customer_sk#199, sr_cdemo_sk#200, sr_hdemo_sk#201, sr_addr_sk#202, sr_store_sk#203, sr_reason_sk#204, sr_ticket_number#205, sr_return_quantity#206, sr_return_amt#207, sr_return_tax#208, sr_return_amt_inc_tax#209, sr_fee#210, sr_return_ship_cost#211, sr_refunded_cash#212, sr_reversed_charge#213, sr_store_credit#214, sr_net_loss#215, sr_returned_date_sk#216]
Condition : (((isnotnull(sr_return_amt#207) AND (sr_return_amt#207 > 10000.00)) AND isnotnull(sr_ticket_number#205)) AND isnotnull(sr_item_sk#198))

(52) BroadcastHashJoin [codegen id : 17]
Left keys [2]: [ss_ticket_number#181, ss_item_sk#174]
Right keys [2]: [sr_ticket_number#205, sr_item_sk#198]
Join condition: None

(53) HashAggregate [codegen id : 17]
Input [43]: [ss_sold_time_sk#173, ss_item_sk#174, ss_customer_sk#175, ss_cdemo_sk#176, ss_hdemo_sk#177, ss_addr_sk#178, ss_store_sk#179, ss_promo_sk#180, ss_ticket_number#181, ss_quantity#182, ss_wholesale_cost#183, ss_list_price#184, ss_sales_price#185, ss_ext_discount_amt#186, ss_ext_sales_price#187, ss_ext_wholesale_cost#188, ss_ext_list_price#189, ss_ext_tax#190, ss_coupon_amt#191, ss_net_paid#192, ss_net_paid_inc_tax#193, ss_net_profit#194, ss_sold_date_sk#195, sr_return_time_sk#197, sr_item_sk#198, sr_customer_sk#199, sr_cdemo_sk#200, sr_hdemo_sk#201, sr_addr_sk#202, sr_store_sk#203, sr_reason_sk#204, sr_ticket_number#205, sr_return_quantity#206, sr_return_amt#207, sr_return_tax#208, sr_return_amt_inc_tax#209, sr_fee#210, sr_return_ship_cost#211, sr_refunded_cash#212, sr_reversed_charge#213, sr_store_credit#214, sr_net_loss#215, sr_returned_date_sk#216]
Keys [2]: [ss_sold_date_sk#195, ss_item_sk#174]
Functions: []
Aggregate Attributes: []
Results [2]: [ss_sold_date_sk#195, ss_item_sk#174]

(54) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#217]

(55) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_sold_date_sk#195]
Right keys [1]: [d_date_sk#217]
Join condition: None

(56) Project [codegen id : 17]
Output [1]: [ss_item_sk#174]
Input [3]: [ss_sold_date_sk#195, ss_item_sk#174, d_date_sk#217]

(57) HashAggregate [codegen id : 17]
Input [1]: [ss_item_sk#174]
Keys [1]: [ss_item_sk#174]
Functions [4]: [partial_sum(coalesce(sr_return_quantity#206, 0)), partial_sum(coalesce(ss_quantity#182, 0)), partial_sum(coalesce(cast(sr_return_amt#207 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#192 as decimal(12,2)), 0.00))]
Aggregate Attributes [6]: [sum#218, sum#219, sum#220, isEmpty#221, sum#222, isEmpty#223]
Results [7]: [ss_item_sk#174, sum#224, sum#225, sum#226, isEmpty#227, sum#228, isEmpty#229]

(58) Exchange
Input [7]: [ss_item_sk#174, sum#224, sum#225, sum#226, isEmpty#227, sum#228, isEmpty#229]
Arguments: hashpartitioning(ss_item_sk#174, 5), ENSURE_REQUIREMENTS, [id=#230]

(59) HashAggregate [codegen id : 18]
Input [7]: [ss_item_sk#174, sum#224, sum#225, sum#226, isEmpty#227, sum#228, isEmpty#229]
Keys [1]: [ss_item_sk#174]
Functions [4]: [sum(coalesce(sr_return_quantity#206, 0)), sum(coalesce(ss_quantity#182, 0)), sum(coalesce(cast(sr_return_amt#207 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#192 as decimal(12,2)), 0.00))]
Aggregate Attributes [4]: [sum(coalesce(sr_return_quantity#206, 0))#231, sum(coalesce(ss_quantity#182, 0))#232, sum(coalesce(cast(sr_return_amt#207 as decimal(12,2)), 0.00))#233, sum(coalesce(cast(ss_net_paid#192 as decimal(12,2)), 0.00))#234]
Results [3]: [ss_item_sk#174 AS item#235, CheckOverflow((promote_precision(cast(sum(coalesce(sr_return_quantity#206, 0))#231 as decimal(15,4))) / promote_precision(cast(sum(coalesce(ss_quantity#182, 0))#232 as decimal(15,4)))), DecimalType(35,20)) AS return_ratio#236, CheckOverflow((promote_precision(cast(sum(coalesce(cast(sr_return_amt#207 as decimal(12,2)), 0.00))#233 as decimal(15,4))) / promote_precision(cast(sum(coalesce(cast(ss_net_paid#192 as decimal(12,2)), 0.00))#234 as decimal(15,4)))), DecimalType(35,20)) AS currency_ratio#237]

(60) Exchange
Input [3]: [item#235, return_ratio#236, currency_ratio#237]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#238]

(61) Sort [codegen id : 19]
Input [3]: [item#235, return_ratio#236, currency_ratio#237]
Arguments: [return_ratio#236 ASC NULLS FIRST], false, 0

(62) Window
Input [3]: [item#235, return_ratio#236, currency_ratio#237]
Arguments: [rank(return_ratio#236) windowspecdefinition(return_ratio#236 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#239], [return_ratio#236 ASC NULLS FIRST]

(63) Sort [codegen id : 20]
Input [4]: [item#235, return_ratio#236, currency_ratio#237, return_rank#239]
Arguments: [currency_ratio#237 ASC NULLS FIRST], false, 0

(64) Window
Input [4]: [item#235, return_ratio#236, currency_ratio#237, return_rank#239]
Arguments: [rank(currency_ratio#237) windowspecdefinition(currency_ratio#237 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#240], [currency_ratio#237 ASC NULLS FIRST]

(65) Filter [codegen id : 21]
Input [5]: [item#235, return_ratio#236, currency_ratio#237, return_rank#239, currency_rank#240]
Condition : ((return_rank#239 <= 10) OR (currency_rank#240 <= 10))

(66) Project [codegen id : 21]
Output [5]: [store AS channel#241, item#235, return_ratio#236, return_rank#239, currency_rank#240]
Input [5]: [item#235, return_ratio#236, currency_ratio#237, return_rank#239, currency_rank#240]

(67) Union

(68) HashAggregate [codegen id : 22]
Input [5]: [channel#85, item#79, return_ratio#80, return_rank#83, currency_rank#84]
Keys [5]: [channel#85, item#79, return_ratio#80, return_rank#83, currency_rank#84]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#85, item#79, return_ratio#80, return_rank#83, currency_rank#84]

(69) Exchange
Input [5]: [channel#85, item#79, return_ratio#80, return_rank#83, currency_rank#84]
Arguments: hashpartitioning(channel#85, item#79, return_ratio#80, return_rank#83, currency_rank#84, 5), ENSURE_REQUIREMENTS, [id=#242]

(70) HashAggregate [codegen id : 23]
Input [5]: [channel#85, item#79, return_ratio#80, return_rank#83, currency_rank#84]
Keys [5]: [channel#85, item#79, return_ratio#80, return_rank#83, currency_rank#84]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#85, item#79, return_ratio#80, return_rank#83, currency_rank#84]

(71) TakeOrderedAndProject
Input [5]: [channel#85, item#79, return_ratio#80, return_rank#83, currency_rank#84]
Arguments: 100, [channel#85 ASC NULLS FIRST, return_rank#83 ASC NULLS FIRST, currency_rank#84 ASC NULLS FIRST, item#79 ASC NULLS FIRST], [channel#85, item#79, return_ratio#80, return_rank#83, currency_rank#84]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#34 IN dynamicpruning#35
BroadcastExchange (76)
+- * HashAggregate (75)
   +- * Filter (74)
      +- * ColumnarToRow (73)
         +- Scan parquet default.date_dim (72)


(72) Scan parquet default.date_dim
Output [28]: [d_date_sk#61, d_date_id#243, d_date#244, d_month_seq#245, d_week_seq#246, d_quarter_seq#247, d_year#248, d_dow#249, d_moy#250, d_dom#251, d_qoy#252, d_fy_year#253, d_fy_quarter_seq#254, d_fy_week_seq#255, d_day_name#256, d_quarter_name#257, d_holiday#258, d_weekend#259, d_following_holiday#260, d_first_dom#261, d_last_dom#262, d_same_day_ly#263, d_same_day_lq#264, d_current_day#265, d_current_week#266, d_current_month#267, d_current_quarter#268, d_current_year#269]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,12), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(73) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#61, d_date_id#243, d_date#244, d_month_seq#245, d_week_seq#246, d_quarter_seq#247, d_year#248, d_dow#249, d_moy#250, d_dom#251, d_qoy#252, d_fy_year#253, d_fy_quarter_seq#254, d_fy_week_seq#255, d_day_name#256, d_quarter_name#257, d_holiday#258, d_weekend#259, d_following_holiday#260, d_first_dom#261, d_last_dom#262, d_same_day_ly#263, d_same_day_lq#264, d_current_day#265, d_current_week#266, d_current_month#267, d_current_quarter#268, d_current_year#269]

(74) Filter [codegen id : 1]
Input [28]: [d_date_sk#61, d_date_id#243, d_date#244, d_month_seq#245, d_week_seq#246, d_quarter_seq#247, d_year#248, d_dow#249, d_moy#250, d_dom#251, d_qoy#252, d_fy_year#253, d_fy_quarter_seq#254, d_fy_week_seq#255, d_day_name#256, d_quarter_name#257, d_holiday#258, d_weekend#259, d_following_holiday#260, d_first_dom#261, d_last_dom#262, d_same_day_ly#263, d_same_day_lq#264, d_current_day#265, d_current_week#266, d_current_month#267, d_current_quarter#268, d_current_year#269]
Condition : ((((isnotnull(d_year#248) AND isnotnull(d_moy#250)) AND (d_year#248 = 2001)) AND (d_moy#250 = 12)) AND isnotnull(d_date_sk#61))

(75) HashAggregate [codegen id : 1]
Input [28]: [d_date_sk#61, d_date_id#243, d_date#244, d_month_seq#245, d_week_seq#246, d_quarter_seq#247, d_year#248, d_dow#249, d_moy#250, d_dom#251, d_qoy#252, d_fy_year#253, d_fy_quarter_seq#254, d_fy_week_seq#255, d_day_name#256, d_quarter_name#257, d_holiday#258, d_weekend#259, d_following_holiday#260, d_first_dom#261, d_last_dom#262, d_same_day_ly#263, d_same_day_lq#264, d_current_day#265, d_current_week#266, d_current_month#267, d_current_quarter#268, d_current_year#269]
Keys [1]: [d_date_sk#61]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#61]

(76) BroadcastExchange
Input [1]: [d_date_sk#61]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#270]

Subquery:2 Hosting operator id = 23 Hosting Expression = cs_sold_date_sk#119 IN dynamicpruning#35

Subquery:3 Hosting operator id = 45 Hosting Expression = ss_sold_date_sk#195 IN dynamicpruning#35


