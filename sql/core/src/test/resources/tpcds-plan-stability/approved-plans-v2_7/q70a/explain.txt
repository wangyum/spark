== Physical Plan ==
TakeOrderedAndProject (59)
+- * Project (58)
   +- Window (57)
      +- * Sort (56)
         +- Exchange (55)
            +- * HashAggregate (54)
               +- Exchange (53)
                  +- * HashAggregate (52)
                     +- Union (51)
                        :- * HashAggregate (40)
                        :  +- Exchange (39)
                        :     +- * HashAggregate (38)
                        :        +- * Project (37)
                        :           +- * BroadcastHashJoin Inner BuildRight (36)
                        :              :- * Project (7)
                        :              :  +- * HashAggregate (6)
                        :              :     +- * BroadcastHashJoin Inner BuildRight (5)
                        :              :        :- * Filter (3)
                        :              :        :  +- * ColumnarToRow (2)
                        :              :        :     +- Scan parquet default.store_sales (1)
                        :              :        +- ReusedExchange (4)
                        :              +- BroadcastExchange (35)
                        :                 +- * HashAggregate (34)
                        :                    +- * BroadcastHashJoin LeftSemi BuildRight (33)
                        :                       :- * Filter (10)
                        :                       :  +- * ColumnarToRow (9)
                        :                       :     +- Scan parquet default.store (8)
                        :                       +- BroadcastExchange (32)
                        :                          +- * HashAggregate (31)
                        :                             +- * Project (30)
                        :                                +- * Filter (29)
                        :                                   +- Window (28)
                        :                                      +- * Sort (27)
                        :                                         +- * HashAggregate (26)
                        :                                            +- Exchange (25)
                        :                                               +- * HashAggregate (24)
                        :                                                  +- * Project (23)
                        :                                                     +- * BroadcastHashJoin Inner BuildRight (22)
                        :                                                        :- * Project (20)
                        :                                                        :  +- * HashAggregate (19)
                        :                                                        :     +- * BroadcastHashJoin Inner BuildRight (18)
                        :                                                        :        :- * Filter (13)
                        :                                                        :        :  +- * ColumnarToRow (12)
                        :                                                        :        :     +- Scan parquet default.store_sales (11)
                        :                                                        :        +- BroadcastExchange (17)
                        :                                                        :           +- * Filter (16)
                        :                                                        :              +- * ColumnarToRow (15)
                        :                                                        :                 +- Scan parquet default.store (14)
                        :                                                        +- ReusedExchange (21)
                        :- * HashAggregate (45)
                        :  +- Exchange (44)
                        :     +- * HashAggregate (43)
                        :        +- * HashAggregate (42)
                        :           +- ReusedExchange (41)
                        +- * HashAggregate (50)
                           +- Exchange (49)
                              +- * HashAggregate (48)
                                 +- * HashAggregate (47)
                                    +- ReusedExchange (46)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23), dynamicpruningexpression(ss_sold_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 8]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 8]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : isnotnull(ss_store_sk#7)

(4) ReusedExchange [Reuses operator id: 63]
Output [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]

(5) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#25]
Join condition: None

(6) HashAggregate [codegen id : 8]
Input [51]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Keys [1]: [ss_store_sk#7]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#22))]
Aggregate Attributes [1]: [sum#53]
Results [2]: [ss_store_sk#7, sum#54]

(7) Project [codegen id : 8]
Output [2]: [ss_store_sk#7, sum#54 AS _pushedexpression#55]
Input [2]: [ss_store_sk#7, sum#54]

(8) Scan parquet default.store
Output [29]: [s_store_sk#56, s_store_id#57, s_rec_start_date#58, s_rec_end_date#59, s_closed_date_sk#60, s_store_name#61, s_number_employees#62, s_floor_space#63, s_hours#64, s_manager#65, s_market_id#66, s_geography_class#67, s_market_desc#68, s_market_manager#69, s_division_id#70, s_division_name#71, s_company_id#72, s_company_name#73, s_street_number#74, s_street_name#75, s_street_type#76, s_suite_number#77, s_city#78, s_county#79, s_state#80, s_zip#81, s_country#82, s_gmt_offset#83, s_tax_percentage#84]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(9) ColumnarToRow [codegen id : 7]
Input [29]: [s_store_sk#56, s_store_id#57, s_rec_start_date#58, s_rec_end_date#59, s_closed_date_sk#60, s_store_name#61, s_number_employees#62, s_floor_space#63, s_hours#64, s_manager#65, s_market_id#66, s_geography_class#67, s_market_desc#68, s_market_manager#69, s_division_id#70, s_division_name#71, s_company_id#72, s_company_name#73, s_street_number#74, s_street_name#75, s_street_type#76, s_suite_number#77, s_city#78, s_county#79, s_state#80, s_zip#81, s_country#82, s_gmt_offset#83, s_tax_percentage#84]

(10) Filter [codegen id : 7]
Input [29]: [s_store_sk#56, s_store_id#57, s_rec_start_date#58, s_rec_end_date#59, s_closed_date_sk#60, s_store_name#61, s_number_employees#62, s_floor_space#63, s_hours#64, s_manager#65, s_market_id#66, s_geography_class#67, s_market_desc#68, s_market_manager#69, s_division_id#70, s_division_name#71, s_company_id#72, s_company_name#73, s_street_number#74, s_street_name#75, s_street_type#76, s_suite_number#77, s_city#78, s_county#79, s_state#80, s_zip#81, s_country#82, s_gmt_offset#83, s_tax_percentage#84]
Condition : isnotnull(s_store_sk#56)

(11) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#85, ss_item_sk#86, ss_customer_sk#87, ss_cdemo_sk#88, ss_hdemo_sk#89, ss_addr_sk#90, ss_store_sk#91, ss_promo_sk#92, ss_ticket_number#93, ss_quantity#94, ss_wholesale_cost#95, ss_list_price#96, ss_sales_price#97, ss_ext_discount_amt#98, ss_ext_sales_price#99, ss_ext_wholesale_cost#100, ss_ext_list_price#101, ss_ext_tax#102, ss_coupon_amt#103, ss_net_paid#104, ss_net_paid_inc_tax#105, ss_net_profit#106, ss_sold_date_sk#107]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#107), dynamicpruningexpression(ss_sold_date_sk#107 IN dynamicpruning#108)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(12) ColumnarToRow [codegen id : 4]
Input [23]: [ss_sold_time_sk#85, ss_item_sk#86, ss_customer_sk#87, ss_cdemo_sk#88, ss_hdemo_sk#89, ss_addr_sk#90, ss_store_sk#91, ss_promo_sk#92, ss_ticket_number#93, ss_quantity#94, ss_wholesale_cost#95, ss_list_price#96, ss_sales_price#97, ss_ext_discount_amt#98, ss_ext_sales_price#99, ss_ext_wholesale_cost#100, ss_ext_list_price#101, ss_ext_tax#102, ss_coupon_amt#103, ss_net_paid#104, ss_net_paid_inc_tax#105, ss_net_profit#106, ss_sold_date_sk#107]

(13) Filter [codegen id : 4]
Input [23]: [ss_sold_time_sk#85, ss_item_sk#86, ss_customer_sk#87, ss_cdemo_sk#88, ss_hdemo_sk#89, ss_addr_sk#90, ss_store_sk#91, ss_promo_sk#92, ss_ticket_number#93, ss_quantity#94, ss_wholesale_cost#95, ss_list_price#96, ss_sales_price#97, ss_ext_discount_amt#98, ss_ext_sales_price#99, ss_ext_wholesale_cost#100, ss_ext_list_price#101, ss_ext_tax#102, ss_coupon_amt#103, ss_net_paid#104, ss_net_paid_inc_tax#105, ss_net_profit#106, ss_sold_date_sk#107]
Condition : isnotnull(ss_store_sk#91)

(14) Scan parquet default.store
Output [29]: [s_store_sk#109, s_store_id#110, s_rec_start_date#111, s_rec_end_date#112, s_closed_date_sk#113, s_store_name#114, s_number_employees#115, s_floor_space#116, s_hours#117, s_manager#118, s_market_id#119, s_geography_class#120, s_market_desc#121, s_market_manager#122, s_division_id#123, s_division_name#124, s_company_id#125, s_company_name#126, s_street_number#127, s_street_name#128, s_street_type#129, s_suite_number#130, s_city#131, s_county#132, s_state#133, s_zip#134, s_country#135, s_gmt_offset#136, s_tax_percentage#137]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(15) ColumnarToRow [codegen id : 2]
Input [29]: [s_store_sk#109, s_store_id#110, s_rec_start_date#111, s_rec_end_date#112, s_closed_date_sk#113, s_store_name#114, s_number_employees#115, s_floor_space#116, s_hours#117, s_manager#118, s_market_id#119, s_geography_class#120, s_market_desc#121, s_market_manager#122, s_division_id#123, s_division_name#124, s_company_id#125, s_company_name#126, s_street_number#127, s_street_name#128, s_street_type#129, s_suite_number#130, s_city#131, s_county#132, s_state#133, s_zip#134, s_country#135, s_gmt_offset#136, s_tax_percentage#137]

(16) Filter [codegen id : 2]
Input [29]: [s_store_sk#109, s_store_id#110, s_rec_start_date#111, s_rec_end_date#112, s_closed_date_sk#113, s_store_name#114, s_number_employees#115, s_floor_space#116, s_hours#117, s_manager#118, s_market_id#119, s_geography_class#120, s_market_desc#121, s_market_manager#122, s_division_id#123, s_division_name#124, s_company_id#125, s_company_name#126, s_street_number#127, s_street_name#128, s_street_type#129, s_suite_number#130, s_city#131, s_county#132, s_state#133, s_zip#134, s_country#135, s_gmt_offset#136, s_tax_percentage#137]
Condition : isnotnull(s_store_sk#109)

(17) BroadcastExchange
Input [29]: [s_store_sk#109, s_store_id#110, s_rec_start_date#111, s_rec_end_date#112, s_closed_date_sk#113, s_store_name#114, s_number_employees#115, s_floor_space#116, s_hours#117, s_manager#118, s_market_id#119, s_geography_class#120, s_market_desc#121, s_market_manager#122, s_division_id#123, s_division_name#124, s_company_id#125, s_company_name#126, s_street_number#127, s_street_name#128, s_street_type#129, s_suite_number#130, s_city#131, s_county#132, s_state#133, s_zip#134, s_country#135, s_gmt_offset#136, s_tax_percentage#137]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#138]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#91]
Right keys [1]: [s_store_sk#109]
Join condition: None

(19) HashAggregate [codegen id : 4]
Input [52]: [ss_sold_time_sk#85, ss_item_sk#86, ss_customer_sk#87, ss_cdemo_sk#88, ss_hdemo_sk#89, ss_addr_sk#90, ss_store_sk#91, ss_promo_sk#92, ss_ticket_number#93, ss_quantity#94, ss_wholesale_cost#95, ss_list_price#96, ss_sales_price#97, ss_ext_discount_amt#98, ss_ext_sales_price#99, ss_ext_wholesale_cost#100, ss_ext_list_price#101, ss_ext_tax#102, ss_coupon_amt#103, ss_net_paid#104, ss_net_paid_inc_tax#105, ss_net_profit#106, ss_sold_date_sk#107, s_store_sk#109, s_store_id#110, s_rec_start_date#111, s_rec_end_date#112, s_closed_date_sk#113, s_store_name#114, s_number_employees#115, s_floor_space#116, s_hours#117, s_manager#118, s_market_id#119, s_geography_class#120, s_market_desc#121, s_market_manager#122, s_division_id#123, s_division_name#124, s_company_id#125, s_company_name#126, s_street_number#127, s_street_name#128, s_street_type#129, s_suite_number#130, s_city#131, s_county#132, s_state#133, s_zip#134, s_country#135, s_gmt_offset#136, s_tax_percentage#137]
Keys [2]: [ss_sold_date_sk#107, s_state#133]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#106))]
Aggregate Attributes [1]: [sum#139]
Results [3]: [ss_sold_date_sk#107, s_state#133, sum#140]

(20) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#107, s_state#133, sum#140 AS _pushedexpression#141]
Input [3]: [ss_sold_date_sk#107, s_state#133, sum#140]

(21) ReusedExchange [Reuses operator id: 68]
Output [1]: [d_date_sk#142]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#107]
Right keys [1]: [d_date_sk#142]
Join condition: None

(23) Project [codegen id : 4]
Output [2]: [s_state#133, _pushedexpression#143]
Input [4]: [ss_sold_date_sk#107, s_state#133, _pushedexpression#141, d_date_sk#142]

(24) HashAggregate [codegen id : 4]
Input [2]: [s_state#133, _pushedexpression#143]
Keys [1]: [s_state#133]
Functions [1]: [partial_sum(_pushedexpression#143)]
Aggregate Attributes [2]: [sum#144, isEmpty#145]
Results [3]: [s_state#133, sum#146, isEmpty#147]

(25) Exchange
Input [3]: [s_state#133, sum#146, isEmpty#147]
Arguments: hashpartitioning(s_state#133, 5), ENSURE_REQUIREMENTS, [id=#148]

(26) HashAggregate [codegen id : 5]
Input [3]: [s_state#133, sum#146, isEmpty#147]
Keys [1]: [s_state#133]
Functions [1]: [sum(_pushedexpression#143)]
Aggregate Attributes [1]: [sum(_pushedexpression#143)#149]
Results [3]: [s_state#133, s_state#133, cast(sum(_pushedexpression#143)#149 as decimal(17,2)) AS _w2#150]

(27) Sort [codegen id : 5]
Input [3]: [s_state#133, s_state#133, _w2#150]
Arguments: [s_state#133 ASC NULLS FIRST, _w2#150 DESC NULLS LAST], false, 0

(28) Window
Input [3]: [s_state#133, s_state#133, _w2#150]
Arguments: [rank(_w2#150) windowspecdefinition(s_state#133, _w2#150 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#151], [s_state#133], [_w2#150 DESC NULLS LAST]

(29) Filter [codegen id : 6]
Input [4]: [s_state#133, s_state#133, _w2#150, ranking#151]
Condition : (ranking#151 <= 5)

(30) Project [codegen id : 6]
Output [1]: [s_state#133]
Input [4]: [s_state#133, s_state#133, _w2#150, ranking#151]

(31) HashAggregate [codegen id : 6]
Input [1]: [s_state#133]
Keys [1]: [s_state#133]
Functions: []
Aggregate Attributes: []
Results [1]: [s_state#133]

(32) BroadcastExchange
Input [1]: [s_state#133]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#152]

(33) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [s_state#80]
Right keys [1]: [s_state#133]
Join condition: None

(34) HashAggregate [codegen id : 7]
Input [29]: [s_store_sk#56, s_store_id#57, s_rec_start_date#58, s_rec_end_date#59, s_closed_date_sk#60, s_store_name#61, s_number_employees#62, s_floor_space#63, s_hours#64, s_manager#65, s_market_id#66, s_geography_class#67, s_market_desc#68, s_market_manager#69, s_division_id#70, s_division_name#71, s_company_id#72, s_company_name#73, s_street_number#74, s_street_name#75, s_street_type#76, s_suite_number#77, s_city#78, s_county#79, s_state#80, s_zip#81, s_country#82, s_gmt_offset#83, s_tax_percentage#84]
Keys [3]: [s_store_sk#56, s_state#80, s_county#79]
Functions: []
Aggregate Attributes: []
Results [3]: [s_store_sk#56, s_state#80, s_county#79]

(35) BroadcastExchange
Input [3]: [s_store_sk#56, s_state#80, s_county#79]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#153]

(36) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#56]
Join condition: None

(37) Project [codegen id : 8]
Output [3]: [_pushedexpression#154, s_state#80, s_county#79]
Input [5]: [ss_store_sk#7, _pushedexpression#55, s_store_sk#56, s_state#80, s_county#79]

(38) HashAggregate [codegen id : 8]
Input [3]: [_pushedexpression#154, s_state#80, s_county#79]
Keys [2]: [s_state#80, s_county#79]
Functions [1]: [partial_sum(_pushedexpression#154)]
Aggregate Attributes [2]: [sum#155, isEmpty#156]
Results [4]: [s_state#80, s_county#79, sum#157, isEmpty#158]

(39) Exchange
Input [4]: [s_state#80, s_county#79, sum#157, isEmpty#158]
Arguments: hashpartitioning(s_state#80, s_county#79, 5), ENSURE_REQUIREMENTS, [id=#159]

(40) HashAggregate [codegen id : 9]
Input [4]: [s_state#80, s_county#79, sum#157, isEmpty#158]
Keys [2]: [s_state#80, s_county#79]
Functions [1]: [sum(_pushedexpression#154)]
Aggregate Attributes [1]: [sum(_pushedexpression#154)#160]
Results [6]: [cast(cast(sum(_pushedexpression#154)#160 as decimal(17,2)) as decimal(27,2)) AS total_sum#161, s_state#80, s_county#79, 0 AS g_state#162, 0 AS g_county#163, 0 AS lochierarchy#164]

(41) ReusedExchange [Reuses operator id: 39]
Output [4]: [s_state#80, s_county#79, sum#165, isEmpty#166]

(42) HashAggregate [codegen id : 18]
Input [4]: [s_state#80, s_county#79, sum#165, isEmpty#166]
Keys [2]: [s_state#80, s_county#79]
Functions [1]: [sum(_pushedexpression#167)]
Aggregate Attributes [1]: [sum(_pushedexpression#167)#160]
Results [2]: [cast(sum(_pushedexpression#167)#160 as decimal(17,2)) AS total_sum#168, s_state#80]

(43) HashAggregate [codegen id : 18]
Input [2]: [total_sum#168, s_state#80]
Keys [1]: [s_state#80]
Functions [1]: [partial_sum(total_sum#168)]
Aggregate Attributes [2]: [sum#169, isEmpty#170]
Results [3]: [s_state#80, sum#171, isEmpty#172]

(44) Exchange
Input [3]: [s_state#80, sum#171, isEmpty#172]
Arguments: hashpartitioning(s_state#80, 5), ENSURE_REQUIREMENTS, [id=#173]

(45) HashAggregate [codegen id : 19]
Input [3]: [s_state#80, sum#171, isEmpty#172]
Keys [1]: [s_state#80]
Functions [1]: [sum(total_sum#168)]
Aggregate Attributes [1]: [sum(total_sum#168)#174]
Results [6]: [sum(total_sum#168)#174 AS total_sum#175, s_state#80, null AS s_county#176, 0 AS g_state#177, 1 AS g_county#178, 1 AS lochierarchy#179]

(46) ReusedExchange [Reuses operator id: 39]
Output [4]: [s_state#80, s_county#79, sum#180, isEmpty#181]

(47) HashAggregate [codegen id : 28]
Input [4]: [s_state#80, s_county#79, sum#180, isEmpty#181]
Keys [2]: [s_state#80, s_county#79]
Functions [1]: [sum(_pushedexpression#182)]
Aggregate Attributes [1]: [sum(_pushedexpression#182)#160]
Results [1]: [cast(sum(_pushedexpression#182)#160 as decimal(17,2)) AS total_sum#168]

(48) HashAggregate [codegen id : 28]
Input [1]: [total_sum#168]
Keys: []
Functions [1]: [partial_sum(total_sum#168)]
Aggregate Attributes [2]: [sum#183, isEmpty#184]
Results [2]: [sum#185, isEmpty#186]

(49) Exchange
Input [2]: [sum#185, isEmpty#186]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#187]

(50) HashAggregate [codegen id : 29]
Input [2]: [sum#185, isEmpty#186]
Keys: []
Functions [1]: [sum(total_sum#168)]
Aggregate Attributes [1]: [sum(total_sum#168)#188]
Results [6]: [sum(total_sum#168)#188 AS total_sum#189, null AS s_state#190, null AS s_county#191, 1 AS g_state#192, 1 AS g_county#193, 2 AS lochierarchy#194]

(51) Union

(52) HashAggregate [codegen id : 30]
Input [6]: [total_sum#161, s_state#80, s_county#79, g_state#162, g_county#163, lochierarchy#164]
Keys [6]: [total_sum#161, s_state#80, s_county#79, g_state#162, g_county#163, lochierarchy#164]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#161, s_state#80, s_county#79, g_state#162, g_county#163, lochierarchy#164]

(53) Exchange
Input [6]: [total_sum#161, s_state#80, s_county#79, g_state#162, g_county#163, lochierarchy#164]
Arguments: hashpartitioning(total_sum#161, s_state#80, s_county#79, g_state#162, g_county#163, lochierarchy#164, 5), ENSURE_REQUIREMENTS, [id=#195]

(54) HashAggregate [codegen id : 31]
Input [6]: [total_sum#161, s_state#80, s_county#79, g_state#162, g_county#163, lochierarchy#164]
Keys [6]: [total_sum#161, s_state#80, s_county#79, g_state#162, g_county#163, lochierarchy#164]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#161, s_state#80, s_county#79, lochierarchy#164, CASE WHEN (g_county#163 = 0) THEN s_state#80 END AS _w0#196]

(55) Exchange
Input [5]: [total_sum#161, s_state#80, s_county#79, lochierarchy#164, _w0#196]
Arguments: hashpartitioning(lochierarchy#164, _w0#196, 5), ENSURE_REQUIREMENTS, [id=#197]

(56) Sort [codegen id : 32]
Input [5]: [total_sum#161, s_state#80, s_county#79, lochierarchy#164, _w0#196]
Arguments: [lochierarchy#164 ASC NULLS FIRST, _w0#196 ASC NULLS FIRST, total_sum#161 DESC NULLS LAST], false, 0

(57) Window
Input [5]: [total_sum#161, s_state#80, s_county#79, lochierarchy#164, _w0#196]
Arguments: [rank(total_sum#161) windowspecdefinition(lochierarchy#164, _w0#196, total_sum#161 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#198], [lochierarchy#164, _w0#196], [total_sum#161 DESC NULLS LAST]

(58) Project [codegen id : 33]
Output [5]: [total_sum#161, s_state#80, s_county#79, lochierarchy#164, rank_within_parent#198]
Input [6]: [total_sum#161, s_state#80, s_county#79, lochierarchy#164, _w0#196, rank_within_parent#198]

(59) TakeOrderedAndProject
Input [5]: [total_sum#161, s_state#80, s_county#79, lochierarchy#164, rank_within_parent#198]
Arguments: 100, [lochierarchy#164 DESC NULLS LAST, CASE WHEN (lochierarchy#164 = 0) THEN s_state#80 END ASC NULLS FIRST, rank_within_parent#198 ASC NULLS FIRST], [total_sum#161, s_state#80, s_county#79, lochierarchy#164, rank_within_parent#198]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#23 IN dynamicpruning#24
BroadcastExchange (63)
+- * Filter (62)
   +- * ColumnarToRow (61)
      +- Scan parquet default.date_dim (60)


(60) Scan parquet default.date_dim
Output [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(61) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]

(62) Filter [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Condition : (((isnotnull(d_month_seq#28) AND (d_month_seq#28 >= 1212)) AND (d_month_seq#28 <= 1223)) AND isnotnull(d_date_sk#25))

(63) BroadcastExchange
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#199]

Subquery:2 Hosting operator id = 11 Hosting Expression = ss_sold_date_sk#107 IN dynamicpruning#108
BroadcastExchange (68)
+- * HashAggregate (67)
   +- * Filter (66)
      +- * ColumnarToRow (65)
         +- Scan parquet default.date_dim (64)


(64) Scan parquet default.date_dim
Output [28]: [d_date_sk#142, d_date_id#200, d_date#201, d_month_seq#202, d_week_seq#203, d_quarter_seq#204, d_year#205, d_dow#206, d_moy#207, d_dom#208, d_qoy#209, d_fy_year#210, d_fy_quarter_seq#211, d_fy_week_seq#212, d_day_name#213, d_quarter_name#214, d_holiday#215, d_weekend#216, d_following_holiday#217, d_first_dom#218, d_last_dom#219, d_same_day_ly#220, d_same_day_lq#221, d_current_day#222, d_current_week#223, d_current_month#224, d_current_quarter#225, d_current_year#226]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(65) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#142, d_date_id#200, d_date#201, d_month_seq#202, d_week_seq#203, d_quarter_seq#204, d_year#205, d_dow#206, d_moy#207, d_dom#208, d_qoy#209, d_fy_year#210, d_fy_quarter_seq#211, d_fy_week_seq#212, d_day_name#213, d_quarter_name#214, d_holiday#215, d_weekend#216, d_following_holiday#217, d_first_dom#218, d_last_dom#219, d_same_day_ly#220, d_same_day_lq#221, d_current_day#222, d_current_week#223, d_current_month#224, d_current_quarter#225, d_current_year#226]

(66) Filter [codegen id : 1]
Input [28]: [d_date_sk#142, d_date_id#200, d_date#201, d_month_seq#202, d_week_seq#203, d_quarter_seq#204, d_year#205, d_dow#206, d_moy#207, d_dom#208, d_qoy#209, d_fy_year#210, d_fy_quarter_seq#211, d_fy_week_seq#212, d_day_name#213, d_quarter_name#214, d_holiday#215, d_weekend#216, d_following_holiday#217, d_first_dom#218, d_last_dom#219, d_same_day_ly#220, d_same_day_lq#221, d_current_day#222, d_current_week#223, d_current_month#224, d_current_quarter#225, d_current_year#226]
Condition : (((isnotnull(d_month_seq#202) AND (d_month_seq#202 >= 1212)) AND (d_month_seq#202 <= 1223)) AND isnotnull(d_date_sk#142))

(67) HashAggregate [codegen id : 1]
Input [28]: [d_date_sk#142, d_date_id#200, d_date#201, d_month_seq#202, d_week_seq#203, d_quarter_seq#204, d_year#205, d_dow#206, d_moy#207, d_dom#208, d_qoy#209, d_fy_year#210, d_fy_quarter_seq#211, d_fy_week_seq#212, d_day_name#213, d_quarter_name#214, d_holiday#215, d_weekend#216, d_following_holiday#217, d_first_dom#218, d_last_dom#219, d_same_day_ly#220, d_same_day_lq#221, d_current_day#222, d_current_week#223, d_current_month#224, d_current_quarter#225, d_current_year#226]
Keys [1]: [d_date_sk#142]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#142]

(68) BroadcastExchange
Input [1]: [d_date_sk#142]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#227]


