== Physical Plan ==
TakeOrderedAndProject (128)
+- * HashAggregate (127)
   +- Exchange (126)
      +- * HashAggregate (125)
         +- Union (124)
            :- * HashAggregate (103)
            :  +- Exchange (102)
            :     +- * HashAggregate (101)
            :        +- Union (100)
            :           :- * Filter (69)
            :           :  +- * HashAggregate (68)
            :           :     +- Exchange (67)
            :           :        +- * HashAggregate (66)
            :           :           +- * Project (65)
            :           :              +- * BroadcastHashJoin Inner BuildRight (64)
            :           :                 :- * Project (62)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (61)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (54)
            :           :                 :     :  :- * Filter (3)
            :           :                 :     :  :  +- * ColumnarToRow (2)
            :           :                 :     :  :     +- Scan parquet default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (53)
            :           :                 :     :     +- * HashAggregate (52)
            :           :                 :     :        +- * Project (51)
            :           :                 :     :           +- * BroadcastHashJoin Inner BuildRight (50)
            :           :                 :     :              :- * Filter (6)
            :           :                 :     :              :  +- * ColumnarToRow (5)
            :           :                 :     :              :     +- Scan parquet default.item (4)
            :           :                 :     :              +- BroadcastExchange (49)
            :           :                 :     :                 +- * BroadcastHashJoin LeftSemi BuildRight (48)
            :           :                 :     :                    :- * HashAggregate (36)
            :           :                 :     :                    :  +- Exchange (35)
            :           :                 :     :                    :     +- * HashAggregate (34)
            :           :                 :     :                    :        +- * Project (33)
            :           :                 :     :                    :           +- * BroadcastHashJoin Inner BuildRight (32)
            :           :                 :     :                    :              :- * Project (30)
            :           :                 :     :                    :              :  +- * BroadcastHashJoin Inner BuildRight (29)
            :           :                 :     :                    :              :     :- * Filter (9)
            :           :                 :     :                    :              :     :  +- * ColumnarToRow (8)
            :           :                 :     :                    :              :     :     +- Scan parquet default.store_sales (7)
            :           :                 :     :                    :              :     +- BroadcastExchange (28)
            :           :                 :     :                    :              :        +- * BroadcastHashJoin LeftSemi BuildRight (27)
            :           :                 :     :                    :              :           :- * Filter (12)
            :           :                 :     :                    :              :           :  +- * ColumnarToRow (11)
            :           :                 :     :                    :              :           :     +- Scan parquet default.item (10)
            :           :                 :     :                    :              :           +- BroadcastExchange (26)
            :           :                 :     :                    :              :              +- * HashAggregate (25)
            :           :                 :     :                    :              :                 +- * Project (24)
            :           :                 :     :                    :              :                    +- * BroadcastHashJoin Inner BuildRight (23)
            :           :                 :     :                    :              :                       :- * Project (21)
            :           :                 :     :                    :              :                       :  +- * BroadcastHashJoin Inner BuildRight (20)
            :           :                 :     :                    :              :                       :     :- * Filter (15)
            :           :                 :     :                    :              :                       :     :  +- * ColumnarToRow (14)
            :           :                 :     :                    :              :                       :     :     +- Scan parquet default.catalog_sales (13)
            :           :                 :     :                    :              :                       :     +- BroadcastExchange (19)
            :           :                 :     :                    :              :                       :        +- * Filter (18)
            :           :                 :     :                    :              :                       :           +- * ColumnarToRow (17)
            :           :                 :     :                    :              :                       :              +- Scan parquet default.item (16)
            :           :                 :     :                    :              :                       +- ReusedExchange (22)
            :           :                 :     :                    :              +- ReusedExchange (31)
            :           :                 :     :                    +- BroadcastExchange (47)
            :           :                 :     :                       +- * HashAggregate (46)
            :           :                 :     :                          +- * Project (45)
            :           :                 :     :                             +- * BroadcastHashJoin Inner BuildRight (44)
            :           :                 :     :                                :- * Project (42)
            :           :                 :     :                                :  +- * BroadcastHashJoin Inner BuildRight (41)
            :           :                 :     :                                :     :- * Filter (39)
            :           :                 :     :                                :     :  +- * ColumnarToRow (38)
            :           :                 :     :                                :     :     +- Scan parquet default.web_sales (37)
            :           :                 :     :                                :     +- ReusedExchange (40)
            :           :                 :     :                                +- ReusedExchange (43)
            :           :                 :     +- BroadcastExchange (60)
            :           :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (59)
            :           :                 :           :- * Filter (57)
            :           :                 :           :  +- * ColumnarToRow (56)
            :           :                 :           :     +- Scan parquet default.item (55)
            :           :                 :           +- ReusedExchange (58)
            :           :                 +- ReusedExchange (63)
            :           :- * Filter (84)
            :           :  +- * HashAggregate (83)
            :           :     +- Exchange (82)
            :           :        +- * HashAggregate (81)
            :           :           +- * Project (80)
            :           :              +- * BroadcastHashJoin Inner BuildRight (79)
            :           :                 :- * Project (77)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (76)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (74)
            :           :                 :     :  :- * Filter (72)
            :           :                 :     :  :  +- * ColumnarToRow (71)
            :           :                 :     :  :     +- Scan parquet default.catalog_sales (70)
            :           :                 :     :  +- ReusedExchange (73)
            :           :                 :     +- ReusedExchange (75)
            :           :                 +- ReusedExchange (78)
            :           +- * Filter (99)
            :              +- * HashAggregate (98)
            :                 +- Exchange (97)
            :                    +- * HashAggregate (96)
            :                       +- * Project (95)
            :                          +- * BroadcastHashJoin Inner BuildRight (94)
            :                             :- * Project (92)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (91)
            :                             :     :- * BroadcastHashJoin LeftSemi BuildRight (89)
            :                             :     :  :- * Filter (87)
            :                             :     :  :  +- * ColumnarToRow (86)
            :                             :     :  :     +- Scan parquet default.web_sales (85)
            :                             :     :  +- ReusedExchange (88)
            :                             :     +- ReusedExchange (90)
            :                             +- ReusedExchange (93)
            :- * HashAggregate (108)
            :  +- Exchange (107)
            :     +- * HashAggregate (106)
            :        +- * HashAggregate (105)
            :           +- ReusedExchange (104)
            :- * HashAggregate (113)
            :  +- Exchange (112)
            :     +- * HashAggregate (111)
            :        +- * HashAggregate (110)
            :           +- ReusedExchange (109)
            :- * HashAggregate (118)
            :  +- Exchange (117)
            :     +- * HashAggregate (116)
            :        +- * HashAggregate (115)
            :           +- ReusedExchange (114)
            +- * HashAggregate (123)
               +- Exchange (122)
                  +- * HashAggregate (121)
                     +- * HashAggregate (120)
                        +- ReusedExchange (119)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) Scan parquet default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(13) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(16) Scan parquet default.item
Output [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Condition : isnotnull(i_item_sk#19)

(19) BroadcastExchange
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#19]
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(22) ReusedExchange [Reuses operator id: 162]
Output [1]: [d_date_sk#24]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#24]
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Input [5]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22, d_date_sk#24]

(25) HashAggregate [codegen id : 3]
Input [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Keys [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]

(26) BroadcastExchange
Input [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#25]

(27) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#20, 0), isnull(i_brand_id#20), coalesce(i_class_id#21, 0), isnull(i_class_id#21), coalesce(i_category_id#22, 0), isnull(i_category_id#22)]
Join condition: None

(28) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join condition: None

(30) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(31) ReusedExchange [Reuses operator id: 162]
Output [1]: [d_date_sk#27]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#27]
Join condition: None

(33) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#28, i_class_id#15 AS class_id#29, i_category_id#16 AS category_id#30]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#27]

(34) HashAggregate [codegen id : 6]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(35) Exchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: hashpartitioning(brand_id#28, class_id#29, category_id#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(36) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(37) Scan parquet default.web_sales
Output [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(38) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]

(39) Filter [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Condition : isnotnull(ws_item_sk#32)

(40) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(41) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#32]
Right keys [1]: [i_item_sk#34]
Join condition: None

(42) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37]
Input [6]: [ws_item_sk#32, ws_sold_date_sk#33, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(43) ReusedExchange [Reuses operator id: 162]
Output [1]: [d_date_sk#38]

(44) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#38]
Join condition: None

(45) Project [codegen id : 9]
Output [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Input [5]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37, d_date_sk#38]

(46) HashAggregate [codegen id : 9]
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]

(47) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#39]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#28, 0), isnull(brand_id#28), coalesce(class_id#29, 0), isnull(class_id#29), coalesce(category_id#30, 0), isnull(category_id#30)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join condition: None

(49) BroadcastExchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#40]

(50) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#28, class_id#29, category_id#30]
Join condition: None

(51) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#41]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#28, class_id#29, category_id#30]

(52) HashAggregate [codegen id : 11]
Input [1]: [ss_item_sk#41]
Keys [1]: [ss_item_sk#41]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_item_sk#41]

(53) BroadcastExchange
Input [1]: [ss_item_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(54) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(55) Scan parquet default.item
Output [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(56) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]

(57) Filter [codegen id : 23]
Input [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]
Condition : isnotnull(i_item_sk#43)

(58) ReusedExchange [Reuses operator id: 53]
Output [1]: [ss_item_sk#41]

(59) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#43]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(60) BroadcastExchange
Input [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47]

(61) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#43]
Join condition: None

(62) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#44, i_class_id#45, i_category_id#46]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]

(63) ReusedExchange [Reuses operator id: 157]
Output [1]: [d_date_sk#48]

(64) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#48]
Join condition: None

(65) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#44, i_class_id#45, i_category_id#46]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#44, i_class_id#45, i_category_id#46, d_date_sk#48]

(66) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#44, i_class_id#45, i_category_id#46]
Keys [3]: [i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#49, isEmpty#50, count#51]
Results [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#52, isEmpty#53, count#54]

(67) Exchange
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#52, isEmpty#53, count#54]
Arguments: hashpartitioning(i_brand_id#44, i_class_id#45, i_category_id#46, 5), ENSURE_REQUIREMENTS, [id=#55]

(68) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#52, isEmpty#53, count#54]
Keys [3]: [i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#56, count(1)#57]
Results [6]: [store AS channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#56 AS sales#59, count(1)#57 AS number_sales#60]

(69) Filter [codegen id : 26]
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sales#59, number_sales#60]
Condition : (isnotnull(sales#59) AND (cast(sales#59 as decimal(32,6)) > cast(Subquery scalar-subquery#61, [id=#62] as decimal(32,6))))

(70) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#63, cs_quantity#64, cs_list_price#65, cs_sold_date_sk#66]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#66), dynamicpruningexpression(cs_sold_date_sk#66 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(71) ColumnarToRow [codegen id : 51]
Input [4]: [cs_item_sk#63, cs_quantity#64, cs_list_price#65, cs_sold_date_sk#66]

(72) Filter [codegen id : 51]
Input [4]: [cs_item_sk#63, cs_quantity#64, cs_list_price#65, cs_sold_date_sk#66]
Condition : isnotnull(cs_item_sk#63)

(73) ReusedExchange [Reuses operator id: 53]
Output [1]: [ss_item_sk#41]

(74) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#63]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(75) ReusedExchange [Reuses operator id: 60]
Output [4]: [i_item_sk#67, i_brand_id#68, i_class_id#69, i_category_id#70]

(76) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#63]
Right keys [1]: [i_item_sk#67]
Join condition: None

(77) Project [codegen id : 51]
Output [6]: [cs_quantity#64, cs_list_price#65, cs_sold_date_sk#66, i_brand_id#68, i_class_id#69, i_category_id#70]
Input [8]: [cs_item_sk#63, cs_quantity#64, cs_list_price#65, cs_sold_date_sk#66, i_item_sk#67, i_brand_id#68, i_class_id#69, i_category_id#70]

(78) ReusedExchange [Reuses operator id: 157]
Output [1]: [d_date_sk#71]

(79) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#66]
Right keys [1]: [d_date_sk#71]
Join condition: None

(80) Project [codegen id : 51]
Output [5]: [cs_quantity#64, cs_list_price#65, i_brand_id#68, i_class_id#69, i_category_id#70]
Input [7]: [cs_quantity#64, cs_list_price#65, cs_sold_date_sk#66, i_brand_id#68, i_class_id#69, i_category_id#70, d_date_sk#71]

(81) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#64, cs_list_price#65, i_brand_id#68, i_class_id#69, i_category_id#70]
Keys [3]: [i_brand_id#68, i_class_id#69, i_category_id#70]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cs_quantity#64 as decimal(12,2))) * promote_precision(cast(cs_list_price#65 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#72, isEmpty#73, count#74]
Results [6]: [i_brand_id#68, i_class_id#69, i_category_id#70, sum#75, isEmpty#76, count#77]

(82) Exchange
Input [6]: [i_brand_id#68, i_class_id#69, i_category_id#70, sum#75, isEmpty#76, count#77]
Arguments: hashpartitioning(i_brand_id#68, i_class_id#69, i_category_id#70, 5), ENSURE_REQUIREMENTS, [id=#78]

(83) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#68, i_class_id#69, i_category_id#70, sum#75, isEmpty#76, count#77]
Keys [3]: [i_brand_id#68, i_class_id#69, i_category_id#70]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#64 as decimal(12,2))) * promote_precision(cast(cs_list_price#65 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#64 as decimal(12,2))) * promote_precision(cast(cs_list_price#65 as decimal(12,2)))), DecimalType(18,2)))#79, count(1)#80]
Results [6]: [catalog AS channel#81, i_brand_id#68, i_class_id#69, i_category_id#70, sum(CheckOverflow((promote_precision(cast(cs_quantity#64 as decimal(12,2))) * promote_precision(cast(cs_list_price#65 as decimal(12,2)))), DecimalType(18,2)))#79 AS sales#82, count(1)#80 AS number_sales#83]

(84) Filter [codegen id : 52]
Input [6]: [channel#81, i_brand_id#68, i_class_id#69, i_category_id#70, sales#82, number_sales#83]
Condition : (isnotnull(sales#82) AND (cast(sales#82 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#61, [id=#62] as decimal(32,6))))

(85) Scan parquet default.web_sales
Output [4]: [ws_item_sk#84, ws_quantity#85, ws_list_price#86, ws_sold_date_sk#87]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#87), dynamicpruningexpression(ws_sold_date_sk#87 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(86) ColumnarToRow [codegen id : 77]
Input [4]: [ws_item_sk#84, ws_quantity#85, ws_list_price#86, ws_sold_date_sk#87]

(87) Filter [codegen id : 77]
Input [4]: [ws_item_sk#84, ws_quantity#85, ws_list_price#86, ws_sold_date_sk#87]
Condition : isnotnull(ws_item_sk#84)

(88) ReusedExchange [Reuses operator id: 53]
Output [1]: [ss_item_sk#41]

(89) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#84]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(90) ReusedExchange [Reuses operator id: 60]
Output [4]: [i_item_sk#88, i_brand_id#89, i_class_id#90, i_category_id#91]

(91) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#84]
Right keys [1]: [i_item_sk#88]
Join condition: None

(92) Project [codegen id : 77]
Output [6]: [ws_quantity#85, ws_list_price#86, ws_sold_date_sk#87, i_brand_id#89, i_class_id#90, i_category_id#91]
Input [8]: [ws_item_sk#84, ws_quantity#85, ws_list_price#86, ws_sold_date_sk#87, i_item_sk#88, i_brand_id#89, i_class_id#90, i_category_id#91]

(93) ReusedExchange [Reuses operator id: 157]
Output [1]: [d_date_sk#92]

(94) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#87]
Right keys [1]: [d_date_sk#92]
Join condition: None

(95) Project [codegen id : 77]
Output [5]: [ws_quantity#85, ws_list_price#86, i_brand_id#89, i_class_id#90, i_category_id#91]
Input [7]: [ws_quantity#85, ws_list_price#86, ws_sold_date_sk#87, i_brand_id#89, i_class_id#90, i_category_id#91, d_date_sk#92]

(96) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#85, ws_list_price#86, i_brand_id#89, i_class_id#90, i_category_id#91]
Keys [3]: [i_brand_id#89, i_class_id#90, i_category_id#91]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ws_quantity#85 as decimal(12,2))) * promote_precision(cast(ws_list_price#86 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#93, isEmpty#94, count#95]
Results [6]: [i_brand_id#89, i_class_id#90, i_category_id#91, sum#96, isEmpty#97, count#98]

(97) Exchange
Input [6]: [i_brand_id#89, i_class_id#90, i_category_id#91, sum#96, isEmpty#97, count#98]
Arguments: hashpartitioning(i_brand_id#89, i_class_id#90, i_category_id#91, 5), ENSURE_REQUIREMENTS, [id=#99]

(98) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#89, i_class_id#90, i_category_id#91, sum#96, isEmpty#97, count#98]
Keys [3]: [i_brand_id#89, i_class_id#90, i_category_id#91]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#85 as decimal(12,2))) * promote_precision(cast(ws_list_price#86 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#85 as decimal(12,2))) * promote_precision(cast(ws_list_price#86 as decimal(12,2)))), DecimalType(18,2)))#100, count(1)#101]
Results [6]: [web AS channel#102, i_brand_id#89, i_class_id#90, i_category_id#91, sum(CheckOverflow((promote_precision(cast(ws_quantity#85 as decimal(12,2))) * promote_precision(cast(ws_list_price#86 as decimal(12,2)))), DecimalType(18,2)))#100 AS sales#103, count(1)#101 AS number_sales#104]

(99) Filter [codegen id : 78]
Input [6]: [channel#102, i_brand_id#89, i_class_id#90, i_category_id#91, sales#103, number_sales#104]
Condition : (isnotnull(sales#103) AND (cast(sales#103 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#61, [id=#62] as decimal(32,6))))

(100) Union

(101) HashAggregate [codegen id : 79]
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sales#59, number_sales#60]
Keys [4]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [partial_sum(sales#59), partial_sum(number_sales#60)]
Aggregate Attributes [3]: [sum#105, isEmpty#106, sum#107]
Results [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]

(102) Exchange
Input [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]
Arguments: hashpartitioning(channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, 5), ENSURE_REQUIREMENTS, [id=#111]

(103) HashAggregate [codegen id : 80]
Input [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]
Keys [4]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(sales#59), sum(number_sales#60)]
Aggregate Attributes [2]: [sum(sales#59)#112, sum(number_sales#60)#113]
Results [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum(sales#59)#112 AS sum_sales#114, sum(number_sales#60)#113 AS number_sales#115]

(104) ReusedExchange [Reuses operator id: 102]
Output [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]

(105) HashAggregate [codegen id : 160]
Input [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]
Keys [4]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(sales#59), sum(number_sales#60)]
Aggregate Attributes [2]: [sum(sales#59)#112, sum(number_sales#60)#113]
Results [5]: [channel#58, i_brand_id#44, i_class_id#45, sum(sales#59)#112 AS sum_sales#114, sum(number_sales#60)#113 AS number_sales#115]

(106) HashAggregate [codegen id : 160]
Input [5]: [channel#58, i_brand_id#44, i_class_id#45, sum_sales#114, number_sales#115]
Keys [3]: [channel#58, i_brand_id#44, i_class_id#45]
Functions [2]: [partial_sum(sum_sales#114), partial_sum(number_sales#115)]
Aggregate Attributes [3]: [sum#116, isEmpty#117, sum#118]
Results [6]: [channel#58, i_brand_id#44, i_class_id#45, sum#119, isEmpty#120, sum#121]

(107) Exchange
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, sum#119, isEmpty#120, sum#121]
Arguments: hashpartitioning(channel#58, i_brand_id#44, i_class_id#45, 5), ENSURE_REQUIREMENTS, [id=#122]

(108) HashAggregate [codegen id : 161]
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, sum#119, isEmpty#120, sum#121]
Keys [3]: [channel#58, i_brand_id#44, i_class_id#45]
Functions [2]: [sum(sum_sales#114), sum(number_sales#115)]
Aggregate Attributes [2]: [sum(sum_sales#114)#123, sum(number_sales#115)#124]
Results [6]: [channel#58, i_brand_id#44, i_class_id#45, null AS i_category_id#125, sum(sum_sales#114)#123 AS sum(sum_sales)#126, sum(number_sales#115)#124 AS sum(number_sales)#127]

(109) ReusedExchange [Reuses operator id: 102]
Output [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]

(110) HashAggregate [codegen id : 241]
Input [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]
Keys [4]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(sales#59), sum(number_sales#60)]
Aggregate Attributes [2]: [sum(sales#59)#112, sum(number_sales#60)#113]
Results [4]: [channel#58, i_brand_id#44, sum(sales#59)#112 AS sum_sales#114, sum(number_sales#60)#113 AS number_sales#115]

(111) HashAggregate [codegen id : 241]
Input [4]: [channel#58, i_brand_id#44, sum_sales#114, number_sales#115]
Keys [2]: [channel#58, i_brand_id#44]
Functions [2]: [partial_sum(sum_sales#114), partial_sum(number_sales#115)]
Aggregate Attributes [3]: [sum#128, isEmpty#129, sum#130]
Results [5]: [channel#58, i_brand_id#44, sum#131, isEmpty#132, sum#133]

(112) Exchange
Input [5]: [channel#58, i_brand_id#44, sum#131, isEmpty#132, sum#133]
Arguments: hashpartitioning(channel#58, i_brand_id#44, 5), ENSURE_REQUIREMENTS, [id=#134]

(113) HashAggregate [codegen id : 242]
Input [5]: [channel#58, i_brand_id#44, sum#131, isEmpty#132, sum#133]
Keys [2]: [channel#58, i_brand_id#44]
Functions [2]: [sum(sum_sales#114), sum(number_sales#115)]
Aggregate Attributes [2]: [sum(sum_sales#114)#135, sum(number_sales#115)#136]
Results [6]: [channel#58, i_brand_id#44, null AS i_class_id#137, null AS i_category_id#138, sum(sum_sales#114)#135 AS sum(sum_sales)#139, sum(number_sales#115)#136 AS sum(number_sales)#140]

(114) ReusedExchange [Reuses operator id: 102]
Output [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]

(115) HashAggregate [codegen id : 322]
Input [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]
Keys [4]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(sales#59), sum(number_sales#60)]
Aggregate Attributes [2]: [sum(sales#59)#112, sum(number_sales#60)#113]
Results [3]: [channel#58, sum(sales#59)#112 AS sum_sales#114, sum(number_sales#60)#113 AS number_sales#115]

(116) HashAggregate [codegen id : 322]
Input [3]: [channel#58, sum_sales#114, number_sales#115]
Keys [1]: [channel#58]
Functions [2]: [partial_sum(sum_sales#114), partial_sum(number_sales#115)]
Aggregate Attributes [3]: [sum#141, isEmpty#142, sum#143]
Results [4]: [channel#58, sum#144, isEmpty#145, sum#146]

(117) Exchange
Input [4]: [channel#58, sum#144, isEmpty#145, sum#146]
Arguments: hashpartitioning(channel#58, 5), ENSURE_REQUIREMENTS, [id=#147]

(118) HashAggregate [codegen id : 323]
Input [4]: [channel#58, sum#144, isEmpty#145, sum#146]
Keys [1]: [channel#58]
Functions [2]: [sum(sum_sales#114), sum(number_sales#115)]
Aggregate Attributes [2]: [sum(sum_sales#114)#148, sum(number_sales#115)#149]
Results [6]: [channel#58, null AS i_brand_id#150, null AS i_class_id#151, null AS i_category_id#152, sum(sum_sales#114)#148 AS sum(sum_sales)#153, sum(number_sales#115)#149 AS sum(number_sales)#154]

(119) ReusedExchange [Reuses operator id: 102]
Output [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]

(120) HashAggregate [codegen id : 403]
Input [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]
Keys [4]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(sales#59), sum(number_sales#60)]
Aggregate Attributes [2]: [sum(sales#59)#112, sum(number_sales#60)#113]
Results [2]: [sum(sales#59)#112 AS sum_sales#114, sum(number_sales#60)#113 AS number_sales#115]

(121) HashAggregate [codegen id : 403]
Input [2]: [sum_sales#114, number_sales#115]
Keys: []
Functions [2]: [partial_sum(sum_sales#114), partial_sum(number_sales#115)]
Aggregate Attributes [3]: [sum#155, isEmpty#156, sum#157]
Results [3]: [sum#158, isEmpty#159, sum#160]

(122) Exchange
Input [3]: [sum#158, isEmpty#159, sum#160]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#161]

(123) HashAggregate [codegen id : 404]
Input [3]: [sum#158, isEmpty#159, sum#160]
Keys: []
Functions [2]: [sum(sum_sales#114), sum(number_sales#115)]
Aggregate Attributes [2]: [sum(sum_sales#114)#162, sum(number_sales#115)#163]
Results [6]: [null AS channel#164, null AS i_brand_id#165, null AS i_class_id#166, null AS i_category_id#167, sum(sum_sales#114)#162 AS sum(sum_sales)#168, sum(number_sales#115)#163 AS sum(number_sales)#169]

(124) Union

(125) HashAggregate [codegen id : 405]
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]
Keys [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]

(126) Exchange
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]
Arguments: hashpartitioning(channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115, 5), ENSURE_REQUIREMENTS, [id=#170]

(127) HashAggregate [codegen id : 406]
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]
Keys [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]

(128) TakeOrderedAndProject
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]
Arguments: 100, [channel#58 ASC NULLS FIRST, i_brand_id#44 ASC NULLS FIRST, i_class_id#45 ASC NULLS FIRST, i_category_id#46 ASC NULLS FIRST], [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]

===== Subqueries =====

Subquery:1 Hosting operator id = 69 Hosting Expression = Subquery scalar-subquery#61, [id=#62]
* HashAggregate (147)
+- Exchange (146)
   +- * HashAggregate (145)
      +- Union (144)
         :- * Project (133)
         :  +- * BroadcastHashJoin Inner BuildRight (132)
         :     :- * ColumnarToRow (130)
         :     :  +- Scan parquet default.store_sales (129)
         :     +- ReusedExchange (131)
         :- * Project (138)
         :  +- * BroadcastHashJoin Inner BuildRight (137)
         :     :- * ColumnarToRow (135)
         :     :  +- Scan parquet default.catalog_sales (134)
         :     +- ReusedExchange (136)
         +- * Project (143)
            +- * BroadcastHashJoin Inner BuildRight (142)
               :- * ColumnarToRow (140)
               :  +- Scan parquet default.web_sales (139)
               +- ReusedExchange (141)


(129) Scan parquet default.store_sales
Output [3]: [ss_quantity#171, ss_list_price#172, ss_sold_date_sk#173]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#173), dynamicpruningexpression(ss_sold_date_sk#173 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(130) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#171, ss_list_price#172, ss_sold_date_sk#173]

(131) ReusedExchange [Reuses operator id: 162]
Output [1]: [d_date_sk#174]

(132) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#173]
Right keys [1]: [d_date_sk#174]
Join condition: None

(133) Project [codegen id : 2]
Output [2]: [ss_quantity#171 AS quantity#175, ss_list_price#172 AS list_price#176]
Input [4]: [ss_quantity#171, ss_list_price#172, ss_sold_date_sk#173, d_date_sk#174]

(134) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#177, cs_list_price#178, cs_sold_date_sk#179]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#179), dynamicpruningexpression(cs_sold_date_sk#179 IN dynamicpruning#180)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(135) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#177, cs_list_price#178, cs_sold_date_sk#179]

(136) ReusedExchange [Reuses operator id: 152]
Output [1]: [d_date_sk#181]

(137) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#179]
Right keys [1]: [d_date_sk#181]
Join condition: None

(138) Project [codegen id : 4]
Output [2]: [cs_quantity#177 AS quantity#182, cs_list_price#178 AS list_price#183]
Input [4]: [cs_quantity#177, cs_list_price#178, cs_sold_date_sk#179, d_date_sk#181]

(139) Scan parquet default.web_sales
Output [3]: [ws_quantity#184, ws_list_price#185, ws_sold_date_sk#186]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#186), dynamicpruningexpression(ws_sold_date_sk#186 IN dynamicpruning#180)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(140) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#184, ws_list_price#185, ws_sold_date_sk#186]

(141) ReusedExchange [Reuses operator id: 152]
Output [1]: [d_date_sk#187]

(142) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#186]
Right keys [1]: [d_date_sk#187]
Join condition: None

(143) Project [codegen id : 6]
Output [2]: [ws_quantity#184 AS quantity#188, ws_list_price#185 AS list_price#189]
Input [4]: [ws_quantity#184, ws_list_price#185, ws_sold_date_sk#186, d_date_sk#187]

(144) Union

(145) HashAggregate [codegen id : 7]
Input [2]: [quantity#175, list_price#176]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(quantity#175 as decimal(12,2))) * promote_precision(cast(list_price#176 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#190, count#191]
Results [2]: [sum#192, count#193]

(146) Exchange
Input [2]: [sum#192, count#193]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#194]

(147) HashAggregate [codegen id : 8]
Input [2]: [sum#192, count#193]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(quantity#175 as decimal(12,2))) * promote_precision(cast(list_price#176 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(quantity#175 as decimal(12,2))) * promote_precision(cast(list_price#176 as decimal(12,2)))), DecimalType(18,2)))#195]
Results [1]: [avg(CheckOverflow((promote_precision(cast(quantity#175 as decimal(12,2))) * promote_precision(cast(list_price#176 as decimal(12,2)))), DecimalType(18,2)))#195 AS average_sales#196]

Subquery:2 Hosting operator id = 129 Hosting Expression = ss_sold_date_sk#173 IN dynamicpruning#12

Subquery:3 Hosting operator id = 134 Hosting Expression = cs_sold_date_sk#179 IN dynamicpruning#180
BroadcastExchange (152)
+- * Project (151)
   +- * Filter (150)
      +- * ColumnarToRow (149)
         +- Scan parquet default.date_dim (148)


(148) Scan parquet default.date_dim
Output [2]: [d_date_sk#181, d_year#197]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(149) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#181, d_year#197]

(150) Filter [codegen id : 1]
Input [2]: [d_date_sk#181, d_year#197]
Condition : (((isnotnull(d_year#197) AND (d_year#197 >= 1998)) AND (d_year#197 <= 2000)) AND isnotnull(d_date_sk#181))

(151) Project [codegen id : 1]
Output [1]: [d_date_sk#181]
Input [2]: [d_date_sk#181, d_year#197]

(152) BroadcastExchange
Input [1]: [d_date_sk#181]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#198]

Subquery:4 Hosting operator id = 139 Hosting Expression = ws_sold_date_sk#186 IN dynamicpruning#180

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (157)
+- * Project (156)
   +- * Filter (155)
      +- * ColumnarToRow (154)
         +- Scan parquet default.date_dim (153)


(153) Scan parquet default.date_dim
Output [3]: [d_date_sk#48, d_year#199, d_moy#200]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(154) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#48, d_year#199, d_moy#200]

(155) Filter [codegen id : 1]
Input [3]: [d_date_sk#48, d_year#199, d_moy#200]
Condition : ((((isnotnull(d_year#199) AND isnotnull(d_moy#200)) AND (d_year#199 = 2000)) AND (d_moy#200 = 11)) AND isnotnull(d_date_sk#48))

(156) Project [codegen id : 1]
Output [1]: [d_date_sk#48]
Input [3]: [d_date_sk#48, d_year#199, d_moy#200]

(157) BroadcastExchange
Input [1]: [d_date_sk#48]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#201]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (162)
+- * Project (161)
   +- * Filter (160)
      +- * ColumnarToRow (159)
         +- Scan parquet default.date_dim (158)


(158) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_year#202]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(159) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#202]

(160) Filter [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#202]
Condition : (((isnotnull(d_year#202) AND (d_year#202 >= 1999)) AND (d_year#202 <= 2001)) AND isnotnull(d_date_sk#27))

(161) Project [codegen id : 1]
Output [1]: [d_date_sk#27]
Input [2]: [d_date_sk#27, d_year#202]

(162) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#203]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 37 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#12

Subquery:9 Hosting operator id = 84 Hosting Expression = ReusedSubquery Subquery scalar-subquery#61, [id=#62]

Subquery:10 Hosting operator id = 70 Hosting Expression = cs_sold_date_sk#66 IN dynamicpruning#5

Subquery:11 Hosting operator id = 99 Hosting Expression = ReusedSubquery Subquery scalar-subquery#61, [id=#62]

Subquery:12 Hosting operator id = 85 Hosting Expression = ws_sold_date_sk#87 IN dynamicpruning#5


