== Physical Plan ==
TakeOrderedAndProject (49)
+- Union (48)
   :- * HashAggregate (27)
   :  +- * HashAggregate (26)
   :     +- * HashAggregate (25)
   :        +- Exchange (24)
   :           +- * HashAggregate (23)
   :              +- * Project (22)
   :                 +- * BroadcastHashJoin Inner BuildRight (21)
   :                    :- * Project (15)
   :                    :  +- * HashAggregate (14)
   :                    :     +- * SortMergeJoin Inner (13)
   :                    :        :- * Sort (7)
   :                    :        :  +- Exchange (6)
   :                    :        :     +- * BroadcastHashJoin Inner BuildRight (5)
   :                    :        :        :- * Filter (3)
   :                    :        :        :  +- * ColumnarToRow (2)
   :                    :        :        :     +- Scan parquet default.inventory (1)
   :                    :        :        +- ReusedExchange (4)
   :                    :        +- * Sort (12)
   :                    :           +- Exchange (11)
   :                    :              +- * Filter (10)
   :                    :                 +- * ColumnarToRow (9)
   :                    :                    +- Scan parquet default.item (8)
   :                    +- BroadcastExchange (20)
   :                       +- * HashAggregate (19)
   :                          +- * Filter (18)
   :                             +- * ColumnarToRow (17)
   :                                +- Scan parquet default.warehouse (16)
   :- * HashAggregate (32)
   :  +- Exchange (31)
   :     +- * HashAggregate (30)
   :        +- * HashAggregate (29)
   :           +- ReusedExchange (28)
   :- * HashAggregate (37)
   :  +- Exchange (36)
   :     +- * HashAggregate (35)
   :        +- * HashAggregate (34)
   :           +- ReusedExchange (33)
   :- * HashAggregate (42)
   :  +- Exchange (41)
   :     +- * HashAggregate (40)
   :        +- * HashAggregate (39)
   :           +- ReusedExchange (38)
   +- * HashAggregate (47)
      +- Exchange (46)
         +- * HashAggregate (45)
            +- * HashAggregate (44)
               +- ReusedExchange (43)


(1) Scan parquet default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4), dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(inv_warehouse_sk), IsNotNull(inv_item_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_warehouse_sk#2) AND isnotnull(inv_item_sk#1))

(4) ReusedExchange [Reuses operator id: 53]
Output [28]: [d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(6) Exchange
Input [32]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33]
Arguments: hashpartitioning(inv_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#34]

(7) Sort [codegen id : 3]
Input [32]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33]
Arguments: [inv_item_sk#1 ASC NULLS FIRST], false, 0

(8) Scan parquet default.item
Output [22]: [i_item_sk#35, i_item_id#36, i_rec_start_date#37, i_rec_end_date#38, i_item_desc#39, i_current_price#40, i_wholesale_cost#41, i_brand_id#42, i_brand#43, i_class_id#44, i_class#45, i_category_id#46, i_category#47, i_manufact_id#48, i_manufact#49, i_size#50, i_formulation#51, i_color#52, i_units#53, i_container#54, i_manager_id#55, i_product_name#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(9) ColumnarToRow [codegen id : 4]
Input [22]: [i_item_sk#35, i_item_id#36, i_rec_start_date#37, i_rec_end_date#38, i_item_desc#39, i_current_price#40, i_wholesale_cost#41, i_brand_id#42, i_brand#43, i_class_id#44, i_class#45, i_category_id#46, i_category#47, i_manufact_id#48, i_manufact#49, i_size#50, i_formulation#51, i_color#52, i_units#53, i_container#54, i_manager_id#55, i_product_name#56]

(10) Filter [codegen id : 4]
Input [22]: [i_item_sk#35, i_item_id#36, i_rec_start_date#37, i_rec_end_date#38, i_item_desc#39, i_current_price#40, i_wholesale_cost#41, i_brand_id#42, i_brand#43, i_class_id#44, i_class#45, i_category_id#46, i_category#47, i_manufact_id#48, i_manufact#49, i_size#50, i_formulation#51, i_color#52, i_units#53, i_container#54, i_manager_id#55, i_product_name#56]
Condition : isnotnull(i_item_sk#35)

(11) Exchange
Input [22]: [i_item_sk#35, i_item_id#36, i_rec_start_date#37, i_rec_end_date#38, i_item_desc#39, i_current_price#40, i_wholesale_cost#41, i_brand_id#42, i_brand#43, i_class_id#44, i_class#45, i_category_id#46, i_category#47, i_manufact_id#48, i_manufact#49, i_size#50, i_formulation#51, i_color#52, i_units#53, i_container#54, i_manager_id#55, i_product_name#56]
Arguments: hashpartitioning(i_item_sk#35, 5), ENSURE_REQUIREMENTS, [id=#57]

(12) Sort [codegen id : 5]
Input [22]: [i_item_sk#35, i_item_id#36, i_rec_start_date#37, i_rec_end_date#38, i_item_desc#39, i_current_price#40, i_wholesale_cost#41, i_brand_id#42, i_brand#43, i_class_id#44, i_class#45, i_category_id#46, i_category#47, i_manufact_id#48, i_manufact#49, i_size#50, i_formulation#51, i_color#52, i_units#53, i_container#54, i_manager_id#55, i_product_name#56]
Arguments: [i_item_sk#35 ASC NULLS FIRST], false, 0

(13) SortMergeJoin [codegen id : 7]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#35]
Join condition: None

(14) HashAggregate [codegen id : 7]
Input [54]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33, i_item_sk#35, i_item_id#36, i_rec_start_date#37, i_rec_end_date#38, i_item_desc#39, i_current_price#40, i_wholesale_cost#41, i_brand_id#42, i_brand#43, i_class_id#44, i_class#45, i_category_id#46, i_category#47, i_manufact_id#48, i_manufact#49, i_size#50, i_formulation#51, i_color#52, i_units#53, i_container#54, i_manager_id#55, i_product_name#56]
Keys [5]: [inv_warehouse_sk#2, i_product_name#56, i_brand#43, i_class#45, i_category#47]
Functions [1]: [partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [sum#58, count#59]
Results [7]: [inv_warehouse_sk#2, i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#60, count#61]

(15) Project [codegen id : 7]
Output [6]: [inv_warehouse_sk#2, i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#60 AS _pushedexpression#62]
Input [7]: [inv_warehouse_sk#2, i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#60, count#61]

(16) Scan parquet default.warehouse
Output [14]: [w_warehouse_sk#63, w_warehouse_id#64, w_warehouse_name#65, w_warehouse_sq_ft#66, w_street_number#67, w_street_name#68, w_street_type#69, w_suite_number#70, w_city#71, w_county#72, w_state#73, w_zip#74, w_country#75, w_gmt_offset#76]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_id:string,w_warehouse_name:string,w_warehouse_sq_ft:int,w_street_number:string,w_street_name:string,w_street_type:string,w_suite_number:string,w_city:string,w_county:string,w_state:string,w_zip:string,w_country:string,w_gmt_offset:decimal(5,2)>

(17) ColumnarToRow [codegen id : 6]
Input [14]: [w_warehouse_sk#63, w_warehouse_id#64, w_warehouse_name#65, w_warehouse_sq_ft#66, w_street_number#67, w_street_name#68, w_street_type#69, w_suite_number#70, w_city#71, w_county#72, w_state#73, w_zip#74, w_country#75, w_gmt_offset#76]

(18) Filter [codegen id : 6]
Input [14]: [w_warehouse_sk#63, w_warehouse_id#64, w_warehouse_name#65, w_warehouse_sq_ft#66, w_street_number#67, w_street_name#68, w_street_type#69, w_suite_number#70, w_city#71, w_county#72, w_state#73, w_zip#74, w_country#75, w_gmt_offset#76]
Condition : isnotnull(w_warehouse_sk#63)

(19) HashAggregate [codegen id : 6]
Input [14]: [w_warehouse_sk#63, w_warehouse_id#64, w_warehouse_name#65, w_warehouse_sq_ft#66, w_street_number#67, w_street_name#68, w_street_type#69, w_suite_number#70, w_city#71, w_county#72, w_state#73, w_zip#74, w_country#75, w_gmt_offset#76]
Keys [1]: [w_warehouse_sk#63]
Functions: []
Aggregate Attributes: []
Results [1]: [w_warehouse_sk#63]

(20) BroadcastExchange
Input [1]: [w_warehouse_sk#63]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#77]

(21) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#63]
Join condition: None

(22) Project [codegen id : 7]
Output [5]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, _pushedexpression#62]
Input [7]: [inv_warehouse_sk#2, i_product_name#56, i_brand#43, i_class#45, i_category#47, _pushedexpression#62, w_warehouse_sk#63]

(23) HashAggregate [codegen id : 7]
Input [5]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, _pushedexpression#62]
Keys [4]: [i_product_name#56, i_brand#43, i_class#45, i_category#47]
Functions [1]: [partial_avg(_pushedexpression#62)]
Aggregate Attributes [2]: [sum#78, count#79]
Results [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#80, count#81]

(24) Exchange
Input [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#80, count#81]
Arguments: hashpartitioning(i_product_name#56, i_brand#43, i_class#45, i_category#47, 5), ENSURE_REQUIREMENTS, [id=#82]

(25) HashAggregate [codegen id : 8]
Input [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#80, count#81]
Keys [4]: [i_product_name#56, i_brand#43, i_class#45, i_category#47]
Functions [1]: [avg(_pushedexpression#62)]
Aggregate Attributes [1]: [avg(_pushedexpression#62)#83]
Results [5]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, avg(_pushedexpression#62)#83 AS qoh#84]

(26) HashAggregate [codegen id : 8]
Input [5]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, qoh#84]
Keys [4]: [i_product_name#56, i_brand#43, i_class#45, i_category#47]
Functions [1]: [partial_avg(qoh#84)]
Aggregate Attributes [2]: [sum#85, count#86]
Results [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#87, count#88]

(27) HashAggregate [codegen id : 8]
Input [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#87, count#88]
Keys [4]: [i_product_name#56, i_brand#43, i_class#45, i_category#47]
Functions [1]: [avg(qoh#84)]
Aggregate Attributes [1]: [avg(qoh#84)#89]
Results [5]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, avg(qoh#84)#89 AS qoh#90]

(28) ReusedExchange [Reuses operator id: 24]
Output [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#91, count#92]

(29) HashAggregate [codegen id : 16]
Input [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#91, count#92]
Keys [4]: [i_product_name#56, i_brand#43, i_class#45, i_category#47]
Functions [1]: [avg(_pushedexpression#93)]
Aggregate Attributes [1]: [avg(_pushedexpression#93)#83]
Results [4]: [i_product_name#56, i_brand#43, i_class#45, avg(_pushedexpression#93)#83 AS qoh#84]

(30) HashAggregate [codegen id : 16]
Input [4]: [i_product_name#56, i_brand#43, i_class#45, qoh#84]
Keys [3]: [i_product_name#56, i_brand#43, i_class#45]
Functions [1]: [partial_avg(qoh#84)]
Aggregate Attributes [2]: [sum#94, count#95]
Results [5]: [i_product_name#56, i_brand#43, i_class#45, sum#96, count#97]

(31) Exchange
Input [5]: [i_product_name#56, i_brand#43, i_class#45, sum#96, count#97]
Arguments: hashpartitioning(i_product_name#56, i_brand#43, i_class#45, 5), ENSURE_REQUIREMENTS, [id=#98]

(32) HashAggregate [codegen id : 17]
Input [5]: [i_product_name#56, i_brand#43, i_class#45, sum#96, count#97]
Keys [3]: [i_product_name#56, i_brand#43, i_class#45]
Functions [1]: [avg(qoh#84)]
Aggregate Attributes [1]: [avg(qoh#84)#99]
Results [5]: [i_product_name#56, i_brand#43, i_class#45, null AS i_category#100, avg(qoh#84)#99 AS qoh#101]

(33) ReusedExchange [Reuses operator id: 24]
Output [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#102, count#103]

(34) HashAggregate [codegen id : 25]
Input [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#102, count#103]
Keys [4]: [i_product_name#56, i_brand#43, i_class#45, i_category#47]
Functions [1]: [avg(_pushedexpression#104)]
Aggregate Attributes [1]: [avg(_pushedexpression#104)#83]
Results [3]: [i_product_name#56, i_brand#43, avg(_pushedexpression#104)#83 AS qoh#84]

(35) HashAggregate [codegen id : 25]
Input [3]: [i_product_name#56, i_brand#43, qoh#84]
Keys [2]: [i_product_name#56, i_brand#43]
Functions [1]: [partial_avg(qoh#84)]
Aggregate Attributes [2]: [sum#105, count#106]
Results [4]: [i_product_name#56, i_brand#43, sum#107, count#108]

(36) Exchange
Input [4]: [i_product_name#56, i_brand#43, sum#107, count#108]
Arguments: hashpartitioning(i_product_name#56, i_brand#43, 5), ENSURE_REQUIREMENTS, [id=#109]

(37) HashAggregate [codegen id : 26]
Input [4]: [i_product_name#56, i_brand#43, sum#107, count#108]
Keys [2]: [i_product_name#56, i_brand#43]
Functions [1]: [avg(qoh#84)]
Aggregate Attributes [1]: [avg(qoh#84)#110]
Results [5]: [i_product_name#56, i_brand#43, null AS i_class#111, null AS i_category#112, avg(qoh#84)#110 AS qoh#113]

(38) ReusedExchange [Reuses operator id: 24]
Output [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#114, count#115]

(39) HashAggregate [codegen id : 34]
Input [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#114, count#115]
Keys [4]: [i_product_name#56, i_brand#43, i_class#45, i_category#47]
Functions [1]: [avg(_pushedexpression#116)]
Aggregate Attributes [1]: [avg(_pushedexpression#116)#83]
Results [2]: [i_product_name#56, avg(_pushedexpression#116)#83 AS qoh#84]

(40) HashAggregate [codegen id : 34]
Input [2]: [i_product_name#56, qoh#84]
Keys [1]: [i_product_name#56]
Functions [1]: [partial_avg(qoh#84)]
Aggregate Attributes [2]: [sum#117, count#118]
Results [3]: [i_product_name#56, sum#119, count#120]

(41) Exchange
Input [3]: [i_product_name#56, sum#119, count#120]
Arguments: hashpartitioning(i_product_name#56, 5), ENSURE_REQUIREMENTS, [id=#121]

(42) HashAggregate [codegen id : 35]
Input [3]: [i_product_name#56, sum#119, count#120]
Keys [1]: [i_product_name#56]
Functions [1]: [avg(qoh#84)]
Aggregate Attributes [1]: [avg(qoh#84)#122]
Results [5]: [i_product_name#56, null AS i_brand#123, null AS i_class#124, null AS i_category#125, avg(qoh#84)#122 AS qoh#126]

(43) ReusedExchange [Reuses operator id: 24]
Output [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#127, count#128]

(44) HashAggregate [codegen id : 43]
Input [6]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, sum#127, count#128]
Keys [4]: [i_product_name#56, i_brand#43, i_class#45, i_category#47]
Functions [1]: [avg(_pushedexpression#129)]
Aggregate Attributes [1]: [avg(_pushedexpression#129)#83]
Results [1]: [avg(_pushedexpression#129)#83 AS qoh#84]

(45) HashAggregate [codegen id : 43]
Input [1]: [qoh#84]
Keys: []
Functions [1]: [partial_avg(qoh#84)]
Aggregate Attributes [2]: [sum#130, count#131]
Results [2]: [sum#132, count#133]

(46) Exchange
Input [2]: [sum#132, count#133]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#134]

(47) HashAggregate [codegen id : 44]
Input [2]: [sum#132, count#133]
Keys: []
Functions [1]: [avg(qoh#84)]
Aggregate Attributes [1]: [avg(qoh#84)#135]
Results [5]: [null AS i_product_name#136, null AS i_brand#137, null AS i_class#138, null AS i_category#139, avg(qoh#84)#135 AS qoh#140]

(48) Union

(49) TakeOrderedAndProject
Input [5]: [i_product_name#56, i_brand#43, i_class#45, i_category#47, qoh#90]
Arguments: 100, [qoh#90 ASC NULLS FIRST, i_product_name#56 ASC NULLS FIRST, i_brand#43 ASC NULLS FIRST, i_class#45 ASC NULLS FIRST, i_category#47 ASC NULLS FIRST], [i_product_name#56, i_brand#43, i_class#45, i_category#47, qoh#90]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#4 IN dynamicpruning#5
BroadcastExchange (53)
+- * Filter (52)
   +- * ColumnarToRow (51)
      +- Scan parquet default.date_dim (50)


(50) Scan parquet default.date_dim
Output [28]: [d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(51) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33]

(52) Filter [codegen id : 1]
Input [28]: [d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33]
Condition : (((isnotnull(d_month_seq#9) AND (d_month_seq#9 >= 1212)) AND (d_month_seq#9 <= 1223)) AND isnotnull(d_date_sk#6))

(53) BroadcastExchange
Input [28]: [d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#141]


