== Physical Plan ==
TakeOrderedAndProject (108)
+- * HashAggregate (107)
   +- Exchange (106)
      +- * HashAggregate (105)
         +- Union (104)
            :- * HashAggregate (93)
            :  +- Exchange (92)
            :     +- * HashAggregate (91)
            :        +- Union (90)
            :           :- * HashAggregate (29)
            :           :  +- Exchange (28)
            :           :     +- * HashAggregate (27)
            :           :        +- * Project (26)
            :           :           +- * BroadcastHashJoin Inner BuildRight (25)
            :           :              :- * Project (19)
            :           :              :  +- * HashAggregate (18)
            :           :              :     +- * SortMergeJoin Inner (17)
            :           :              :        :- * Sort (11)
            :           :              :        :  +- Exchange (10)
            :           :              :        :     +- Union (9)
            :           :              :        :        :- * Project (4)
            :           :              :        :        :  +- * Filter (3)
            :           :              :        :        :     +- * ColumnarToRow (2)
            :           :              :        :        :        +- Scan parquet default.store_sales (1)
            :           :              :        :        +- * Project (8)
            :           :              :        :           +- * Filter (7)
            :           :              :        :              +- * ColumnarToRow (6)
            :           :              :        :                 +- Scan parquet default.store_returns (5)
            :           :              :        +- * Sort (16)
            :           :              :           +- Exchange (15)
            :           :              :              +- * Filter (14)
            :           :              :                 +- * ColumnarToRow (13)
            :           :              :                    +- Scan parquet default.date_dim (12)
            :           :              +- BroadcastExchange (24)
            :           :                 +- * HashAggregate (23)
            :           :                    +- * Filter (22)
            :           :                       +- * ColumnarToRow (21)
            :           :                          +- Scan parquet default.store (20)
            :           :- * HashAggregate (55)
            :           :  +- Exchange (54)
            :           :     +- * HashAggregate (53)
            :           :        +- * Project (52)
            :           :           +- * BroadcastHashJoin Inner BuildRight (51)
            :           :              :- * Project (45)
            :           :              :  +- * HashAggregate (44)
            :           :              :     +- * SortMergeJoin Inner (43)
            :           :              :        :- * Sort (40)
            :           :              :        :  +- Exchange (39)
            :           :              :        :     +- Union (38)
            :           :              :        :        :- * Project (33)
            :           :              :        :        :  +- * Filter (32)
            :           :              :        :        :     +- * ColumnarToRow (31)
            :           :              :        :        :        +- Scan parquet default.catalog_sales (30)
            :           :              :        :        +- * Project (37)
            :           :              :        :           +- * Filter (36)
            :           :              :        :              +- * ColumnarToRow (35)
            :           :              :        :                 +- Scan parquet default.catalog_returns (34)
            :           :              :        +- * Sort (42)
            :           :              :           +- ReusedExchange (41)
            :           :              +- BroadcastExchange (50)
            :           :                 +- * HashAggregate (49)
            :           :                    +- * Filter (48)
            :           :                       +- * ColumnarToRow (47)
            :           :                          +- Scan parquet default.catalog_page (46)
            :           +- * HashAggregate (89)
            :              +- Exchange (88)
            :                 +- * HashAggregate (87)
            :                    +- * Project (86)
            :                       +- * BroadcastHashJoin Inner BuildRight (85)
            :                          :- * Project (79)
            :                          :  +- * HashAggregate (78)
            :                          :     +- * SortMergeJoin Inner (77)
            :                          :        :- * Sort (74)
            :                          :        :  +- Exchange (73)
            :                          :        :     +- Union (72)
            :                          :        :        :- * Project (59)
            :                          :        :        :  +- * Filter (58)
            :                          :        :        :     +- * ColumnarToRow (57)
            :                          :        :        :        +- Scan parquet default.web_sales (56)
            :                          :        :        +- * Project (71)
            :                          :        :           +- * SortMergeJoin Inner (70)
            :                          :        :              :- * Sort (63)
            :                          :        :              :  +- Exchange (62)
            :                          :        :              :     +- * ColumnarToRow (61)
            :                          :        :              :        +- Scan parquet default.web_returns (60)
            :                          :        :              +- * Sort (69)
            :                          :        :                 +- Exchange (68)
            :                          :        :                    +- * Project (67)
            :                          :        :                       +- * Filter (66)
            :                          :        :                          +- * ColumnarToRow (65)
            :                          :        :                             +- Scan parquet default.web_sales (64)
            :                          :        +- * Sort (76)
            :                          :           +- ReusedExchange (75)
            :                          +- BroadcastExchange (84)
            :                             +- * HashAggregate (83)
            :                                +- * Filter (82)
            :                                   +- * ColumnarToRow (81)
            :                                      +- Scan parquet default.web_site (80)
            :- * HashAggregate (98)
            :  +- Exchange (97)
            :     +- * HashAggregate (96)
            :        +- * HashAggregate (95)
            :           +- ReusedExchange (94)
            +- * HashAggregate (103)
               +- Exchange (102)
                  +- * HashAggregate (101)
                     +- * HashAggregate (100)
                        +- ReusedExchange (99)


(1) Scan parquet default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(4) Project [codegen id : 1]
Output [6]: [ss_store_sk#1 AS store_sk#5, ss_sold_date_sk#4 AS date_sk#6, ss_ext_sales_price#2 AS sales_price#7, ss_net_profit#3 AS profit#8, 0.00 AS return_amt#9, 0.00 AS net_loss#10]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(5) Scan parquet default.store_returns
Output [4]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#14), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) ColumnarToRow [codegen id : 2]
Input [4]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]

(7) Filter [codegen id : 2]
Input [4]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Condition : isnotnull(sr_store_sk#11)

(8) Project [codegen id : 2]
Output [6]: [sr_store_sk#11 AS store_sk#15, sr_returned_date_sk#14 AS date_sk#16, 0.00 AS sales_price#17, 0.00 AS profit#18, sr_return_amt#12 AS return_amt#19, sr_net_loss#13 AS net_loss#20]
Input [4]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]

(9) Union

(10) Exchange
Input [6]: [store_sk#5, date_sk#6, sales_price#7, profit#8, return_amt#9, net_loss#10]
Arguments: hashpartitioning(date_sk#6, 5), ENSURE_REQUIREMENTS, [id=#21]

(11) Sort [codegen id : 3]
Input [6]: [store_sk#5, date_sk#6, sales_price#7, profit#8, return_amt#9, net_loss#10]
Arguments: [date_sk#6 ASC NULLS FIRST], false, 0

(12) Scan parquet default.date_dim
Output [28]: [d_date_sk#22, d_date_id#23, d_date#24, d_month_seq#25, d_week_seq#26, d_quarter_seq#27, d_year#28, d_dow#29, d_moy#30, d_dom#31, d_qoy#32, d_fy_year#33, d_fy_quarter_seq#34, d_fy_week_seq#35, d_day_name#36, d_quarter_name#37, d_holiday#38, d_weekend#39, d_following_holiday#40, d_first_dom#41, d_last_dom#42, d_same_day_ly#43, d_same_day_lq#44, d_current_day#45, d_current_week#46, d_current_month#47, d_current_quarter#48, d_current_year#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(13) ColumnarToRow [codegen id : 4]
Input [28]: [d_date_sk#22, d_date_id#23, d_date#24, d_month_seq#25, d_week_seq#26, d_quarter_seq#27, d_year#28, d_dow#29, d_moy#30, d_dom#31, d_qoy#32, d_fy_year#33, d_fy_quarter_seq#34, d_fy_week_seq#35, d_day_name#36, d_quarter_name#37, d_holiday#38, d_weekend#39, d_following_holiday#40, d_first_dom#41, d_last_dom#42, d_same_day_ly#43, d_same_day_lq#44, d_current_day#45, d_current_week#46, d_current_month#47, d_current_quarter#48, d_current_year#49]

(14) Filter [codegen id : 4]
Input [28]: [d_date_sk#22, d_date_id#23, d_date#24, d_month_seq#25, d_week_seq#26, d_quarter_seq#27, d_year#28, d_dow#29, d_moy#30, d_dom#31, d_qoy#32, d_fy_year#33, d_fy_quarter_seq#34, d_fy_week_seq#35, d_day_name#36, d_quarter_name#37, d_holiday#38, d_weekend#39, d_following_holiday#40, d_first_dom#41, d_last_dom#42, d_same_day_ly#43, d_same_day_lq#44, d_current_day#45, d_current_week#46, d_current_month#47, d_current_quarter#48, d_current_year#49]
Condition : (((isnotnull(d_date#24) AND (d_date#24 >= 1998-08-04)) AND (d_date#24 <= 1998-08-18)) AND isnotnull(d_date_sk#22))

(15) Exchange
Input [28]: [d_date_sk#22, d_date_id#23, d_date#24, d_month_seq#25, d_week_seq#26, d_quarter_seq#27, d_year#28, d_dow#29, d_moy#30, d_dom#31, d_qoy#32, d_fy_year#33, d_fy_quarter_seq#34, d_fy_week_seq#35, d_day_name#36, d_quarter_name#37, d_holiday#38, d_weekend#39, d_following_holiday#40, d_first_dom#41, d_last_dom#42, d_same_day_ly#43, d_same_day_lq#44, d_current_day#45, d_current_week#46, d_current_month#47, d_current_quarter#48, d_current_year#49]
Arguments: hashpartitioning(d_date_sk#22, 5), ENSURE_REQUIREMENTS, [id=#50]

(16) Sort [codegen id : 5]
Input [28]: [d_date_sk#22, d_date_id#23, d_date#24, d_month_seq#25, d_week_seq#26, d_quarter_seq#27, d_year#28, d_dow#29, d_moy#30, d_dom#31, d_qoy#32, d_fy_year#33, d_fy_quarter_seq#34, d_fy_week_seq#35, d_day_name#36, d_quarter_name#37, d_holiday#38, d_weekend#39, d_following_holiday#40, d_first_dom#41, d_last_dom#42, d_same_day_ly#43, d_same_day_lq#44, d_current_day#45, d_current_week#46, d_current_month#47, d_current_quarter#48, d_current_year#49]
Arguments: [d_date_sk#22 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 7]
Left keys [1]: [date_sk#6]
Right keys [1]: [d_date_sk#22]
Join condition: None

(18) HashAggregate [codegen id : 7]
Input [34]: [store_sk#5, date_sk#6, sales_price#7, profit#8, return_amt#9, net_loss#10, d_date_sk#22, d_date_id#23, d_date#24, d_month_seq#25, d_week_seq#26, d_quarter_seq#27, d_year#28, d_dow#29, d_moy#30, d_dom#31, d_qoy#32, d_fy_year#33, d_fy_quarter_seq#34, d_fy_week_seq#35, d_day_name#36, d_quarter_name#37, d_holiday#38, d_weekend#39, d_following_holiday#40, d_first_dom#41, d_last_dom#42, d_same_day_ly#43, d_same_day_lq#44, d_current_day#45, d_current_week#46, d_current_month#47, d_current_quarter#48, d_current_year#49]
Keys [1]: [store_sk#5]
Functions [4]: [partial_sum(UnscaledValue(sales_price#7)), partial_sum(UnscaledValue(profit#8)), partial_sum(UnscaledValue(return_amt#9)), partial_sum(UnscaledValue(net_loss#10))]
Aggregate Attributes [4]: [sum#51, sum#52, sum#53, sum#54]
Results [5]: [store_sk#5, sum#55, sum#56, sum#57, sum#58]

(19) Project [codegen id : 7]
Output [5]: [store_sk#5, sum#55 AS _pushedexpression#59, sum#56 AS _pushedexpression#60, sum#57 AS _pushedexpression#61, sum#58 AS _pushedexpression#62]
Input [5]: [store_sk#5, sum#55, sum#56, sum#57, sum#58]

(20) Scan parquet default.store
Output [29]: [s_store_sk#63, s_store_id#64, s_rec_start_date#65, s_rec_end_date#66, s_closed_date_sk#67, s_store_name#68, s_number_employees#69, s_floor_space#70, s_hours#71, s_manager#72, s_market_id#73, s_geography_class#74, s_market_desc#75, s_market_manager#76, s_division_id#77, s_division_name#78, s_company_id#79, s_company_name#80, s_street_number#81, s_street_name#82, s_street_type#83, s_suite_number#84, s_city#85, s_county#86, s_state#87, s_zip#88, s_country#89, s_gmt_offset#90, s_tax_percentage#91]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(21) ColumnarToRow [codegen id : 6]
Input [29]: [s_store_sk#63, s_store_id#64, s_rec_start_date#65, s_rec_end_date#66, s_closed_date_sk#67, s_store_name#68, s_number_employees#69, s_floor_space#70, s_hours#71, s_manager#72, s_market_id#73, s_geography_class#74, s_market_desc#75, s_market_manager#76, s_division_id#77, s_division_name#78, s_company_id#79, s_company_name#80, s_street_number#81, s_street_name#82, s_street_type#83, s_suite_number#84, s_city#85, s_county#86, s_state#87, s_zip#88, s_country#89, s_gmt_offset#90, s_tax_percentage#91]

(22) Filter [codegen id : 6]
Input [29]: [s_store_sk#63, s_store_id#64, s_rec_start_date#65, s_rec_end_date#66, s_closed_date_sk#67, s_store_name#68, s_number_employees#69, s_floor_space#70, s_hours#71, s_manager#72, s_market_id#73, s_geography_class#74, s_market_desc#75, s_market_manager#76, s_division_id#77, s_division_name#78, s_company_id#79, s_company_name#80, s_street_number#81, s_street_name#82, s_street_type#83, s_suite_number#84, s_city#85, s_county#86, s_state#87, s_zip#88, s_country#89, s_gmt_offset#90, s_tax_percentage#91]
Condition : isnotnull(s_store_sk#63)

(23) HashAggregate [codegen id : 6]
Input [29]: [s_store_sk#63, s_store_id#64, s_rec_start_date#65, s_rec_end_date#66, s_closed_date_sk#67, s_store_name#68, s_number_employees#69, s_floor_space#70, s_hours#71, s_manager#72, s_market_id#73, s_geography_class#74, s_market_desc#75, s_market_manager#76, s_division_id#77, s_division_name#78, s_company_id#79, s_company_name#80, s_street_number#81, s_street_name#82, s_street_type#83, s_suite_number#84, s_city#85, s_county#86, s_state#87, s_zip#88, s_country#89, s_gmt_offset#90, s_tax_percentage#91]
Keys [2]: [s_store_sk#63, s_store_id#64]
Functions: []
Aggregate Attributes: []
Results [2]: [s_store_sk#63, s_store_id#64]

(24) BroadcastExchange
Input [2]: [s_store_sk#63, s_store_id#64]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#92]

(25) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [store_sk#5]
Right keys [1]: [s_store_sk#63]
Join condition: None

(26) Project [codegen id : 7]
Output [5]: [_pushedexpression#93, _pushedexpression#94, _pushedexpression#95, _pushedexpression#96, s_store_id#64]
Input [7]: [store_sk#5, _pushedexpression#59, _pushedexpression#60, _pushedexpression#61, _pushedexpression#62, s_store_sk#63, s_store_id#64]

(27) HashAggregate [codegen id : 7]
Input [5]: [_pushedexpression#93, _pushedexpression#94, _pushedexpression#95, _pushedexpression#96, s_store_id#64]
Keys [1]: [s_store_id#64]
Functions [4]: [partial_sum(_pushedexpression#93), partial_sum(_pushedexpression#95), partial_sum(_pushedexpression#94), partial_sum(_pushedexpression#96)]
Aggregate Attributes [8]: [sum#97, isEmpty#98, sum#99, isEmpty#100, sum#101, isEmpty#102, sum#103, isEmpty#104]
Results [9]: [s_store_id#64, sum#105, isEmpty#106, sum#107, isEmpty#108, sum#109, isEmpty#110, sum#111, isEmpty#112]

(28) Exchange
Input [9]: [s_store_id#64, sum#105, isEmpty#106, sum#107, isEmpty#108, sum#109, isEmpty#110, sum#111, isEmpty#112]
Arguments: hashpartitioning(s_store_id#64, 5), ENSURE_REQUIREMENTS, [id=#113]

(29) HashAggregate [codegen id : 8]
Input [9]: [s_store_id#64, sum#105, isEmpty#106, sum#107, isEmpty#108, sum#109, isEmpty#110, sum#111, isEmpty#112]
Keys [1]: [s_store_id#64]
Functions [4]: [sum(_pushedexpression#93), sum(_pushedexpression#95), sum(_pushedexpression#94), sum(_pushedexpression#96)]
Aggregate Attributes [4]: [sum(_pushedexpression#93)#114, sum(_pushedexpression#95)#115, sum(_pushedexpression#94)#116, sum(_pushedexpression#96)#117]
Results [5]: [store channel AS channel#118, concat(store, s_store_id#64) AS id#119, cast(sum(_pushedexpression#93)#114 as decimal(17,2)) AS sales#120, cast(sum(_pushedexpression#95)#115 as decimal(17,2)) AS returns#121, CheckOverflow((promote_precision(cast(cast(sum(_pushedexpression#94)#116 as decimal(17,2)) as decimal(18,2))) - promote_precision(cast(cast(sum(_pushedexpression#96)#117 as decimal(17,2)) as decimal(18,2)))), DecimalType(18,2)) AS profit#122]

(30) Scan parquet default.catalog_sales
Output [4]: [cs_catalog_page_sk#123, cs_ext_sales_price#124, cs_net_profit#125, cs_sold_date_sk#126]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#126), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(31) ColumnarToRow [codegen id : 9]
Input [4]: [cs_catalog_page_sk#123, cs_ext_sales_price#124, cs_net_profit#125, cs_sold_date_sk#126]

(32) Filter [codegen id : 9]
Input [4]: [cs_catalog_page_sk#123, cs_ext_sales_price#124, cs_net_profit#125, cs_sold_date_sk#126]
Condition : isnotnull(cs_catalog_page_sk#123)

(33) Project [codegen id : 9]
Output [6]: [cs_catalog_page_sk#123 AS page_sk#127, cs_sold_date_sk#126 AS date_sk#128, cs_ext_sales_price#124 AS sales_price#129, cs_net_profit#125 AS profit#130, 0.00 AS return_amt#131, 0.00 AS net_loss#132]
Input [4]: [cs_catalog_page_sk#123, cs_ext_sales_price#124, cs_net_profit#125, cs_sold_date_sk#126]

(34) Scan parquet default.catalog_returns
Output [4]: [cr_catalog_page_sk#133, cr_return_amount#134, cr_net_loss#135, cr_returned_date_sk#136]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#136), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(35) ColumnarToRow [codegen id : 10]
Input [4]: [cr_catalog_page_sk#133, cr_return_amount#134, cr_net_loss#135, cr_returned_date_sk#136]

(36) Filter [codegen id : 10]
Input [4]: [cr_catalog_page_sk#133, cr_return_amount#134, cr_net_loss#135, cr_returned_date_sk#136]
Condition : isnotnull(cr_catalog_page_sk#133)

(37) Project [codegen id : 10]
Output [6]: [cr_catalog_page_sk#133 AS page_sk#137, cr_returned_date_sk#136 AS date_sk#138, 0.00 AS sales_price#139, 0.00 AS profit#140, cr_return_amount#134 AS return_amt#141, cr_net_loss#135 AS net_loss#142]
Input [4]: [cr_catalog_page_sk#133, cr_return_amount#134, cr_net_loss#135, cr_returned_date_sk#136]

(38) Union

(39) Exchange
Input [6]: [page_sk#127, date_sk#128, sales_price#129, profit#130, return_amt#131, net_loss#132]
Arguments: hashpartitioning(date_sk#128, 5), ENSURE_REQUIREMENTS, [id=#143]

(40) Sort [codegen id : 11]
Input [6]: [page_sk#127, date_sk#128, sales_price#129, profit#130, return_amt#131, net_loss#132]
Arguments: [date_sk#128 ASC NULLS FIRST], false, 0

(41) ReusedExchange [Reuses operator id: 15]
Output [28]: [d_date_sk#144, d_date_id#145, d_date#146, d_month_seq#147, d_week_seq#148, d_quarter_seq#149, d_year#150, d_dow#151, d_moy#152, d_dom#153, d_qoy#154, d_fy_year#155, d_fy_quarter_seq#156, d_fy_week_seq#157, d_day_name#158, d_quarter_name#159, d_holiday#160, d_weekend#161, d_following_holiday#162, d_first_dom#163, d_last_dom#164, d_same_day_ly#165, d_same_day_lq#166, d_current_day#167, d_current_week#168, d_current_month#169, d_current_quarter#170, d_current_year#171]

(42) Sort [codegen id : 13]
Input [28]: [d_date_sk#144, d_date_id#145, d_date#146, d_month_seq#147, d_week_seq#148, d_quarter_seq#149, d_year#150, d_dow#151, d_moy#152, d_dom#153, d_qoy#154, d_fy_year#155, d_fy_quarter_seq#156, d_fy_week_seq#157, d_day_name#158, d_quarter_name#159, d_holiday#160, d_weekend#161, d_following_holiday#162, d_first_dom#163, d_last_dom#164, d_same_day_ly#165, d_same_day_lq#166, d_current_day#167, d_current_week#168, d_current_month#169, d_current_quarter#170, d_current_year#171]
Arguments: [d_date_sk#144 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 15]
Left keys [1]: [date_sk#128]
Right keys [1]: [d_date_sk#144]
Join condition: None

(44) HashAggregate [codegen id : 15]
Input [34]: [page_sk#127, date_sk#128, sales_price#129, profit#130, return_amt#131, net_loss#132, d_date_sk#144, d_date_id#145, d_date#146, d_month_seq#147, d_week_seq#148, d_quarter_seq#149, d_year#150, d_dow#151, d_moy#152, d_dom#153, d_qoy#154, d_fy_year#155, d_fy_quarter_seq#156, d_fy_week_seq#157, d_day_name#158, d_quarter_name#159, d_holiday#160, d_weekend#161, d_following_holiday#162, d_first_dom#163, d_last_dom#164, d_same_day_ly#165, d_same_day_lq#166, d_current_day#167, d_current_week#168, d_current_month#169, d_current_quarter#170, d_current_year#171]
Keys [1]: [page_sk#127]
Functions [4]: [partial_sum(UnscaledValue(sales_price#129)), partial_sum(UnscaledValue(profit#130)), partial_sum(UnscaledValue(return_amt#131)), partial_sum(UnscaledValue(net_loss#132))]
Aggregate Attributes [4]: [sum#172, sum#173, sum#174, sum#175]
Results [5]: [page_sk#127, sum#176, sum#177, sum#178, sum#179]

(45) Project [codegen id : 15]
Output [5]: [page_sk#127, sum#176 AS _pushedexpression#180, sum#177 AS _pushedexpression#181, sum#178 AS _pushedexpression#182, sum#179 AS _pushedexpression#183]
Input [5]: [page_sk#127, sum#176, sum#177, sum#178, sum#179]

(46) Scan parquet default.catalog_page
Output [9]: [cp_catalog_page_sk#184, cp_catalog_page_id#185, cp_start_date_sk#186, cp_end_date_sk#187, cp_department#188, cp_catalog_number#189, cp_catalog_page_number#190, cp_description#191, cp_type#192]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string,cp_start_date_sk:int,cp_end_date_sk:int,cp_department:string,cp_catalog_number:int,cp_catalog_page_number:int,cp_description:string,cp_type:string>

(47) ColumnarToRow [codegen id : 14]
Input [9]: [cp_catalog_page_sk#184, cp_catalog_page_id#185, cp_start_date_sk#186, cp_end_date_sk#187, cp_department#188, cp_catalog_number#189, cp_catalog_page_number#190, cp_description#191, cp_type#192]

(48) Filter [codegen id : 14]
Input [9]: [cp_catalog_page_sk#184, cp_catalog_page_id#185, cp_start_date_sk#186, cp_end_date_sk#187, cp_department#188, cp_catalog_number#189, cp_catalog_page_number#190, cp_description#191, cp_type#192]
Condition : isnotnull(cp_catalog_page_sk#184)

(49) HashAggregate [codegen id : 14]
Input [9]: [cp_catalog_page_sk#184, cp_catalog_page_id#185, cp_start_date_sk#186, cp_end_date_sk#187, cp_department#188, cp_catalog_number#189, cp_catalog_page_number#190, cp_description#191, cp_type#192]
Keys [2]: [cp_catalog_page_sk#184, cp_catalog_page_id#185]
Functions: []
Aggregate Attributes: []
Results [2]: [cp_catalog_page_sk#184, cp_catalog_page_id#185]

(50) BroadcastExchange
Input [2]: [cp_catalog_page_sk#184, cp_catalog_page_id#185]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#193]

(51) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [page_sk#127]
Right keys [1]: [cp_catalog_page_sk#184]
Join condition: None

(52) Project [codegen id : 15]
Output [5]: [_pushedexpression#194, _pushedexpression#195, _pushedexpression#196, _pushedexpression#197, cp_catalog_page_id#185]
Input [7]: [page_sk#127, _pushedexpression#180, _pushedexpression#181, _pushedexpression#182, _pushedexpression#183, cp_catalog_page_sk#184, cp_catalog_page_id#185]

(53) HashAggregate [codegen id : 15]
Input [5]: [_pushedexpression#194, _pushedexpression#195, _pushedexpression#196, _pushedexpression#197, cp_catalog_page_id#185]
Keys [1]: [cp_catalog_page_id#185]
Functions [4]: [partial_sum(_pushedexpression#194), partial_sum(_pushedexpression#196), partial_sum(_pushedexpression#195), partial_sum(_pushedexpression#197)]
Aggregate Attributes [8]: [sum#198, isEmpty#199, sum#200, isEmpty#201, sum#202, isEmpty#203, sum#204, isEmpty#205]
Results [9]: [cp_catalog_page_id#185, sum#206, isEmpty#207, sum#208, isEmpty#209, sum#210, isEmpty#211, sum#212, isEmpty#213]

(54) Exchange
Input [9]: [cp_catalog_page_id#185, sum#206, isEmpty#207, sum#208, isEmpty#209, sum#210, isEmpty#211, sum#212, isEmpty#213]
Arguments: hashpartitioning(cp_catalog_page_id#185, 5), ENSURE_REQUIREMENTS, [id=#214]

(55) HashAggregate [codegen id : 16]
Input [9]: [cp_catalog_page_id#185, sum#206, isEmpty#207, sum#208, isEmpty#209, sum#210, isEmpty#211, sum#212, isEmpty#213]
Keys [1]: [cp_catalog_page_id#185]
Functions [4]: [sum(_pushedexpression#194), sum(_pushedexpression#196), sum(_pushedexpression#195), sum(_pushedexpression#197)]
Aggregate Attributes [4]: [sum(_pushedexpression#194)#215, sum(_pushedexpression#196)#216, sum(_pushedexpression#195)#217, sum(_pushedexpression#197)#218]
Results [5]: [catalog channel AS channel#219, concat(catalog_page, cp_catalog_page_id#185) AS id#220, cast(sum(_pushedexpression#194)#215 as decimal(17,2)) AS sales#221, cast(sum(_pushedexpression#196)#216 as decimal(17,2)) AS returns#222, CheckOverflow((promote_precision(cast(cast(sum(_pushedexpression#195)#217 as decimal(17,2)) as decimal(18,2))) - promote_precision(cast(cast(sum(_pushedexpression#197)#218 as decimal(17,2)) as decimal(18,2)))), DecimalType(18,2)) AS profit#223]

(56) Scan parquet default.web_sales
Output [4]: [ws_web_site_sk#224, ws_ext_sales_price#225, ws_net_profit#226, ws_sold_date_sk#227]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#227), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(57) ColumnarToRow [codegen id : 17]
Input [4]: [ws_web_site_sk#224, ws_ext_sales_price#225, ws_net_profit#226, ws_sold_date_sk#227]

(58) Filter [codegen id : 17]
Input [4]: [ws_web_site_sk#224, ws_ext_sales_price#225, ws_net_profit#226, ws_sold_date_sk#227]
Condition : isnotnull(ws_web_site_sk#224)

(59) Project [codegen id : 17]
Output [6]: [ws_web_site_sk#224 AS wsr_web_site_sk#228, ws_sold_date_sk#227 AS date_sk#229, ws_ext_sales_price#225 AS sales_price#230, ws_net_profit#226 AS profit#231, 0.00 AS return_amt#232, 0.00 AS net_loss#233]
Input [4]: [ws_web_site_sk#224, ws_ext_sales_price#225, ws_net_profit#226, ws_sold_date_sk#227]

(60) Scan parquet default.web_returns
Output [5]: [wr_item_sk#234, wr_order_number#235, wr_return_amt#236, wr_net_loss#237, wr_returned_date_sk#238]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#238), dynamicpruningexpression(true)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(61) ColumnarToRow [codegen id : 18]
Input [5]: [wr_item_sk#234, wr_order_number#235, wr_return_amt#236, wr_net_loss#237, wr_returned_date_sk#238]

(62) Exchange
Input [5]: [wr_item_sk#234, wr_order_number#235, wr_return_amt#236, wr_net_loss#237, wr_returned_date_sk#238]
Arguments: hashpartitioning(wr_item_sk#234, wr_order_number#235, 5), ENSURE_REQUIREMENTS, [id=#239]

(63) Sort [codegen id : 19]
Input [5]: [wr_item_sk#234, wr_order_number#235, wr_return_amt#236, wr_net_loss#237, wr_returned_date_sk#238]
Arguments: [wr_item_sk#234 ASC NULLS FIRST, wr_order_number#235 ASC NULLS FIRST], false, 0

(64) Scan parquet default.web_sales
Output [4]: [ws_item_sk#240, ws_web_site_sk#241, ws_order_number#242, ws_sold_date_sk#243]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(65) ColumnarToRow [codegen id : 20]
Input [4]: [ws_item_sk#240, ws_web_site_sk#241, ws_order_number#242, ws_sold_date_sk#243]

(66) Filter [codegen id : 20]
Input [4]: [ws_item_sk#240, ws_web_site_sk#241, ws_order_number#242, ws_sold_date_sk#243]
Condition : ((isnotnull(ws_item_sk#240) AND isnotnull(ws_order_number#242)) AND isnotnull(ws_web_site_sk#241))

(67) Project [codegen id : 20]
Output [3]: [ws_item_sk#240, ws_web_site_sk#241, ws_order_number#242]
Input [4]: [ws_item_sk#240, ws_web_site_sk#241, ws_order_number#242, ws_sold_date_sk#243]

(68) Exchange
Input [3]: [ws_item_sk#240, ws_web_site_sk#241, ws_order_number#242]
Arguments: hashpartitioning(ws_item_sk#240, ws_order_number#242, 5), ENSURE_REQUIREMENTS, [id=#244]

(69) Sort [codegen id : 21]
Input [3]: [ws_item_sk#240, ws_web_site_sk#241, ws_order_number#242]
Arguments: [ws_item_sk#240 ASC NULLS FIRST, ws_order_number#242 ASC NULLS FIRST], false, 0

(70) SortMergeJoin [codegen id : 22]
Left keys [2]: [wr_item_sk#234, wr_order_number#235]
Right keys [2]: [ws_item_sk#240, ws_order_number#242]
Join condition: None

(71) Project [codegen id : 22]
Output [6]: [ws_web_site_sk#241 AS wsr_web_site_sk#245, wr_returned_date_sk#238 AS date_sk#246, 0.00 AS sales_price#247, 0.00 AS profit#248, wr_return_amt#236 AS return_amt#249, wr_net_loss#237 AS net_loss#250]
Input [8]: [wr_item_sk#234, wr_order_number#235, wr_return_amt#236, wr_net_loss#237, wr_returned_date_sk#238, ws_item_sk#240, ws_web_site_sk#241, ws_order_number#242]

(72) Union

(73) Exchange
Input [6]: [wsr_web_site_sk#228, date_sk#229, sales_price#230, profit#231, return_amt#232, net_loss#233]
Arguments: hashpartitioning(date_sk#229, 5), ENSURE_REQUIREMENTS, [id=#251]

(74) Sort [codegen id : 23]
Input [6]: [wsr_web_site_sk#228, date_sk#229, sales_price#230, profit#231, return_amt#232, net_loss#233]
Arguments: [date_sk#229 ASC NULLS FIRST], false, 0

(75) ReusedExchange [Reuses operator id: 15]
Output [28]: [d_date_sk#252, d_date_id#253, d_date#254, d_month_seq#255, d_week_seq#256, d_quarter_seq#257, d_year#258, d_dow#259, d_moy#260, d_dom#261, d_qoy#262, d_fy_year#263, d_fy_quarter_seq#264, d_fy_week_seq#265, d_day_name#266, d_quarter_name#267, d_holiday#268, d_weekend#269, d_following_holiday#270, d_first_dom#271, d_last_dom#272, d_same_day_ly#273, d_same_day_lq#274, d_current_day#275, d_current_week#276, d_current_month#277, d_current_quarter#278, d_current_year#279]

(76) Sort [codegen id : 25]
Input [28]: [d_date_sk#252, d_date_id#253, d_date#254, d_month_seq#255, d_week_seq#256, d_quarter_seq#257, d_year#258, d_dow#259, d_moy#260, d_dom#261, d_qoy#262, d_fy_year#263, d_fy_quarter_seq#264, d_fy_week_seq#265, d_day_name#266, d_quarter_name#267, d_holiday#268, d_weekend#269, d_following_holiday#270, d_first_dom#271, d_last_dom#272, d_same_day_ly#273, d_same_day_lq#274, d_current_day#275, d_current_week#276, d_current_month#277, d_current_quarter#278, d_current_year#279]
Arguments: [d_date_sk#252 ASC NULLS FIRST], false, 0

(77) SortMergeJoin [codegen id : 27]
Left keys [1]: [date_sk#229]
Right keys [1]: [d_date_sk#252]
Join condition: None

(78) HashAggregate [codegen id : 27]
Input [34]: [wsr_web_site_sk#228, date_sk#229, sales_price#230, profit#231, return_amt#232, net_loss#233, d_date_sk#252, d_date_id#253, d_date#254, d_month_seq#255, d_week_seq#256, d_quarter_seq#257, d_year#258, d_dow#259, d_moy#260, d_dom#261, d_qoy#262, d_fy_year#263, d_fy_quarter_seq#264, d_fy_week_seq#265, d_day_name#266, d_quarter_name#267, d_holiday#268, d_weekend#269, d_following_holiday#270, d_first_dom#271, d_last_dom#272, d_same_day_ly#273, d_same_day_lq#274, d_current_day#275, d_current_week#276, d_current_month#277, d_current_quarter#278, d_current_year#279]
Keys [1]: [wsr_web_site_sk#228]
Functions [4]: [partial_sum(UnscaledValue(sales_price#230)), partial_sum(UnscaledValue(profit#231)), partial_sum(UnscaledValue(return_amt#232)), partial_sum(UnscaledValue(net_loss#233))]
Aggregate Attributes [4]: [sum#280, sum#281, sum#282, sum#283]
Results [5]: [wsr_web_site_sk#228, sum#284, sum#285, sum#286, sum#287]

(79) Project [codegen id : 27]
Output [5]: [wsr_web_site_sk#228, sum#284 AS _pushedexpression#288, sum#285 AS _pushedexpression#289, sum#286 AS _pushedexpression#290, sum#287 AS _pushedexpression#291]
Input [5]: [wsr_web_site_sk#228, sum#284, sum#285, sum#286, sum#287]

(80) Scan parquet default.web_site
Output [26]: [web_site_sk#292, web_site_id#293, web_rec_start_date#294, web_rec_end_date#295, web_name#296, web_open_date_sk#297, web_close_date_sk#298, web_class#299, web_manager#300, web_mkt_id#301, web_mkt_class#302, web_mkt_desc#303, web_market_manager#304, web_company_id#305, web_company_name#306, web_street_number#307, web_street_name#308, web_street_type#309, web_suite_number#310, web_city#311, web_county#312, web_state#313, web_zip#314, web_country#315, web_gmt_offset#316, web_tax_percentage#317]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string,web_rec_start_date:date,web_rec_end_date:date,web_name:string,web_open_date_sk:int,web_close_date_sk:int,web_class:string,web_manager:string,web_mkt_id:int,web_mkt_class:string,web_mkt_desc:string,web_market_manager:string,web_company_id:int,web_company_name:string,web_street_number:string,web_street_name:string,web_street_type:string,web_suite_number:string,web_city:string,web_county:string,web_state:string,web_zip:string,web_country:string,web_gmt_offset:decimal(5,2),web_tax_percentage:decimal(5,2)>

(81) ColumnarToRow [codegen id : 26]
Input [26]: [web_site_sk#292, web_site_id#293, web_rec_start_date#294, web_rec_end_date#295, web_name#296, web_open_date_sk#297, web_close_date_sk#298, web_class#299, web_manager#300, web_mkt_id#301, web_mkt_class#302, web_mkt_desc#303, web_market_manager#304, web_company_id#305, web_company_name#306, web_street_number#307, web_street_name#308, web_street_type#309, web_suite_number#310, web_city#311, web_county#312, web_state#313, web_zip#314, web_country#315, web_gmt_offset#316, web_tax_percentage#317]

(82) Filter [codegen id : 26]
Input [26]: [web_site_sk#292, web_site_id#293, web_rec_start_date#294, web_rec_end_date#295, web_name#296, web_open_date_sk#297, web_close_date_sk#298, web_class#299, web_manager#300, web_mkt_id#301, web_mkt_class#302, web_mkt_desc#303, web_market_manager#304, web_company_id#305, web_company_name#306, web_street_number#307, web_street_name#308, web_street_type#309, web_suite_number#310, web_city#311, web_county#312, web_state#313, web_zip#314, web_country#315, web_gmt_offset#316, web_tax_percentage#317]
Condition : isnotnull(web_site_sk#292)

(83) HashAggregate [codegen id : 26]
Input [26]: [web_site_sk#292, web_site_id#293, web_rec_start_date#294, web_rec_end_date#295, web_name#296, web_open_date_sk#297, web_close_date_sk#298, web_class#299, web_manager#300, web_mkt_id#301, web_mkt_class#302, web_mkt_desc#303, web_market_manager#304, web_company_id#305, web_company_name#306, web_street_number#307, web_street_name#308, web_street_type#309, web_suite_number#310, web_city#311, web_county#312, web_state#313, web_zip#314, web_country#315, web_gmt_offset#316, web_tax_percentage#317]
Keys [2]: [web_site_sk#292, web_site_id#293]
Functions: []
Aggregate Attributes: []
Results [2]: [web_site_sk#292, web_site_id#293]

(84) BroadcastExchange
Input [2]: [web_site_sk#292, web_site_id#293]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#318]

(85) BroadcastHashJoin [codegen id : 27]
Left keys [1]: [wsr_web_site_sk#228]
Right keys [1]: [web_site_sk#292]
Join condition: None

(86) Project [codegen id : 27]
Output [5]: [_pushedexpression#319, _pushedexpression#320, _pushedexpression#321, _pushedexpression#322, web_site_id#293]
Input [7]: [wsr_web_site_sk#228, _pushedexpression#288, _pushedexpression#289, _pushedexpression#290, _pushedexpression#291, web_site_sk#292, web_site_id#293]

(87) HashAggregate [codegen id : 27]
Input [5]: [_pushedexpression#319, _pushedexpression#320, _pushedexpression#321, _pushedexpression#322, web_site_id#293]
Keys [1]: [web_site_id#293]
Functions [4]: [partial_sum(_pushedexpression#319), partial_sum(_pushedexpression#321), partial_sum(_pushedexpression#320), partial_sum(_pushedexpression#322)]
Aggregate Attributes [8]: [sum#323, isEmpty#324, sum#325, isEmpty#326, sum#327, isEmpty#328, sum#329, isEmpty#330]
Results [9]: [web_site_id#293, sum#331, isEmpty#332, sum#333, isEmpty#334, sum#335, isEmpty#336, sum#337, isEmpty#338]

(88) Exchange
Input [9]: [web_site_id#293, sum#331, isEmpty#332, sum#333, isEmpty#334, sum#335, isEmpty#336, sum#337, isEmpty#338]
Arguments: hashpartitioning(web_site_id#293, 5), ENSURE_REQUIREMENTS, [id=#339]

(89) HashAggregate [codegen id : 28]
Input [9]: [web_site_id#293, sum#331, isEmpty#332, sum#333, isEmpty#334, sum#335, isEmpty#336, sum#337, isEmpty#338]
Keys [1]: [web_site_id#293]
Functions [4]: [sum(_pushedexpression#319), sum(_pushedexpression#321), sum(_pushedexpression#320), sum(_pushedexpression#322)]
Aggregate Attributes [4]: [sum(_pushedexpression#319)#340, sum(_pushedexpression#321)#341, sum(_pushedexpression#320)#342, sum(_pushedexpression#322)#343]
Results [5]: [web channel AS channel#344, concat(web_site, web_site_id#293) AS id#345, cast(sum(_pushedexpression#319)#340 as decimal(17,2)) AS sales#346, cast(sum(_pushedexpression#321)#341 as decimal(17,2)) AS returns#347, CheckOverflow((promote_precision(cast(cast(sum(_pushedexpression#320)#342 as decimal(17,2)) as decimal(18,2))) - promote_precision(cast(cast(sum(_pushedexpression#322)#343 as decimal(17,2)) as decimal(18,2)))), DecimalType(18,2)) AS profit#348]

(90) Union

(91) HashAggregate [codegen id : 29]
Input [5]: [channel#118, id#119, sales#120, returns#121, profit#122]
Keys [2]: [channel#118, id#119]
Functions [3]: [partial_sum(sales#120), partial_sum(returns#121), partial_sum(profit#122)]
Aggregate Attributes [6]: [sum#349, isEmpty#350, sum#351, isEmpty#352, sum#353, isEmpty#354]
Results [8]: [channel#118, id#119, sum#355, isEmpty#356, sum#357, isEmpty#358, sum#359, isEmpty#360]

(92) Exchange
Input [8]: [channel#118, id#119, sum#355, isEmpty#356, sum#357, isEmpty#358, sum#359, isEmpty#360]
Arguments: hashpartitioning(channel#118, id#119, 5), ENSURE_REQUIREMENTS, [id=#361]

(93) HashAggregate [codegen id : 30]
Input [8]: [channel#118, id#119, sum#355, isEmpty#356, sum#357, isEmpty#358, sum#359, isEmpty#360]
Keys [2]: [channel#118, id#119]
Functions [3]: [sum(sales#120), sum(returns#121), sum(profit#122)]
Aggregate Attributes [3]: [sum(sales#120)#362, sum(returns#121)#363, sum(profit#122)#364]
Results [5]: [channel#118, id#119, cast(sum(sales#120)#362 as decimal(37,2)) AS sales#365, cast(sum(returns#121)#363 as decimal(37,2)) AS returns#366, cast(sum(profit#122)#364 as decimal(38,2)) AS profit#367]

(94) ReusedExchange [Reuses operator id: 92]
Output [8]: [channel#118, id#119, sum#355, isEmpty#356, sum#357, isEmpty#358, sum#359, isEmpty#360]

(95) HashAggregate [codegen id : 60]
Input [8]: [channel#118, id#119, sum#355, isEmpty#356, sum#357, isEmpty#358, sum#359, isEmpty#360]
Keys [2]: [channel#118, id#119]
Functions [3]: [sum(sales#120), sum(returns#121), sum(profit#122)]
Aggregate Attributes [3]: [sum(sales#120)#362, sum(returns#121)#363, sum(profit#122)#364]
Results [4]: [channel#118, sum(sales#120)#362 AS sales#368, sum(returns#121)#363 AS returns#369, sum(profit#122)#364 AS profit#370]

(96) HashAggregate [codegen id : 60]
Input [4]: [channel#118, sales#368, returns#369, profit#370]
Keys [1]: [channel#118]
Functions [3]: [partial_sum(sales#368), partial_sum(returns#369), partial_sum(profit#370)]
Aggregate Attributes [6]: [sum#371, isEmpty#372, sum#373, isEmpty#374, sum#375, isEmpty#376]
Results [7]: [channel#118, sum#377, isEmpty#378, sum#379, isEmpty#380, sum#381, isEmpty#382]

(97) Exchange
Input [7]: [channel#118, sum#377, isEmpty#378, sum#379, isEmpty#380, sum#381, isEmpty#382]
Arguments: hashpartitioning(channel#118, 5), ENSURE_REQUIREMENTS, [id=#383]

(98) HashAggregate [codegen id : 61]
Input [7]: [channel#118, sum#377, isEmpty#378, sum#379, isEmpty#380, sum#381, isEmpty#382]
Keys [1]: [channel#118]
Functions [3]: [sum(sales#368), sum(returns#369), sum(profit#370)]
Aggregate Attributes [3]: [sum(sales#368)#384, sum(returns#369)#385, sum(profit#370)#386]
Results [5]: [channel#118, null AS id#387, sum(sales#368)#384 AS sum(sales)#388, sum(returns#369)#385 AS sum(returns)#389, sum(profit#370)#386 AS sum(profit)#390]

(99) ReusedExchange [Reuses operator id: 92]
Output [8]: [channel#118, id#119, sum#355, isEmpty#356, sum#357, isEmpty#358, sum#359, isEmpty#360]

(100) HashAggregate [codegen id : 91]
Input [8]: [channel#118, id#119, sum#355, isEmpty#356, sum#357, isEmpty#358, sum#359, isEmpty#360]
Keys [2]: [channel#118, id#119]
Functions [3]: [sum(sales#120), sum(returns#121), sum(profit#122)]
Aggregate Attributes [3]: [sum(sales#120)#362, sum(returns#121)#363, sum(profit#122)#364]
Results [3]: [sum(sales#120)#362 AS sales#368, sum(returns#121)#363 AS returns#369, sum(profit#122)#364 AS profit#370]

(101) HashAggregate [codegen id : 91]
Input [3]: [sales#368, returns#369, profit#370]
Keys: []
Functions [3]: [partial_sum(sales#368), partial_sum(returns#369), partial_sum(profit#370)]
Aggregate Attributes [6]: [sum#391, isEmpty#392, sum#393, isEmpty#394, sum#395, isEmpty#396]
Results [6]: [sum#397, isEmpty#398, sum#399, isEmpty#400, sum#401, isEmpty#402]

(102) Exchange
Input [6]: [sum#397, isEmpty#398, sum#399, isEmpty#400, sum#401, isEmpty#402]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#403]

(103) HashAggregate [codegen id : 92]
Input [6]: [sum#397, isEmpty#398, sum#399, isEmpty#400, sum#401, isEmpty#402]
Keys: []
Functions [3]: [sum(sales#368), sum(returns#369), sum(profit#370)]
Aggregate Attributes [3]: [sum(sales#368)#404, sum(returns#369)#405, sum(profit#370)#406]
Results [5]: [null AS channel#407, null AS id#408, sum(sales#368)#404 AS sum(sales)#409, sum(returns#369)#405 AS sum(returns)#410, sum(profit#370)#406 AS sum(profit)#411]

(104) Union

(105) HashAggregate [codegen id : 93]
Input [5]: [channel#118, id#119, sales#365, returns#366, profit#367]
Keys [5]: [channel#118, id#119, sales#365, returns#366, profit#367]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#118, id#119, sales#365, returns#366, profit#367]

(106) Exchange
Input [5]: [channel#118, id#119, sales#365, returns#366, profit#367]
Arguments: hashpartitioning(channel#118, id#119, sales#365, returns#366, profit#367, 5), ENSURE_REQUIREMENTS, [id=#412]

(107) HashAggregate [codegen id : 94]
Input [5]: [channel#118, id#119, sales#365, returns#366, profit#367]
Keys [5]: [channel#118, id#119, sales#365, returns#366, profit#367]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#118, id#119, sales#365, returns#366, profit#367]

(108) TakeOrderedAndProject
Input [5]: [channel#118, id#119, sales#365, returns#366, profit#367]
Arguments: 100, [channel#118 ASC NULLS FIRST, id#119 ASC NULLS FIRST], [channel#118, id#119, sales#365, returns#366, profit#367]

