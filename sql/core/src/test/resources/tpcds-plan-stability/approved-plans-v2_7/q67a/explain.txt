== Physical Plan ==
TakeOrderedAndProject (85)
+- * Filter (84)
   +- Window (83)
      +- * Sort (82)
         +- Exchange (81)
            +- Union (80)
               :- * HashAggregate (23)
               :  +- Exchange (22)
               :     +- * HashAggregate (21)
               :        +- * Project (20)
               :           +- * BroadcastHashJoin Inner BuildRight (19)
               :              :- * HashAggregate (13)
               :              :  +- * Project (12)
               :              :     +- * BroadcastHashJoin Inner BuildRight (11)
               :              :        :- * Project (6)
               :              :        :  +- * BroadcastHashJoin Inner BuildRight (5)
               :              :        :     :- * Filter (3)
               :              :        :     :  +- * ColumnarToRow (2)
               :              :        :     :     +- Scan parquet default.store_sales (1)
               :              :        :     +- ReusedExchange (4)
               :              :        +- BroadcastExchange (10)
               :              :           +- * Filter (9)
               :              :              +- * ColumnarToRow (8)
               :              :                 +- Scan parquet default.store (7)
               :              +- BroadcastExchange (18)
               :                 +- * HashAggregate (17)
               :                    +- * Filter (16)
               :                       +- * ColumnarToRow (15)
               :                          +- Scan parquet default.item (14)
               :- * HashAggregate (44)
               :  +- Exchange (43)
               :     +- * HashAggregate (42)
               :        +- * HashAggregate (41)
               :           +- Exchange (40)
               :              +- * HashAggregate (39)
               :                 +- * Project (38)
               :                    +- * BroadcastHashJoin Inner BuildRight (37)
               :                       :- * Project (32)
               :                       :  +- * BroadcastHashJoin Inner BuildRight (31)
               :                       :     :- * Project (29)
               :                       :     :  +- * BroadcastHashJoin Inner BuildRight (28)
               :                       :     :     :- * Filter (26)
               :                       :     :     :  +- * ColumnarToRow (25)
               :                       :     :     :     +- Scan parquet default.store_sales (24)
               :                       :     :     +- ReusedExchange (27)
               :                       :     +- ReusedExchange (30)
               :                       +- BroadcastExchange (36)
               :                          +- * Filter (35)
               :                             +- * ColumnarToRow (34)
               :                                +- Scan parquet default.item (33)
               :- * HashAggregate (49)
               :  +- Exchange (48)
               :     +- * HashAggregate (47)
               :        +- * HashAggregate (46)
               :           +- ReusedExchange (45)
               :- * HashAggregate (54)
               :  +- Exchange (53)
               :     +- * HashAggregate (52)
               :        +- * HashAggregate (51)
               :           +- ReusedExchange (50)
               :- * HashAggregate (59)
               :  +- Exchange (58)
               :     +- * HashAggregate (57)
               :        +- * HashAggregate (56)
               :           +- ReusedExchange (55)
               :- * HashAggregate (64)
               :  +- Exchange (63)
               :     +- * HashAggregate (62)
               :        +- * HashAggregate (61)
               :           +- ReusedExchange (60)
               :- * HashAggregate (69)
               :  +- Exchange (68)
               :     +- * HashAggregate (67)
               :        +- * HashAggregate (66)
               :           +- ReusedExchange (65)
               :- * HashAggregate (74)
               :  +- Exchange (73)
               :     +- * HashAggregate (72)
               :        +- * HashAggregate (71)
               :           +- ReusedExchange (70)
               +- * HashAggregate (79)
                  +- Exchange (78)
                     +- * HashAggregate (77)
                        +- * HashAggregate (76)
                           +- ReusedExchange (75)


(1) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]

(3) Filter [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1))

(4) ReusedExchange [Reuses operator id: 90]
Output [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(6) Project [codegen id : 4]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5, d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]

(7) Scan parquet default.store
Output [2]: [s_store_sk#11, s_store_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#11, s_store_id#12]

(9) Filter [codegen id : 2]
Input [2]: [s_store_sk#11, s_store_id#12]
Condition : isnotnull(s_store_sk#11)

(10) BroadcastExchange
Input [2]: [s_store_sk#11, s_store_id#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#11]
Join condition: None

(12) Project [codegen id : 4]
Output [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_sk#11, s_store_id#12]

(13) HashAggregate [codegen id : 4]
Input [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12]
Keys [5]: [ss_item_sk#1, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions: []
Aggregate Attributes: []
Results [5]: [ss_item_sk#1, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]

(14) Scan parquet default.item
Output [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(15) ColumnarToRow [codegen id : 3]
Input [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]

(16) Filter [codegen id : 3]
Input [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Condition : isnotnull(i_item_sk#14)

(17) HashAggregate [codegen id : 3]
Input [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Keys [5]: [i_item_sk#14, i_category#17, i_class#16, i_brand#15, i_product_name#18]
Functions: []
Aggregate Attributes: []
Results [5]: [i_item_sk#14, i_category#17, i_class#16, i_brand#15, i_product_name#18]

(18) BroadcastExchange
Input [5]: [i_item_sk#14, i_category#17, i_class#16, i_brand#15, i_product_name#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19]

(19) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#14]
Join condition: None

(20) Project [codegen id : 4]
Output [8]: [d_year#8, d_qoy#10, d_moy#9, s_store_id#12, i_category#17, i_class#16, i_brand#15, i_product_name#18]
Input [10]: [ss_item_sk#1, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, i_item_sk#14, i_category#17, i_class#16, i_brand#15, i_product_name#18]

(21) HashAggregate [codegen id : 4]
Input [8]: [d_year#8, d_qoy#10, d_moy#9, s_store_id#12, i_category#17, i_class#16, i_brand#15, i_product_name#18]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [partial_sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [2]: [sum#20, isEmpty#21]
Results [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#22, isEmpty#23]

(22) Exchange
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#22, isEmpty#23]
Arguments: hashpartitioning(i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, 5), ENSURE_REQUIREMENTS, [id=#24]

(23) HashAggregate [codegen id : 5]
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#22, isEmpty#23]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25]
Results [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, cast(sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25 as decimal(38,2)) AS sumsales#26]

(24) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(25) ColumnarToRow [codegen id : 9]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]

(26) Filter [codegen id : 9]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1))

(27) ReusedExchange [Reuses operator id: 90]
Output [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]

(28) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(29) Project [codegen id : 9]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5, d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]

(30) ReusedExchange [Reuses operator id: 10]
Output [2]: [s_store_sk#11, s_store_id#12]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#11]
Join condition: None

(32) Project [codegen id : 9]
Output [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_sk#11, s_store_id#12]

(33) Scan parquet default.item
Output [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(34) ColumnarToRow [codegen id : 8]
Input [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]

(35) Filter [codegen id : 8]
Input [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Condition : isnotnull(i_item_sk#14)

(36) BroadcastExchange
Input [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#14]
Join condition: None

(38) Project [codegen id : 9]
Output [10]: [ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Input [12]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12, i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]

(39) HashAggregate [codegen id : 9]
Input [10]: [ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [partial_sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [2]: [sum#28, isEmpty#29]
Results [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#30, isEmpty#31]

(40) Exchange
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#30, isEmpty#31]
Arguments: hashpartitioning(i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, 5), ENSURE_REQUIREMENTS, [id=#32]

(41) HashAggregate [codegen id : 10]
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#30, isEmpty#31]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25]
Results [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25 AS sumsales#33]

(42) HashAggregate [codegen id : 10]
Input [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, sumsales#33]
Keys [7]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#34, isEmpty#35]
Results [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, sum#36, isEmpty#37]

(43) Exchange
Input [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, sum#36, isEmpty#37]
Arguments: hashpartitioning(i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, 5), ENSURE_REQUIREMENTS, [id=#38]

(44) HashAggregate [codegen id : 11]
Input [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, sum#36, isEmpty#37]
Keys [7]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#39]
Results [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, null AS s_store_id#40, sum(sumsales#33)#39 AS sumsales#41]

(45) ReusedExchange [Reuses operator id: 40]
Output [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#42, isEmpty#43]

(46) HashAggregate [codegen id : 16]
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#42, isEmpty#43]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25]
Results [7]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25 AS sumsales#33]

(47) HashAggregate [codegen id : 16]
Input [7]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, sumsales#33]
Keys [6]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#44, isEmpty#45]
Results [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, sum#46, isEmpty#47]

(48) Exchange
Input [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, sum#46, isEmpty#47]
Arguments: hashpartitioning(i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, 5), ENSURE_REQUIREMENTS, [id=#48]

(49) HashAggregate [codegen id : 17]
Input [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, sum#46, isEmpty#47]
Keys [6]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#49]
Results [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, null AS d_moy#50, null AS s_store_id#51, sum(sumsales#33)#49 AS sumsales#52]

(50) ReusedExchange [Reuses operator id: 40]
Output [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#53, isEmpty#54]

(51) HashAggregate [codegen id : 22]
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#53, isEmpty#54]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25]
Results [6]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25 AS sumsales#33]

(52) HashAggregate [codegen id : 22]
Input [6]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, sumsales#33]
Keys [5]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#55, isEmpty#56]
Results [7]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, sum#57, isEmpty#58]

(53) Exchange
Input [7]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, sum#57, isEmpty#58]
Arguments: hashpartitioning(i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, 5), ENSURE_REQUIREMENTS, [id=#59]

(54) HashAggregate [codegen id : 23]
Input [7]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, sum#57, isEmpty#58]
Keys [5]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#60]
Results [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, null AS d_qoy#61, null AS d_moy#62, null AS s_store_id#63, sum(sumsales#33)#60 AS sumsales#64]

(55) ReusedExchange [Reuses operator id: 40]
Output [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#65, isEmpty#66]

(56) HashAggregate [codegen id : 28]
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#65, isEmpty#66]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25]
Results [5]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25 AS sumsales#33]

(57) HashAggregate [codegen id : 28]
Input [5]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, sumsales#33]
Keys [4]: [i_category#17, i_class#16, i_brand#15, i_product_name#18]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#67, isEmpty#68]
Results [6]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, sum#69, isEmpty#70]

(58) Exchange
Input [6]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, sum#69, isEmpty#70]
Arguments: hashpartitioning(i_category#17, i_class#16, i_brand#15, i_product_name#18, 5), ENSURE_REQUIREMENTS, [id=#71]

(59) HashAggregate [codegen id : 29]
Input [6]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, sum#69, isEmpty#70]
Keys [4]: [i_category#17, i_class#16, i_brand#15, i_product_name#18]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#72]
Results [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, null AS d_year#73, null AS d_qoy#74, null AS d_moy#75, null AS s_store_id#76, sum(sumsales#33)#72 AS sumsales#77]

(60) ReusedExchange [Reuses operator id: 40]
Output [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#78, isEmpty#79]

(61) HashAggregate [codegen id : 34]
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#78, isEmpty#79]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25]
Results [4]: [i_category#17, i_class#16, i_brand#15, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25 AS sumsales#33]

(62) HashAggregate [codegen id : 34]
Input [4]: [i_category#17, i_class#16, i_brand#15, sumsales#33]
Keys [3]: [i_category#17, i_class#16, i_brand#15]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#80, isEmpty#81]
Results [5]: [i_category#17, i_class#16, i_brand#15, sum#82, isEmpty#83]

(63) Exchange
Input [5]: [i_category#17, i_class#16, i_brand#15, sum#82, isEmpty#83]
Arguments: hashpartitioning(i_category#17, i_class#16, i_brand#15, 5), ENSURE_REQUIREMENTS, [id=#84]

(64) HashAggregate [codegen id : 35]
Input [5]: [i_category#17, i_class#16, i_brand#15, sum#82, isEmpty#83]
Keys [3]: [i_category#17, i_class#16, i_brand#15]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#85]
Results [9]: [i_category#17, i_class#16, i_brand#15, null AS i_product_name#86, null AS d_year#87, null AS d_qoy#88, null AS d_moy#89, null AS s_store_id#90, sum(sumsales#33)#85 AS sumsales#91]

(65) ReusedExchange [Reuses operator id: 40]
Output [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#92, isEmpty#93]

(66) HashAggregate [codegen id : 40]
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#92, isEmpty#93]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25]
Results [3]: [i_category#17, i_class#16, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25 AS sumsales#33]

(67) HashAggregate [codegen id : 40]
Input [3]: [i_category#17, i_class#16, sumsales#33]
Keys [2]: [i_category#17, i_class#16]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#94, isEmpty#95]
Results [4]: [i_category#17, i_class#16, sum#96, isEmpty#97]

(68) Exchange
Input [4]: [i_category#17, i_class#16, sum#96, isEmpty#97]
Arguments: hashpartitioning(i_category#17, i_class#16, 5), ENSURE_REQUIREMENTS, [id=#98]

(69) HashAggregate [codegen id : 41]
Input [4]: [i_category#17, i_class#16, sum#96, isEmpty#97]
Keys [2]: [i_category#17, i_class#16]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#99]
Results [9]: [i_category#17, i_class#16, null AS i_brand#100, null AS i_product_name#101, null AS d_year#102, null AS d_qoy#103, null AS d_moy#104, null AS s_store_id#105, sum(sumsales#33)#99 AS sumsales#106]

(70) ReusedExchange [Reuses operator id: 40]
Output [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#107, isEmpty#108]

(71) HashAggregate [codegen id : 46]
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#107, isEmpty#108]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25]
Results [2]: [i_category#17, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25 AS sumsales#33]

(72) HashAggregate [codegen id : 46]
Input [2]: [i_category#17, sumsales#33]
Keys [1]: [i_category#17]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#109, isEmpty#110]
Results [3]: [i_category#17, sum#111, isEmpty#112]

(73) Exchange
Input [3]: [i_category#17, sum#111, isEmpty#112]
Arguments: hashpartitioning(i_category#17, 5), ENSURE_REQUIREMENTS, [id=#113]

(74) HashAggregate [codegen id : 47]
Input [3]: [i_category#17, sum#111, isEmpty#112]
Keys [1]: [i_category#17]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#114]
Results [9]: [i_category#17, null AS i_class#115, null AS i_brand#116, null AS i_product_name#117, null AS d_year#118, null AS d_qoy#119, null AS d_moy#120, null AS s_store_id#121, sum(sumsales#33)#114 AS sumsales#122]

(75) ReusedExchange [Reuses operator id: 40]
Output [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#123, isEmpty#124]

(76) HashAggregate [codegen id : 52]
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#123, isEmpty#124]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25]
Results [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(ss_quantity#3 as decimal(12,2)))), DecimalType(18,2)), 0.00))#25 AS sumsales#33]

(77) HashAggregate [codegen id : 52]
Input [1]: [sumsales#33]
Keys: []
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#125, isEmpty#126]
Results [2]: [sum#127, isEmpty#128]

(78) Exchange
Input [2]: [sum#127, isEmpty#128]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#129]

(79) HashAggregate [codegen id : 53]
Input [2]: [sum#127, isEmpty#128]
Keys: []
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#130]
Results [9]: [null AS i_category#131, null AS i_class#132, null AS i_brand#133, null AS i_product_name#134, null AS d_year#135, null AS d_qoy#136, null AS d_moy#137, null AS s_store_id#138, sum(sumsales#33)#130 AS sumsales#139]

(80) Union

(81) Exchange
Input [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#26]
Arguments: hashpartitioning(i_category#17, 5), ENSURE_REQUIREMENTS, [id=#140]

(82) Sort [codegen id : 54]
Input [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#26]
Arguments: [i_category#17 ASC NULLS FIRST, sumsales#26 DESC NULLS LAST], false, 0

(83) Window
Input [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#26]
Arguments: [rank(sumsales#26) windowspecdefinition(i_category#17, sumsales#26 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#141], [i_category#17], [sumsales#26 DESC NULLS LAST]

(84) Filter [codegen id : 55]
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#26, rk#141]
Condition : (rk#141 <= 100)

(85) TakeOrderedAndProject
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#26, rk#141]
Arguments: 100, [i_category#17 ASC NULLS FIRST, i_class#16 ASC NULLS FIRST, i_brand#15 ASC NULLS FIRST, i_product_name#18 ASC NULLS FIRST, d_year#8 ASC NULLS FIRST, d_qoy#10 ASC NULLS FIRST, d_moy#9 ASC NULLS FIRST, s_store_id#12 ASC NULLS FIRST, sumsales#26 ASC NULLS FIRST, rk#141 ASC NULLS FIRST], [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#26, rk#141]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (90)
+- * Project (89)
   +- * Filter (88)
      +- * ColumnarToRow (87)
         +- Scan parquet default.date_dim (86)


(86) Scan parquet default.date_dim
Output [5]: [d_date_sk#7, d_month_seq#142, d_year#8, d_moy#9, d_qoy#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_year:int,d_moy:int,d_qoy:int>

(87) ColumnarToRow [codegen id : 1]
Input [5]: [d_date_sk#7, d_month_seq#142, d_year#8, d_moy#9, d_qoy#10]

(88) Filter [codegen id : 1]
Input [5]: [d_date_sk#7, d_month_seq#142, d_year#8, d_moy#9, d_qoy#10]
Condition : (((isnotnull(d_month_seq#142) AND (d_month_seq#142 >= 1212)) AND (d_month_seq#142 <= 1223)) AND isnotnull(d_date_sk#7))

(89) Project [codegen id : 1]
Output [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]
Input [5]: [d_date_sk#7, d_month_seq#142, d_year#8, d_moy#9, d_qoy#10]

(90) BroadcastExchange
Input [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#143]

Subquery:2 Hosting operator id = 24 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6


