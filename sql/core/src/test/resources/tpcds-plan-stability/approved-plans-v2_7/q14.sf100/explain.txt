== Physical Plan ==
TakeOrderedAndProject (102)
+- * BroadcastHashJoin Inner BuildRight (101)
   :- * Filter (81)
   :  +- * HashAggregate (80)
   :     +- Exchange (79)
   :        +- * HashAggregate (78)
   :           +- * Project (77)
   :              +- * BroadcastHashJoin Inner BuildRight (76)
   :                 :- * Project (66)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (65)
   :                 :     :- * SortMergeJoin LeftSemi (63)
   :                 :     :  :- * Sort (5)
   :                 :     :  :  +- Exchange (4)
   :                 :     :  :     +- * Filter (3)
   :                 :     :  :        +- * ColumnarToRow (2)
   :                 :     :  :           +- Scan parquet default.store_sales (1)
   :                 :     :  +- * Sort (62)
   :                 :     :     +- Exchange (61)
   :                 :     :        +- * HashAggregate (60)
   :                 :     :           +- * Project (59)
   :                 :     :              +- * BroadcastHashJoin Inner BuildRight (58)
   :                 :     :                 :- * Filter (8)
   :                 :     :                 :  +- * ColumnarToRow (7)
   :                 :     :                 :     +- Scan parquet default.item (6)
   :                 :     :                 +- BroadcastExchange (57)
   :                 :     :                    +- * SortMergeJoin LeftSemi (56)
   :                 :     :                       :- * Sort (43)
   :                 :     :                       :  +- Exchange (42)
   :                 :     :                       :     +- * HashAggregate (41)
   :                 :     :                       :        +- Exchange (40)
   :                 :     :                       :           +- * HashAggregate (39)
   :                 :     :                       :              +- * Project (38)
   :                 :     :                       :                 +- * BroadcastHashJoin Inner BuildRight (37)
   :                 :     :                       :                    :- * Project (14)
   :                 :     :                       :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
   :                 :     :                       :                    :     :- * Filter (11)
   :                 :     :                       :                    :     :  +- * ColumnarToRow (10)
   :                 :     :                       :                    :     :     +- Scan parquet default.store_sales (9)
   :                 :     :                       :                    :     +- ReusedExchange (12)
   :                 :     :                       :                    +- BroadcastExchange (36)
   :                 :     :                       :                       +- * SortMergeJoin LeftSemi (35)
   :                 :     :                       :                          :- * Sort (19)
   :                 :     :                       :                          :  +- Exchange (18)
   :                 :     :                       :                          :     +- * Filter (17)
   :                 :     :                       :                          :        +- * ColumnarToRow (16)
   :                 :     :                       :                          :           +- Scan parquet default.item (15)
   :                 :     :                       :                          +- * Sort (34)
   :                 :     :                       :                             +- Exchange (33)
   :                 :     :                       :                                +- * HashAggregate (32)
   :                 :     :                       :                                   +- * Project (31)
   :                 :     :                       :                                      +- * BroadcastHashJoin Inner BuildRight (30)
   :                 :     :                       :                                         :- * Project (25)
   :                 :     :                       :                                         :  +- * BroadcastHashJoin Inner BuildRight (24)
   :                 :     :                       :                                         :     :- * Filter (22)
   :                 :     :                       :                                         :     :  +- * ColumnarToRow (21)
   :                 :     :                       :                                         :     :     +- Scan parquet default.catalog_sales (20)
   :                 :     :                       :                                         :     +- ReusedExchange (23)
   :                 :     :                       :                                         +- BroadcastExchange (29)
   :                 :     :                       :                                            +- * Filter (28)
   :                 :     :                       :                                               +- * ColumnarToRow (27)
   :                 :     :                       :                                                  +- Scan parquet default.item (26)
   :                 :     :                       +- * Sort (55)
   :                 :     :                          +- Exchange (54)
   :                 :     :                             +- * HashAggregate (53)
   :                 :     :                                +- * Project (52)
   :                 :     :                                   +- * BroadcastHashJoin Inner BuildRight (51)
   :                 :     :                                      :- * Project (49)
   :                 :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (48)
   :                 :     :                                      :     :- * Filter (46)
   :                 :     :                                      :     :  +- * ColumnarToRow (45)
   :                 :     :                                      :     :     +- Scan parquet default.web_sales (44)
   :                 :     :                                      :     +- ReusedExchange (47)
   :                 :     :                                      +- ReusedExchange (50)
   :                 :     +- ReusedExchange (64)
   :                 +- BroadcastExchange (75)
   :                    +- * SortMergeJoin LeftSemi (74)
   :                       :- * Sort (71)
   :                       :  +- Exchange (70)
   :                       :     +- * Filter (69)
   :                       :        +- * ColumnarToRow (68)
   :                       :           +- Scan parquet default.item (67)
   :                       +- * Sort (73)
   :                          +- ReusedExchange (72)
   +- BroadcastExchange (100)
      +- * Filter (99)
         +- * HashAggregate (98)
            +- Exchange (97)
               +- * HashAggregate (96)
                  +- * Project (95)
                     +- * BroadcastHashJoin Inner BuildRight (94)
                        :- * Project (92)
                        :  +- * BroadcastHashJoin Inner BuildRight (91)
                        :     :- * SortMergeJoin LeftSemi (89)
                        :     :  :- * Sort (86)
                        :     :  :  +- Exchange (85)
                        :     :  :     +- * Filter (84)
                        :     :  :        +- * ColumnarToRow (83)
                        :     :  :           +- Scan parquet default.store_sales (82)
                        :     :  +- * Sort (88)
                        :     :     +- ReusedExchange (87)
                        :     +- ReusedExchange (90)
                        +- ReusedExchange (93)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#14]

(13) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(14) Project [codegen id : 11]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(15) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(18) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(22) Filter [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(23) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#22]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(25) Project [codegen id : 8]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(26) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Condition : isnotnull(i_item_sk#23)

(29) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(31) Project [codegen id : 8]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(32) HashAggregate [codegen id : 8]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Keys [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]

(33) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#28]

(34) Sort [codegen id : 9]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(36) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(37) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#15]
Join condition: None

(38) Project [codegen id : 11]
Output [3]: [i_brand_id#16 AS brand_id#30, i_class_id#17 AS class_id#31, i_category_id#18 AS category_id#32]
Input [5]: [ss_item_sk#11, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(39) HashAggregate [codegen id : 11]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(40) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(41) HashAggregate [codegen id : 12]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(42) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32), 5), ENSURE_REQUIREMENTS, [id=#34]

(43) Sort [codegen id : 13]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: [coalesce(brand_id#30, 0) ASC NULLS FIRST, isnull(brand_id#30) ASC NULLS FIRST, coalesce(class_id#31, 0) ASC NULLS FIRST, isnull(class_id#31) ASC NULLS FIRST, coalesce(category_id#32, 0) ASC NULLS FIRST, isnull(category_id#32) ASC NULLS FIRST], false, 0

(44) Scan parquet default.web_sales
Output [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(ws_sold_date_sk#36 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(45) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]

(46) Filter [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Condition : isnotnull(ws_item_sk#35)

(47) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#37]

(48) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#37]
Join condition: None

(49) Project [codegen id : 16]
Output [1]: [ws_item_sk#35]
Input [3]: [ws_item_sk#35, ws_sold_date_sk#36, d_date_sk#37]

(50) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(51) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [i_item_sk#38]
Join condition: None

(52) Project [codegen id : 16]
Output [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Input [5]: [ws_item_sk#35, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(53) HashAggregate [codegen id : 16]
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Keys [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]

(54) Exchange
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: hashpartitioning(coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41), 5), ENSURE_REQUIREMENTS, [id=#42]

(55) Sort [codegen id : 17]
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: [coalesce(i_brand_id#39, 0) ASC NULLS FIRST, isnull(i_brand_id#39) ASC NULLS FIRST, coalesce(i_class_id#40, 0) ASC NULLS FIRST, isnull(i_class_id#40) ASC NULLS FIRST, coalesce(i_category_id#41, 0) ASC NULLS FIRST, isnull(i_category_id#41) ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32)]
Right keys [6]: [coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41)]
Join condition: None

(57) BroadcastExchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#43]

(58) BroadcastHashJoin [codegen id : 19]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#30, class_id#31, category_id#32]
Join condition: None

(59) Project [codegen id : 19]
Output [1]: [i_item_sk#7 AS ss_item_sk#44]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#30, class_id#31, category_id#32]

(60) HashAggregate [codegen id : 19]
Input [1]: [ss_item_sk#44]
Keys [1]: [ss_item_sk#44]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_item_sk#44]

(61) Exchange
Input [1]: [ss_item_sk#44]
Arguments: hashpartitioning(ss_item_sk#44, 5), ENSURE_REQUIREMENTS, [id=#45]

(62) Sort [codegen id : 20]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(63) SortMergeJoin [codegen id : 43]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(64) ReusedExchange [Reuses operator id: 126]
Output [1]: [d_date_sk#46]

(65) BroadcastHashJoin [codegen id : 43]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#46]
Join condition: None

(66) Project [codegen id : 43]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#46]

(67) Scan parquet default.item
Output [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(68) ColumnarToRow [codegen id : 22]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(69) Filter [codegen id : 22]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Condition : (((isnotnull(i_item_sk#47) AND isnotnull(i_brand_id#48)) AND isnotnull(i_class_id#49)) AND isnotnull(i_category_id#50))

(70) Exchange
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: hashpartitioning(i_item_sk#47, 5), ENSURE_REQUIREMENTS, [id=#51]

(71) Sort [codegen id : 23]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: [i_item_sk#47 ASC NULLS FIRST], false, 0

(72) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#44]

(73) Sort [codegen id : 41]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 42]
Left keys [1]: [i_item_sk#47]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(75) BroadcastExchange
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#52]

(76) BroadcastHashJoin [codegen id : 43]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#47]
Join condition: None

(77) Project [codegen id : 43]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(78) HashAggregate [codegen id : 43]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#53, isEmpty#54, count#55]
Results [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#56, isEmpty#57, count#58]

(79) Exchange
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#56, isEmpty#57, count#58]
Arguments: hashpartitioning(i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#59]

(80) HashAggregate [codegen id : 88]
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#56, isEmpty#57, count#58]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#60, count(1)#61]
Results [6]: [store AS channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#60 AS sales#63, count(1)#61 AS number_sales#64]

(81) Filter [codegen id : 88]
Input [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sales#63, number_sales#64]
Condition : (isnotnull(sales#63) AND (cast(sales#63 as decimal(32,6)) > cast(Subquery scalar-subquery#65, [id=#66] as decimal(32,6))))

(82) Scan parquet default.store_sales
Output [4]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, ss_sold_date_sk#70]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#70), dynamicpruningexpression(ss_sold_date_sk#70 IN dynamicpruning#71)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(83) ColumnarToRow [codegen id : 44]
Input [4]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, ss_sold_date_sk#70]

(84) Filter [codegen id : 44]
Input [4]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, ss_sold_date_sk#70]
Condition : isnotnull(ss_item_sk#67)

(85) Exchange
Input [4]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, ss_sold_date_sk#70]
Arguments: hashpartitioning(ss_item_sk#67, 5), ENSURE_REQUIREMENTS, [id=#72]

(86) Sort [codegen id : 45]
Input [4]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, ss_sold_date_sk#70]
Arguments: [ss_item_sk#67 ASC NULLS FIRST], false, 0

(87) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#44]

(88) Sort [codegen id : 63]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(89) SortMergeJoin [codegen id : 86]
Left keys [1]: [ss_item_sk#67]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(90) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#73]

(91) BroadcastHashJoin [codegen id : 86]
Left keys [1]: [ss_sold_date_sk#70]
Right keys [1]: [d_date_sk#73]
Join condition: None

(92) Project [codegen id : 86]
Output [3]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69]
Input [5]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, ss_sold_date_sk#70, d_date_sk#73]

(93) ReusedExchange [Reuses operator id: 75]
Output [4]: [i_item_sk#74, i_brand_id#75, i_class_id#76, i_category_id#77]

(94) BroadcastHashJoin [codegen id : 86]
Left keys [1]: [ss_item_sk#67]
Right keys [1]: [i_item_sk#74]
Join condition: None

(95) Project [codegen id : 86]
Output [5]: [ss_quantity#68, ss_list_price#69, i_brand_id#75, i_class_id#76, i_category_id#77]
Input [7]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, i_item_sk#74, i_brand_id#75, i_class_id#76, i_category_id#77]

(96) HashAggregate [codegen id : 86]
Input [5]: [ss_quantity#68, ss_list_price#69, i_brand_id#75, i_class_id#76, i_category_id#77]
Keys [3]: [i_brand_id#75, i_class_id#76, i_category_id#77]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#68 as decimal(12,2))) * promote_precision(cast(ss_list_price#69 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#78, isEmpty#79, count#80]
Results [6]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum#81, isEmpty#82, count#83]

(97) Exchange
Input [6]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum#81, isEmpty#82, count#83]
Arguments: hashpartitioning(i_brand_id#75, i_class_id#76, i_category_id#77, 5), ENSURE_REQUIREMENTS, [id=#84]

(98) HashAggregate [codegen id : 87]
Input [6]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum#81, isEmpty#82, count#83]
Keys [3]: [i_brand_id#75, i_class_id#76, i_category_id#77]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#68 as decimal(12,2))) * promote_precision(cast(ss_list_price#69 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#68 as decimal(12,2))) * promote_precision(cast(ss_list_price#69 as decimal(12,2)))), DecimalType(18,2)))#85, count(1)#86]
Results [6]: [store AS channel#87, i_brand_id#75, i_class_id#76, i_category_id#77, sum(CheckOverflow((promote_precision(cast(ss_quantity#68 as decimal(12,2))) * promote_precision(cast(ss_list_price#69 as decimal(12,2)))), DecimalType(18,2)))#85 AS sales#88, count(1)#86 AS number_sales#89]

(99) Filter [codegen id : 87]
Input [6]: [channel#87, i_brand_id#75, i_class_id#76, i_category_id#77, sales#88, number_sales#89]
Condition : (isnotnull(sales#88) AND (cast(sales#88 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#65, [id=#66] as decimal(32,6))))

(100) BroadcastExchange
Input [6]: [channel#87, i_brand_id#75, i_class_id#76, i_category_id#77, sales#88, number_sales#89]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#90]

(101) BroadcastHashJoin [codegen id : 88]
Left keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Right keys [3]: [i_brand_id#75, i_class_id#76, i_category_id#77]
Join condition: None

(102) TakeOrderedAndProject
Input [12]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sales#63, number_sales#64, channel#87, i_brand_id#75, i_class_id#76, i_category_id#77, sales#88, number_sales#89]
Arguments: 100, [i_brand_id#48 ASC NULLS FIRST, i_class_id#49 ASC NULLS FIRST, i_category_id#50 ASC NULLS FIRST], [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sales#63, number_sales#64, channel#87, i_brand_id#75, i_class_id#76, i_category_id#77, sales#88, number_sales#89]

===== Subqueries =====

Subquery:1 Hosting operator id = 81 Hosting Expression = Subquery scalar-subquery#65, [id=#66]
* HashAggregate (121)
+- Exchange (120)
   +- * HashAggregate (119)
      +- Union (118)
         :- * Project (107)
         :  +- * BroadcastHashJoin Inner BuildRight (106)
         :     :- * ColumnarToRow (104)
         :     :  +- Scan parquet default.store_sales (103)
         :     +- ReusedExchange (105)
         :- * Project (112)
         :  +- * BroadcastHashJoin Inner BuildRight (111)
         :     :- * ColumnarToRow (109)
         :     :  +- Scan parquet default.catalog_sales (108)
         :     +- ReusedExchange (110)
         +- * Project (117)
            +- * BroadcastHashJoin Inner BuildRight (116)
               :- * ColumnarToRow (114)
               :  +- Scan parquet default.web_sales (113)
               +- ReusedExchange (115)


(103) Scan parquet default.store_sales
Output [3]: [ss_quantity#91, ss_list_price#92, ss_sold_date_sk#93]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#93), dynamicpruningexpression(ss_sold_date_sk#93 IN dynamicpruning#13)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(104) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#91, ss_list_price#92, ss_sold_date_sk#93]

(105) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#94]

(106) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#93]
Right keys [1]: [d_date_sk#94]
Join condition: None

(107) Project [codegen id : 2]
Output [2]: [ss_quantity#91 AS quantity#95, ss_list_price#92 AS list_price#96]
Input [4]: [ss_quantity#91, ss_list_price#92, ss_sold_date_sk#93, d_date_sk#94]

(108) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#97, cs_list_price#98, cs_sold_date_sk#99]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#99), dynamicpruningexpression(cs_sold_date_sk#99 IN dynamicpruning#13)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(109) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#97, cs_list_price#98, cs_sold_date_sk#99]

(110) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#100]

(111) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#99]
Right keys [1]: [d_date_sk#100]
Join condition: None

(112) Project [codegen id : 4]
Output [2]: [cs_quantity#97 AS quantity#101, cs_list_price#98 AS list_price#102]
Input [4]: [cs_quantity#97, cs_list_price#98, cs_sold_date_sk#99, d_date_sk#100]

(113) Scan parquet default.web_sales
Output [3]: [ws_quantity#103, ws_list_price#104, ws_sold_date_sk#105]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#105), dynamicpruningexpression(ws_sold_date_sk#105 IN dynamicpruning#13)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(114) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#103, ws_list_price#104, ws_sold_date_sk#105]

(115) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#106]

(116) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#105]
Right keys [1]: [d_date_sk#106]
Join condition: None

(117) Project [codegen id : 6]
Output [2]: [ws_quantity#103 AS quantity#107, ws_list_price#104 AS list_price#108]
Input [4]: [ws_quantity#103, ws_list_price#104, ws_sold_date_sk#105, d_date_sk#106]

(118) Union

(119) HashAggregate [codegen id : 7]
Input [2]: [quantity#95, list_price#96]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(quantity#95 as decimal(12,2))) * promote_precision(cast(list_price#96 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#109, count#110]
Results [2]: [sum#111, count#112]

(120) Exchange
Input [2]: [sum#111, count#112]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#113]

(121) HashAggregate [codegen id : 8]
Input [2]: [sum#111, count#112]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(quantity#95 as decimal(12,2))) * promote_precision(cast(list_price#96 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(quantity#95 as decimal(12,2))) * promote_precision(cast(list_price#96 as decimal(12,2)))), DecimalType(18,2)))#114]
Results [1]: [avg(CheckOverflow((promote_precision(cast(quantity#95 as decimal(12,2))) * promote_precision(cast(list_price#96 as decimal(12,2)))), DecimalType(18,2)))#114 AS average_sales#115]

Subquery:2 Hosting operator id = 103 Hosting Expression = ss_sold_date_sk#93 IN dynamicpruning#13

Subquery:3 Hosting operator id = 108 Hosting Expression = cs_sold_date_sk#99 IN dynamicpruning#13

Subquery:4 Hosting operator id = 113 Hosting Expression = ws_sold_date_sk#105 IN dynamicpruning#13

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (126)
+- * Project (125)
   +- * Filter (124)
      +- * ColumnarToRow (123)
         +- Scan parquet default.date_dim (122)


(122) Scan parquet default.date_dim
Output [2]: [d_date_sk#46, d_week_seq#116]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(123) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#46, d_week_seq#116]

(124) Filter [codegen id : 1]
Input [2]: [d_date_sk#46, d_week_seq#116]
Condition : ((isnotnull(d_week_seq#116) AND (d_week_seq#116 = Subquery scalar-subquery#117, [id=#118])) AND isnotnull(d_date_sk#46))

(125) Project [codegen id : 1]
Output [1]: [d_date_sk#46]
Input [2]: [d_date_sk#46, d_week_seq#116]

(126) BroadcastExchange
Input [1]: [d_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#119]

Subquery:6 Hosting operator id = 124 Hosting Expression = Subquery scalar-subquery#117, [id=#118]
* Project (130)
+- * Filter (129)
   +- * ColumnarToRow (128)
      +- Scan parquet default.date_dim (127)


(127) Scan parquet default.date_dim
Output [4]: [d_week_seq#120, d_year#121, d_moy#122, d_dom#123]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(128) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#120, d_year#121, d_moy#122, d_dom#123]

(129) Filter [codegen id : 1]
Input [4]: [d_week_seq#120, d_year#121, d_moy#122, d_dom#123]
Condition : (((((isnotnull(d_year#121) AND isnotnull(d_moy#122)) AND isnotnull(d_dom#123)) AND (d_year#121 = 1999)) AND (d_moy#122 = 12)) AND (d_dom#123 = 16))

(130) Project [codegen id : 1]
Output [1]: [d_week_seq#120]
Input [4]: [d_week_seq#120, d_year#121, d_moy#122, d_dom#123]

Subquery:7 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (135)
+- * Project (134)
   +- * Filter (133)
      +- * ColumnarToRow (132)
         +- Scan parquet default.date_dim (131)


(131) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#124]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(132) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#124]

(133) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#124]
Condition : (((isnotnull(d_year#124) AND (d_year#124 >= 1998)) AND (d_year#124 <= 2000)) AND isnotnull(d_date_sk#14))

(134) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#124]

(135) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#125]

Subquery:8 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#13

Subquery:9 Hosting operator id = 44 Hosting Expression = ws_sold_date_sk#36 IN dynamicpruning#13

Subquery:10 Hosting operator id = 99 Hosting Expression = ReusedSubquery Subquery scalar-subquery#65, [id=#66]

Subquery:11 Hosting operator id = 82 Hosting Expression = ss_sold_date_sk#70 IN dynamicpruning#71
BroadcastExchange (140)
+- * Project (139)
   +- * Filter (138)
      +- * ColumnarToRow (137)
         +- Scan parquet default.date_dim (136)


(136) Scan parquet default.date_dim
Output [2]: [d_date_sk#73, d_week_seq#126]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(137) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#73, d_week_seq#126]

(138) Filter [codegen id : 1]
Input [2]: [d_date_sk#73, d_week_seq#126]
Condition : ((isnotnull(d_week_seq#126) AND (d_week_seq#126 = Subquery scalar-subquery#127, [id=#128])) AND isnotnull(d_date_sk#73))

(139) Project [codegen id : 1]
Output [1]: [d_date_sk#73]
Input [2]: [d_date_sk#73, d_week_seq#126]

(140) BroadcastExchange
Input [1]: [d_date_sk#73]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#129]

Subquery:12 Hosting operator id = 138 Hosting Expression = Subquery scalar-subquery#127, [id=#128]
* Project (144)
+- * Filter (143)
   +- * ColumnarToRow (142)
      +- Scan parquet default.date_dim (141)


(141) Scan parquet default.date_dim
Output [4]: [d_week_seq#130, d_year#131, d_moy#132, d_dom#133]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(142) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#130, d_year#131, d_moy#132, d_dom#133]

(143) Filter [codegen id : 1]
Input [4]: [d_week_seq#130, d_year#131, d_moy#132, d_dom#133]
Condition : (((((isnotnull(d_year#131) AND isnotnull(d_moy#132)) AND isnotnull(d_dom#133)) AND (d_year#131 = 1998)) AND (d_moy#132 = 12)) AND (d_dom#133 = 16))

(144) Project [codegen id : 1]
Output [1]: [d_week_seq#130]
Input [4]: [d_week_seq#130, d_year#131, d_moy#132, d_dom#133]


