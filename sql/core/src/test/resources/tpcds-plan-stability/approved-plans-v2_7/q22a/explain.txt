== Physical Plan ==
TakeOrderedAndProject (46)
+- Union (45)
   :- * HashAggregate (24)
   :  +- * HashAggregate (23)
   :     +- * HashAggregate (22)
   :        +- Exchange (21)
   :           +- * HashAggregate (20)
   :              +- * Project (19)
   :                 +- * BroadcastHashJoin Inner BuildRight (18)
   :                    :- * Project (12)
   :                    :  +- * HashAggregate (11)
   :                    :     +- * BroadcastHashJoin Inner BuildRight (10)
   :                    :        :- * BroadcastHashJoin Inner BuildRight (5)
   :                    :        :  :- * Filter (3)
   :                    :        :  :  +- * ColumnarToRow (2)
   :                    :        :  :     +- Scan parquet default.inventory (1)
   :                    :        :  +- ReusedExchange (4)
   :                    :        +- BroadcastExchange (9)
   :                    :           +- * Filter (8)
   :                    :              +- * ColumnarToRow (7)
   :                    :                 +- Scan parquet default.item (6)
   :                    +- BroadcastExchange (17)
   :                       +- * HashAggregate (16)
   :                          +- * Filter (15)
   :                             +- * ColumnarToRow (14)
   :                                +- Scan parquet default.warehouse (13)
   :- * HashAggregate (29)
   :  +- Exchange (28)
   :     +- * HashAggregate (27)
   :        +- * HashAggregate (26)
   :           +- ReusedExchange (25)
   :- * HashAggregate (34)
   :  +- Exchange (33)
   :     +- * HashAggregate (32)
   :        +- * HashAggregate (31)
   :           +- ReusedExchange (30)
   :- * HashAggregate (39)
   :  +- Exchange (38)
   :     +- * HashAggregate (37)
   :        +- * HashAggregate (36)
   :           +- ReusedExchange (35)
   +- * HashAggregate (44)
      +- Exchange (43)
         +- * HashAggregate (42)
            +- * HashAggregate (41)
               +- ReusedExchange (40)


(1) Scan parquet default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4), dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(inv_warehouse_sk), IsNotNull(inv_item_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(3) Filter [codegen id : 4]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_warehouse_sk#2) AND isnotnull(inv_item_sk#1))

(4) ReusedExchange [Reuses operator id: 50]
Output [28]: [d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(6) Scan parquet default.item
Output [22]: [i_item_sk#34, i_item_id#35, i_rec_start_date#36, i_rec_end_date#37, i_item_desc#38, i_current_price#39, i_wholesale_cost#40, i_brand_id#41, i_brand#42, i_class_id#43, i_class#44, i_category_id#45, i_category#46, i_manufact_id#47, i_manufact#48, i_size#49, i_formulation#50, i_color#51, i_units#52, i_container#53, i_manager_id#54, i_product_name#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(7) ColumnarToRow [codegen id : 2]
Input [22]: [i_item_sk#34, i_item_id#35, i_rec_start_date#36, i_rec_end_date#37, i_item_desc#38, i_current_price#39, i_wholesale_cost#40, i_brand_id#41, i_brand#42, i_class_id#43, i_class#44, i_category_id#45, i_category#46, i_manufact_id#47, i_manufact#48, i_size#49, i_formulation#50, i_color#51, i_units#52, i_container#53, i_manager_id#54, i_product_name#55]

(8) Filter [codegen id : 2]
Input [22]: [i_item_sk#34, i_item_id#35, i_rec_start_date#36, i_rec_end_date#37, i_item_desc#38, i_current_price#39, i_wholesale_cost#40, i_brand_id#41, i_brand#42, i_class_id#43, i_class#44, i_category_id#45, i_category#46, i_manufact_id#47, i_manufact#48, i_size#49, i_formulation#50, i_color#51, i_units#52, i_container#53, i_manager_id#54, i_product_name#55]
Condition : isnotnull(i_item_sk#34)

(9) BroadcastExchange
Input [22]: [i_item_sk#34, i_item_id#35, i_rec_start_date#36, i_rec_end_date#37, i_item_desc#38, i_current_price#39, i_wholesale_cost#40, i_brand_id#41, i_brand#42, i_class_id#43, i_class#44, i_category_id#45, i_category#46, i_manufact_id#47, i_manufact#48, i_size#49, i_formulation#50, i_color#51, i_units#52, i_container#53, i_manager_id#54, i_product_name#55]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#56]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#34]
Join condition: None

(11) HashAggregate [codegen id : 4]
Input [54]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33, i_item_sk#34, i_item_id#35, i_rec_start_date#36, i_rec_end_date#37, i_item_desc#38, i_current_price#39, i_wholesale_cost#40, i_brand_id#41, i_brand#42, i_class_id#43, i_class#44, i_category_id#45, i_category#46, i_manufact_id#47, i_manufact#48, i_size#49, i_formulation#50, i_color#51, i_units#52, i_container#53, i_manager_id#54, i_product_name#55]
Keys [5]: [inv_warehouse_sk#2, i_product_name#55, i_brand#42, i_class#44, i_category#46]
Functions [1]: [partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [sum#57, count#58]
Results [7]: [inv_warehouse_sk#2, i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#59, count#60]

(12) Project [codegen id : 4]
Output [6]: [inv_warehouse_sk#2, i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#59 AS _pushedexpression#61]
Input [7]: [inv_warehouse_sk#2, i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#59, count#60]

(13) Scan parquet default.warehouse
Output [14]: [w_warehouse_sk#62, w_warehouse_id#63, w_warehouse_name#64, w_warehouse_sq_ft#65, w_street_number#66, w_street_name#67, w_street_type#68, w_suite_number#69, w_city#70, w_county#71, w_state#72, w_zip#73, w_country#74, w_gmt_offset#75]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_id:string,w_warehouse_name:string,w_warehouse_sq_ft:int,w_street_number:string,w_street_name:string,w_street_type:string,w_suite_number:string,w_city:string,w_county:string,w_state:string,w_zip:string,w_country:string,w_gmt_offset:decimal(5,2)>

(14) ColumnarToRow [codegen id : 3]
Input [14]: [w_warehouse_sk#62, w_warehouse_id#63, w_warehouse_name#64, w_warehouse_sq_ft#65, w_street_number#66, w_street_name#67, w_street_type#68, w_suite_number#69, w_city#70, w_county#71, w_state#72, w_zip#73, w_country#74, w_gmt_offset#75]

(15) Filter [codegen id : 3]
Input [14]: [w_warehouse_sk#62, w_warehouse_id#63, w_warehouse_name#64, w_warehouse_sq_ft#65, w_street_number#66, w_street_name#67, w_street_type#68, w_suite_number#69, w_city#70, w_county#71, w_state#72, w_zip#73, w_country#74, w_gmt_offset#75]
Condition : isnotnull(w_warehouse_sk#62)

(16) HashAggregate [codegen id : 3]
Input [14]: [w_warehouse_sk#62, w_warehouse_id#63, w_warehouse_name#64, w_warehouse_sq_ft#65, w_street_number#66, w_street_name#67, w_street_type#68, w_suite_number#69, w_city#70, w_county#71, w_state#72, w_zip#73, w_country#74, w_gmt_offset#75]
Keys [1]: [w_warehouse_sk#62]
Functions: []
Aggregate Attributes: []
Results [1]: [w_warehouse_sk#62]

(17) BroadcastExchange
Input [1]: [w_warehouse_sk#62]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#62]
Join condition: None

(19) Project [codegen id : 4]
Output [5]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, _pushedexpression#61]
Input [7]: [inv_warehouse_sk#2, i_product_name#55, i_brand#42, i_class#44, i_category#46, _pushedexpression#61, w_warehouse_sk#62]

(20) HashAggregate [codegen id : 4]
Input [5]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, _pushedexpression#61]
Keys [4]: [i_product_name#55, i_brand#42, i_class#44, i_category#46]
Functions [1]: [partial_avg(_pushedexpression#61)]
Aggregate Attributes [2]: [sum#77, count#78]
Results [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#79, count#80]

(21) Exchange
Input [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#79, count#80]
Arguments: hashpartitioning(i_product_name#55, i_brand#42, i_class#44, i_category#46, 5), ENSURE_REQUIREMENTS, [id=#81]

(22) HashAggregate [codegen id : 5]
Input [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#79, count#80]
Keys [4]: [i_product_name#55, i_brand#42, i_class#44, i_category#46]
Functions [1]: [avg(_pushedexpression#61)]
Aggregate Attributes [1]: [avg(_pushedexpression#61)#82]
Results [5]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, avg(_pushedexpression#61)#82 AS qoh#83]

(23) HashAggregate [codegen id : 5]
Input [5]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, qoh#83]
Keys [4]: [i_product_name#55, i_brand#42, i_class#44, i_category#46]
Functions [1]: [partial_avg(qoh#83)]
Aggregate Attributes [2]: [sum#84, count#85]
Results [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#86, count#87]

(24) HashAggregate [codegen id : 5]
Input [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#86, count#87]
Keys [4]: [i_product_name#55, i_brand#42, i_class#44, i_category#46]
Functions [1]: [avg(qoh#83)]
Aggregate Attributes [1]: [avg(qoh#83)#88]
Results [5]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, avg(qoh#83)#88 AS qoh#89]

(25) ReusedExchange [Reuses operator id: 21]
Output [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#90, count#91]

(26) HashAggregate [codegen id : 10]
Input [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#90, count#91]
Keys [4]: [i_product_name#55, i_brand#42, i_class#44, i_category#46]
Functions [1]: [avg(_pushedexpression#92)]
Aggregate Attributes [1]: [avg(_pushedexpression#92)#82]
Results [4]: [i_product_name#55, i_brand#42, i_class#44, avg(_pushedexpression#92)#82 AS qoh#83]

(27) HashAggregate [codegen id : 10]
Input [4]: [i_product_name#55, i_brand#42, i_class#44, qoh#83]
Keys [3]: [i_product_name#55, i_brand#42, i_class#44]
Functions [1]: [partial_avg(qoh#83)]
Aggregate Attributes [2]: [sum#93, count#94]
Results [5]: [i_product_name#55, i_brand#42, i_class#44, sum#95, count#96]

(28) Exchange
Input [5]: [i_product_name#55, i_brand#42, i_class#44, sum#95, count#96]
Arguments: hashpartitioning(i_product_name#55, i_brand#42, i_class#44, 5), ENSURE_REQUIREMENTS, [id=#97]

(29) HashAggregate [codegen id : 11]
Input [5]: [i_product_name#55, i_brand#42, i_class#44, sum#95, count#96]
Keys [3]: [i_product_name#55, i_brand#42, i_class#44]
Functions [1]: [avg(qoh#83)]
Aggregate Attributes [1]: [avg(qoh#83)#98]
Results [5]: [i_product_name#55, i_brand#42, i_class#44, null AS i_category#99, avg(qoh#83)#98 AS qoh#100]

(30) ReusedExchange [Reuses operator id: 21]
Output [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#101, count#102]

(31) HashAggregate [codegen id : 16]
Input [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#101, count#102]
Keys [4]: [i_product_name#55, i_brand#42, i_class#44, i_category#46]
Functions [1]: [avg(_pushedexpression#103)]
Aggregate Attributes [1]: [avg(_pushedexpression#103)#82]
Results [3]: [i_product_name#55, i_brand#42, avg(_pushedexpression#103)#82 AS qoh#83]

(32) HashAggregate [codegen id : 16]
Input [3]: [i_product_name#55, i_brand#42, qoh#83]
Keys [2]: [i_product_name#55, i_brand#42]
Functions [1]: [partial_avg(qoh#83)]
Aggregate Attributes [2]: [sum#104, count#105]
Results [4]: [i_product_name#55, i_brand#42, sum#106, count#107]

(33) Exchange
Input [4]: [i_product_name#55, i_brand#42, sum#106, count#107]
Arguments: hashpartitioning(i_product_name#55, i_brand#42, 5), ENSURE_REQUIREMENTS, [id=#108]

(34) HashAggregate [codegen id : 17]
Input [4]: [i_product_name#55, i_brand#42, sum#106, count#107]
Keys [2]: [i_product_name#55, i_brand#42]
Functions [1]: [avg(qoh#83)]
Aggregate Attributes [1]: [avg(qoh#83)#109]
Results [5]: [i_product_name#55, i_brand#42, null AS i_class#110, null AS i_category#111, avg(qoh#83)#109 AS qoh#112]

(35) ReusedExchange [Reuses operator id: 21]
Output [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#113, count#114]

(36) HashAggregate [codegen id : 22]
Input [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#113, count#114]
Keys [4]: [i_product_name#55, i_brand#42, i_class#44, i_category#46]
Functions [1]: [avg(_pushedexpression#115)]
Aggregate Attributes [1]: [avg(_pushedexpression#115)#82]
Results [2]: [i_product_name#55, avg(_pushedexpression#115)#82 AS qoh#83]

(37) HashAggregate [codegen id : 22]
Input [2]: [i_product_name#55, qoh#83]
Keys [1]: [i_product_name#55]
Functions [1]: [partial_avg(qoh#83)]
Aggregate Attributes [2]: [sum#116, count#117]
Results [3]: [i_product_name#55, sum#118, count#119]

(38) Exchange
Input [3]: [i_product_name#55, sum#118, count#119]
Arguments: hashpartitioning(i_product_name#55, 5), ENSURE_REQUIREMENTS, [id=#120]

(39) HashAggregate [codegen id : 23]
Input [3]: [i_product_name#55, sum#118, count#119]
Keys [1]: [i_product_name#55]
Functions [1]: [avg(qoh#83)]
Aggregate Attributes [1]: [avg(qoh#83)#121]
Results [5]: [i_product_name#55, null AS i_brand#122, null AS i_class#123, null AS i_category#124, avg(qoh#83)#121 AS qoh#125]

(40) ReusedExchange [Reuses operator id: 21]
Output [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#126, count#127]

(41) HashAggregate [codegen id : 28]
Input [6]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, sum#126, count#127]
Keys [4]: [i_product_name#55, i_brand#42, i_class#44, i_category#46]
Functions [1]: [avg(_pushedexpression#128)]
Aggregate Attributes [1]: [avg(_pushedexpression#128)#82]
Results [1]: [avg(_pushedexpression#128)#82 AS qoh#83]

(42) HashAggregate [codegen id : 28]
Input [1]: [qoh#83]
Keys: []
Functions [1]: [partial_avg(qoh#83)]
Aggregate Attributes [2]: [sum#129, count#130]
Results [2]: [sum#131, count#132]

(43) Exchange
Input [2]: [sum#131, count#132]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#133]

(44) HashAggregate [codegen id : 29]
Input [2]: [sum#131, count#132]
Keys: []
Functions [1]: [avg(qoh#83)]
Aggregate Attributes [1]: [avg(qoh#83)#134]
Results [5]: [null AS i_product_name#135, null AS i_brand#136, null AS i_class#137, null AS i_category#138, avg(qoh#83)#134 AS qoh#139]

(45) Union

(46) TakeOrderedAndProject
Input [5]: [i_product_name#55, i_brand#42, i_class#44, i_category#46, qoh#89]
Arguments: 100, [qoh#89 ASC NULLS FIRST, i_product_name#55 ASC NULLS FIRST, i_brand#42 ASC NULLS FIRST, i_class#44 ASC NULLS FIRST, i_category#46 ASC NULLS FIRST], [i_product_name#55, i_brand#42, i_class#44, i_category#46, qoh#89]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#4 IN dynamicpruning#5
BroadcastExchange (50)
+- * Filter (49)
   +- * ColumnarToRow (48)
      +- Scan parquet default.date_dim (47)


(47) Scan parquet default.date_dim
Output [28]: [d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(48) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33]

(49) Filter [codegen id : 1]
Input [28]: [d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33]
Condition : (((isnotnull(d_month_seq#9) AND (d_month_seq#9 >= 1212)) AND (d_month_seq#9 <= 1223)) AND isnotnull(d_date_sk#6))

(50) BroadcastExchange
Input [28]: [d_date_sk#6, d_date_id#7, d_date#8, d_month_seq#9, d_week_seq#10, d_quarter_seq#11, d_year#12, d_dow#13, d_moy#14, d_dom#15, d_qoy#16, d_fy_year#17, d_fy_quarter_seq#18, d_fy_week_seq#19, d_day_name#20, d_quarter_name#21, d_holiday#22, d_weekend#23, d_following_holiday#24, d_first_dom#25, d_last_dom#26, d_same_day_ly#27, d_same_day_lq#28, d_current_day#29, d_current_week#30, d_current_month#31, d_current_quarter#32, d_current_year#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#140]


