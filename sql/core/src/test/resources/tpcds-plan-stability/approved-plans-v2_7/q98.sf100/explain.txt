== Physical Plan ==
* Sort (32)
+- Exchange (31)
   +- * Project (30)
      +- Window (29)
         +- * Sort (28)
            +- Exchange (27)
               +- * HashAggregate (26)
                  +- Exchange (25)
                     +- * HashAggregate (24)
                        +- * Project (23)
                           +- * SortMergeJoin Inner (22)
                              :- * Sort (15)
                              :  +- Exchange (14)
                              :     +- * Project (13)
                              :        +- * HashAggregate (12)
                              :           +- * SortMergeJoin Inner (11)
                              :              :- * Sort (5)
                              :              :  +- Exchange (4)
                              :              :     +- * Filter (3)
                              :              :        +- * ColumnarToRow (2)
                              :              :           +- Scan parquet default.store_sales (1)
                              :              +- * Sort (10)
                              :                 +- Exchange (9)
                              :                    +- * Filter (8)
                              :                       +- * ColumnarToRow (7)
                              :                          +- Scan parquet default.item (6)
                              +- * Sort (21)
                                 +- Exchange (20)
                                    +- * HashAggregate (19)
                                       +- * Filter (18)
                                          +- * ColumnarToRow (17)
                                             +- Scan parquet default.date_dim (16)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 1]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : isnotnull(ss_item_sk#2)

(4) Exchange
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#24]

(5) Sort [codegen id : 2]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [In(i_category, [Books                                             ,Home                                              ,Sports                                            ]), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(7) ColumnarToRow [codegen id : 3]
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]

(8) Filter [codegen id : 3]
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Condition : (i_category#37 IN (Sports                                            ,Books                                             ,Home                                              ) AND isnotnull(i_item_sk#25))

(9) Exchange
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Arguments: hashpartitioning(i_item_sk#25, 5), ENSURE_REQUIREMENTS, [id=#47]

(10) Sort [codegen id : 4]
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Arguments: [i_item_sk#25 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#25]
Join condition: None

(12) HashAggregate [codegen id : 5]
Input [45]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Keys [6]: [ss_sold_date_sk#23, i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#15))]
Aggregate Attributes [1]: [sum#48]
Results [7]: [ss_sold_date_sk#23, i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, sum#49]

(13) Project [codegen id : 5]
Output [7]: [ss_sold_date_sk#23, i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, sum#49 AS _pushedexpression#50]
Input [7]: [ss_sold_date_sk#23, i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, sum#49]

(14) Exchange
Input [7]: [ss_sold_date_sk#23, i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, _pushedexpression#50]
Arguments: hashpartitioning(ss_sold_date_sk#23, 5), ENSURE_REQUIREMENTS, [id=#51]

(15) Sort [codegen id : 6]
Input [7]: [ss_sold_date_sk#23, i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, _pushedexpression#50]
Arguments: [ss_sold_date_sk#23 ASC NULLS FIRST], false, 0

(16) Scan parquet default.date_dim
Output [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-22), LessThanOrEqual(d_date,1999-03-24), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(17) ColumnarToRow [codegen id : 7]
Input [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]

(18) Filter [codegen id : 7]
Input [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]
Condition : (((isnotnull(d_date#54) AND (d_date#54 >= 1999-02-22)) AND (d_date#54 <= 1999-03-24)) AND isnotnull(d_date_sk#52))

(19) HashAggregate [codegen id : 7]
Input [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]
Keys [1]: [d_date_sk#52]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#52]

(20) Exchange
Input [1]: [d_date_sk#52]
Arguments: hashpartitioning(d_date_sk#52, 5), ENSURE_REQUIREMENTS, [id=#80]

(21) Sort [codegen id : 8]
Input [1]: [d_date_sk#52]
Arguments: [d_date_sk#52 ASC NULLS FIRST], false, 0

(22) SortMergeJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#52]
Join condition: None

(23) Project [codegen id : 9]
Output [6]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, _pushedexpression#81]
Input [8]: [ss_sold_date_sk#23, i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, _pushedexpression#50, d_date_sk#52]

(24) HashAggregate [codegen id : 9]
Input [6]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, _pushedexpression#81]
Keys [5]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30]
Functions [1]: [partial_sum(_pushedexpression#81)]
Aggregate Attributes [2]: [sum#82, isEmpty#83]
Results [7]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, sum#84, isEmpty#85]

(25) Exchange
Input [7]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, sum#84, isEmpty#85]
Arguments: hashpartitioning(i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, 5), ENSURE_REQUIREMENTS, [id=#86]

(26) HashAggregate [codegen id : 10]
Input [7]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, sum#84, isEmpty#85]
Keys [5]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30]
Functions [1]: [sum(_pushedexpression#81)]
Aggregate Attributes [1]: [sum(_pushedexpression#81)#87]
Results [8]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, cast(sum(_pushedexpression#81)#87 as decimal(17,2)) AS itemrevenue#88, cast(sum(_pushedexpression#81)#87 as decimal(17,2)) AS _w0#89, cast(sum(_pushedexpression#81)#87 as decimal(17,2)) AS _w1#90]

(27) Exchange
Input [8]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, itemrevenue#88, _w0#89, _w1#90]
Arguments: hashpartitioning(i_class#35, 5), ENSURE_REQUIREMENTS, [id=#91]

(28) Sort [codegen id : 11]
Input [8]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, itemrevenue#88, _w0#89, _w1#90]
Arguments: [i_class#35 ASC NULLS FIRST], false, 0

(29) Window
Input [8]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, itemrevenue#88, _w0#89, _w1#90]
Arguments: [sum(_w1#90) windowspecdefinition(i_class#35, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#92], [i_class#35]

(30) Project [codegen id : 12]
Output [7]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, itemrevenue#88, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#89) * 100.00), DecimalType(21,2)) as decimal(27,2))) / promote_precision(_we0#92)), DecimalType(38,17)) AS revenueratio#93]
Input [9]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, itemrevenue#88, _w0#89, _w1#90, _we0#92]

(31) Exchange
Input [7]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, itemrevenue#88, revenueratio#93]
Arguments: rangepartitioning(i_category#37 ASC NULLS FIRST, i_class#35 ASC NULLS FIRST, i_item_id#26 ASC NULLS FIRST, i_item_desc#29 ASC NULLS FIRST, revenueratio#93 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#94]

(32) Sort [codegen id : 13]
Input [7]: [i_item_id#26, i_item_desc#29, i_category#37, i_class#35, i_current_price#30, itemrevenue#88, revenueratio#93]
Arguments: [i_category#37 ASC NULLS FIRST, i_class#35 ASC NULLS FIRST, i_item_id#26 ASC NULLS FIRST, i_item_desc#29 ASC NULLS FIRST, revenueratio#93 ASC NULLS FIRST], true, 0

