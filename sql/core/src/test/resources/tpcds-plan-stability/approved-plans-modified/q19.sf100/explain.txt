== Physical Plan ==
TakeOrderedAndProject (43)
+- * HashAggregate (42)
   +- Exchange (41)
      +- * HashAggregate (40)
         +- * Project (39)
            +- * BroadcastHashJoin Inner BuildRight (38)
               :- * Project (32)
               :  +- HashAggregate (31)
               :     +- Project (30)
               :        +- BroadcastHashJoin Inner BuildRight (29)
               :           :- * SortMergeJoin Inner (24)
               :           :  :- * Sort (18)
               :           :  :  +- Exchange (17)
               :           :  :     +- * SortMergeJoin Inner (16)
               :           :  :        :- * Sort (10)
               :           :  :        :  +- Exchange (9)
               :           :  :        :     +- * BroadcastHashJoin Inner BuildLeft (8)
               :           :  :        :        :- BroadcastExchange (4)
               :           :  :        :        :  +- * Filter (3)
               :           :  :        :        :     +- * ColumnarToRow (2)
               :           :  :        :        :        +- Scan parquet default.date_dim (1)
               :           :  :        :        +- * Filter (7)
               :           :  :        :           +- * ColumnarToRow (6)
               :           :  :        :              +- Scan parquet default.store_sales (5)
               :           :  :        +- * Sort (15)
               :           :  :           +- Exchange (14)
               :           :  :              +- * Filter (13)
               :           :  :                 +- * ColumnarToRow (12)
               :           :  :                    +- Scan parquet default.customer (11)
               :           :  +- * Sort (23)
               :           :     +- Exchange (22)
               :           :        +- * Filter (21)
               :           :           +- * ColumnarToRow (20)
               :           :              +- Scan parquet default.customer_address (19)
               :           +- BroadcastExchange (28)
               :              +- * Filter (27)
               :                 +- * ColumnarToRow (26)
               :                    +- Scan parquet default.item (25)
               +- BroadcastExchange (37)
                  +- * HashAggregate (36)
                     +- * Filter (35)
                        +- * ColumnarToRow (34)
                           +- Scan parquet default.store (33)


(1) Scan parquet default.date_dim
Output [28]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), GreaterThanOrEqual(d_date_sk,2451484), LessThanOrEqual(d_date_sk,2451513), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(2) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28]

(3) Filter [codegen id : 1]
Input [28]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28]
Condition : ((((((isnotnull(d_moy#9) AND isnotnull(d_year#7)) AND (d_moy#9 = 11)) AND (d_year#7 = 1999)) AND (d_date_sk#1 >= 2451484)) AND (d_date_sk#1 <= 2451513)) AND isnotnull(d_date_sk#1))

(4) BroadcastExchange
Input [28]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(5) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#52), (ss_sold_date_sk#52 >= 2451484), (ss_sold_date_sk#52 <= 2451513), dynamicpruningexpression(ss_sold_date_sk#52 IN dynamicpruning#53)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(6) ColumnarToRow
Input [23]: [ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52]

(7) Filter
Input [23]: [ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52]
Condition : ((isnotnull(ss_store_sk#36) AND isnotnull(ss_item_sk#31)) AND isnotnull(ss_customer_sk#32))

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#52]
Join condition: None

(9) Exchange
Input [51]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28, ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52]
Arguments: hashpartitioning(ss_customer_sk#32, 5), ENSURE_REQUIREMENTS, [id=#54]

(10) Sort [codegen id : 3]
Input [51]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28, ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52]
Arguments: [ss_customer_sk#32 ASC NULLS FIRST], false, 0

(11) Scan parquet default.customer
Output [18]: [c_customer_sk#55, c_customer_id#56, c_current_cdemo_sk#57, c_current_hdemo_sk#58, c_current_addr_sk#59, c_first_shipto_date_sk#60, c_first_sales_date_sk#61, c_salutation#62, c_first_name#63, c_last_name#64, c_preferred_cust_flag#65, c_birth_day#66, c_birth_month#67, c_birth_year#68, c_birth_country#69, c_login#70, c_email_address#71, c_last_review_date#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(12) ColumnarToRow [codegen id : 4]
Input [18]: [c_customer_sk#55, c_customer_id#56, c_current_cdemo_sk#57, c_current_hdemo_sk#58, c_current_addr_sk#59, c_first_shipto_date_sk#60, c_first_sales_date_sk#61, c_salutation#62, c_first_name#63, c_last_name#64, c_preferred_cust_flag#65, c_birth_day#66, c_birth_month#67, c_birth_year#68, c_birth_country#69, c_login#70, c_email_address#71, c_last_review_date#72]

(13) Filter [codegen id : 4]
Input [18]: [c_customer_sk#55, c_customer_id#56, c_current_cdemo_sk#57, c_current_hdemo_sk#58, c_current_addr_sk#59, c_first_shipto_date_sk#60, c_first_sales_date_sk#61, c_salutation#62, c_first_name#63, c_last_name#64, c_preferred_cust_flag#65, c_birth_day#66, c_birth_month#67, c_birth_year#68, c_birth_country#69, c_login#70, c_email_address#71, c_last_review_date#72]
Condition : (isnotnull(c_customer_sk#55) AND isnotnull(c_current_addr_sk#59))

(14) Exchange
Input [18]: [c_customer_sk#55, c_customer_id#56, c_current_cdemo_sk#57, c_current_hdemo_sk#58, c_current_addr_sk#59, c_first_shipto_date_sk#60, c_first_sales_date_sk#61, c_salutation#62, c_first_name#63, c_last_name#64, c_preferred_cust_flag#65, c_birth_day#66, c_birth_month#67, c_birth_year#68, c_birth_country#69, c_login#70, c_email_address#71, c_last_review_date#72]
Arguments: hashpartitioning(c_customer_sk#55, 5), ENSURE_REQUIREMENTS, [id=#73]

(15) Sort [codegen id : 5]
Input [18]: [c_customer_sk#55, c_customer_id#56, c_current_cdemo_sk#57, c_current_hdemo_sk#58, c_current_addr_sk#59, c_first_shipto_date_sk#60, c_first_sales_date_sk#61, c_salutation#62, c_first_name#63, c_last_name#64, c_preferred_cust_flag#65, c_birth_day#66, c_birth_month#67, c_birth_year#68, c_birth_country#69, c_login#70, c_email_address#71, c_last_review_date#72]
Arguments: [c_customer_sk#55 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#32]
Right keys [1]: [c_customer_sk#55]
Join condition: None

(17) Exchange
Input [69]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28, ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52, c_customer_sk#55, c_customer_id#56, c_current_cdemo_sk#57, c_current_hdemo_sk#58, c_current_addr_sk#59, c_first_shipto_date_sk#60, c_first_sales_date_sk#61, c_salutation#62, c_first_name#63, c_last_name#64, c_preferred_cust_flag#65, c_birth_day#66, c_birth_month#67, c_birth_year#68, c_birth_country#69, c_login#70, c_email_address#71, c_last_review_date#72]
Arguments: hashpartitioning(c_current_addr_sk#59, 5), ENSURE_REQUIREMENTS, [id=#74]

(18) Sort [codegen id : 7]
Input [69]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28, ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52, c_customer_sk#55, c_customer_id#56, c_current_cdemo_sk#57, c_current_hdemo_sk#58, c_current_addr_sk#59, c_first_shipto_date_sk#60, c_first_sales_date_sk#61, c_salutation#62, c_first_name#63, c_last_name#64, c_preferred_cust_flag#65, c_birth_day#66, c_birth_month#67, c_birth_year#68, c_birth_country#69, c_login#70, c_email_address#71, c_last_review_date#72]
Arguments: [c_current_addr_sk#59 ASC NULLS FIRST], false, 0

(19) Scan parquet default.customer_address
Output [13]: [ca_address_sk#75, ca_address_id#76, ca_street_number#77, ca_street_name#78, ca_street_type#79, ca_suite_number#80, ca_city#81, ca_county#82, ca_state#83, ca_zip#84, ca_country#85, ca_gmt_offset#86, ca_location_type#87]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(20) ColumnarToRow [codegen id : 8]
Input [13]: [ca_address_sk#75, ca_address_id#76, ca_street_number#77, ca_street_name#78, ca_street_type#79, ca_suite_number#80, ca_city#81, ca_county#82, ca_state#83, ca_zip#84, ca_country#85, ca_gmt_offset#86, ca_location_type#87]

(21) Filter [codegen id : 8]
Input [13]: [ca_address_sk#75, ca_address_id#76, ca_street_number#77, ca_street_name#78, ca_street_type#79, ca_suite_number#80, ca_city#81, ca_county#82, ca_state#83, ca_zip#84, ca_country#85, ca_gmt_offset#86, ca_location_type#87]
Condition : (isnotnull(ca_address_sk#75) AND isnotnull(ca_zip#84))

(22) Exchange
Input [13]: [ca_address_sk#75, ca_address_id#76, ca_street_number#77, ca_street_name#78, ca_street_type#79, ca_suite_number#80, ca_city#81, ca_county#82, ca_state#83, ca_zip#84, ca_country#85, ca_gmt_offset#86, ca_location_type#87]
Arguments: hashpartitioning(ca_address_sk#75, 5), ENSURE_REQUIREMENTS, [id=#88]

(23) Sort [codegen id : 9]
Input [13]: [ca_address_sk#75, ca_address_id#76, ca_street_number#77, ca_street_name#78, ca_street_type#79, ca_suite_number#80, ca_city#81, ca_county#82, ca_state#83, ca_zip#84, ca_country#85, ca_gmt_offset#86, ca_location_type#87]
Arguments: [ca_address_sk#75 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_current_addr_sk#59]
Right keys [1]: [ca_address_sk#75]
Join condition: None

(25) Scan parquet default.item
Output [22]: [i_item_sk#89, i_item_id#90, i_rec_start_date#91, i_rec_end_date#92, i_item_desc#93, i_current_price#94, i_wholesale_cost#95, i_brand_id#96, i_brand#97, i_class_id#98, i_class#99, i_category_id#100, i_category#101, i_manufact_id#102, i_manufact#103, i_size#104, i_formulation#105, i_color#106, i_units#107, i_container#108, i_manager_id#109, i_product_name#110]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(26) ColumnarToRow [codegen id : 11]
Input [22]: [i_item_sk#89, i_item_id#90, i_rec_start_date#91, i_rec_end_date#92, i_item_desc#93, i_current_price#94, i_wholesale_cost#95, i_brand_id#96, i_brand#97, i_class_id#98, i_class#99, i_category_id#100, i_category#101, i_manufact_id#102, i_manufact#103, i_size#104, i_formulation#105, i_color#106, i_units#107, i_container#108, i_manager_id#109, i_product_name#110]

(27) Filter [codegen id : 11]
Input [22]: [i_item_sk#89, i_item_id#90, i_rec_start_date#91, i_rec_end_date#92, i_item_desc#93, i_current_price#94, i_wholesale_cost#95, i_brand_id#96, i_brand#97, i_class_id#98, i_class#99, i_category_id#100, i_category#101, i_manufact_id#102, i_manufact#103, i_size#104, i_formulation#105, i_color#106, i_units#107, i_container#108, i_manager_id#109, i_product_name#110]
Condition : ((isnotnull(i_manager_id#109) AND (i_manager_id#109 = 7)) AND isnotnull(i_item_sk#89))

(28) BroadcastExchange
Input [22]: [i_item_sk#89, i_item_id#90, i_rec_start_date#91, i_rec_end_date#92, i_item_desc#93, i_current_price#94, i_wholesale_cost#95, i_brand_id#96, i_brand#97, i_class_id#98, i_class#99, i_category_id#100, i_category#101, i_manufact_id#102, i_manufact#103, i_size#104, i_formulation#105, i_color#106, i_units#107, i_container#108, i_manager_id#109, i_product_name#110]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#111]

(29) BroadcastHashJoin
Left keys [1]: [ss_item_sk#31]
Right keys [1]: [i_item_sk#89]
Join condition: None

(30) Project
Output [104]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28, ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52, i_item_sk#89, i_item_id#90, i_rec_start_date#91, i_rec_end_date#92, i_item_desc#93, i_current_price#94, i_wholesale_cost#95, i_brand_id#96, i_brand#97, i_class_id#98, i_class#99, i_category_id#100, i_category#101, i_manufact_id#102, i_manufact#103, i_size#104, i_formulation#105, i_color#106, i_units#107, i_container#108, i_manager_id#109, i_product_name#110, c_customer_sk#55, c_customer_id#56, c_current_cdemo_sk#57, c_current_hdemo_sk#58, c_current_addr_sk#59, c_first_shipto_date_sk#60, c_first_sales_date_sk#61, c_salutation#62, c_first_name#63, c_last_name#64, c_preferred_cust_flag#65, c_birth_day#66, c_birth_month#67, c_birth_year#68, c_birth_country#69, c_login#70, c_email_address#71, c_last_review_date#72, ca_address_sk#75, ca_address_id#76, ca_street_number#77, ca_street_name#78, ca_street_type#79, ca_suite_number#80, ca_city#81, ca_county#82, ca_state#83, ca_zip#84, ca_country#85, ca_gmt_offset#86, ca_location_type#87]
Input [104]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28, ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52, c_customer_sk#55, c_customer_id#56, c_current_cdemo_sk#57, c_current_hdemo_sk#58, c_current_addr_sk#59, c_first_shipto_date_sk#60, c_first_sales_date_sk#61, c_salutation#62, c_first_name#63, c_last_name#64, c_preferred_cust_flag#65, c_birth_day#66, c_birth_month#67, c_birth_year#68, c_birth_country#69, c_login#70, c_email_address#71, c_last_review_date#72, ca_address_sk#75, ca_address_id#76, ca_street_number#77, ca_street_name#78, ca_street_type#79, ca_suite_number#80, ca_city#81, ca_county#82, ca_state#83, ca_zip#84, ca_country#85, ca_gmt_offset#86, ca_location_type#87, i_item_sk#89, i_item_id#90, i_rec_start_date#91, i_rec_end_date#92, i_item_desc#93, i_current_price#94, i_wholesale_cost#95, i_brand_id#96, i_brand#97, i_class_id#98, i_class#99, i_category_id#100, i_category#101, i_manufact_id#102, i_manufact#103, i_size#104, i_formulation#105, i_color#106, i_units#107, i_container#108, i_manager_id#109, i_product_name#110]

(31) HashAggregate
Input [104]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28, ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52, i_item_sk#89, i_item_id#90, i_rec_start_date#91, i_rec_end_date#92, i_item_desc#93, i_current_price#94, i_wholesale_cost#95, i_brand_id#96, i_brand#97, i_class_id#98, i_class#99, i_category_id#100, i_category#101, i_manufact_id#102, i_manufact#103, i_size#104, i_formulation#105, i_color#106, i_units#107, i_container#108, i_manager_id#109, i_product_name#110, c_customer_sk#55, c_customer_id#56, c_current_cdemo_sk#57, c_current_hdemo_sk#58, c_current_addr_sk#59, c_first_shipto_date_sk#60, c_first_sales_date_sk#61, c_salutation#62, c_first_name#63, c_last_name#64, c_preferred_cust_flag#65, c_birth_day#66, c_birth_month#67, c_birth_year#68, c_birth_country#69, c_login#70, c_email_address#71, c_last_review_date#72, ca_address_sk#75, ca_address_id#76, ca_street_number#77, ca_street_name#78, ca_street_type#79, ca_suite_number#80, ca_city#81, ca_county#82, ca_state#83, ca_zip#84, ca_country#85, ca_gmt_offset#86, ca_location_type#87]
Keys [6]: [ca_zip#84, ss_store_sk#36, i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#44))]
Aggregate Attributes [1]: [sum#112]
Results [7]: [ca_zip#84, ss_store_sk#36, i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103, sum#113]

(32) Project [codegen id : 13]
Output [7]: [ca_zip#84, ss_store_sk#36, i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103, sum#113 AS _pushedexpression#114]
Input [7]: [ca_zip#84, ss_store_sk#36, i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103, sum#113]

(33) Scan parquet default.store
Output [29]: [s_store_sk#115, s_store_id#116, s_rec_start_date#117, s_rec_end_date#118, s_closed_date_sk#119, s_store_name#120, s_number_employees#121, s_floor_space#122, s_hours#123, s_manager#124, s_market_id#125, s_geography_class#126, s_market_desc#127, s_market_manager#128, s_division_id#129, s_division_name#130, s_company_id#131, s_company_name#132, s_street_number#133, s_street_name#134, s_street_type#135, s_suite_number#136, s_city#137, s_county#138, s_state#139, s_zip#140, s_country#141, s_gmt_offset#142, s_tax_percentage#143]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(34) ColumnarToRow [codegen id : 12]
Input [29]: [s_store_sk#115, s_store_id#116, s_rec_start_date#117, s_rec_end_date#118, s_closed_date_sk#119, s_store_name#120, s_number_employees#121, s_floor_space#122, s_hours#123, s_manager#124, s_market_id#125, s_geography_class#126, s_market_desc#127, s_market_manager#128, s_division_id#129, s_division_name#130, s_company_id#131, s_company_name#132, s_street_number#133, s_street_name#134, s_street_type#135, s_suite_number#136, s_city#137, s_county#138, s_state#139, s_zip#140, s_country#141, s_gmt_offset#142, s_tax_percentage#143]

(35) Filter [codegen id : 12]
Input [29]: [s_store_sk#115, s_store_id#116, s_rec_start_date#117, s_rec_end_date#118, s_closed_date_sk#119, s_store_name#120, s_number_employees#121, s_floor_space#122, s_hours#123, s_manager#124, s_market_id#125, s_geography_class#126, s_market_desc#127, s_market_manager#128, s_division_id#129, s_division_name#130, s_company_id#131, s_company_name#132, s_street_number#133, s_street_name#134, s_street_type#135, s_suite_number#136, s_city#137, s_county#138, s_state#139, s_zip#140, s_country#141, s_gmt_offset#142, s_tax_percentage#143]
Condition : (isnotnull(s_zip#140) AND isnotnull(s_store_sk#115))

(36) HashAggregate [codegen id : 12]
Input [29]: [s_store_sk#115, s_store_id#116, s_rec_start_date#117, s_rec_end_date#118, s_closed_date_sk#119, s_store_name#120, s_number_employees#121, s_floor_space#122, s_hours#123, s_manager#124, s_market_id#125, s_geography_class#126, s_market_desc#127, s_market_manager#128, s_division_id#129, s_division_name#130, s_company_id#131, s_company_name#132, s_street_number#133, s_street_name#134, s_street_type#135, s_suite_number#136, s_city#137, s_county#138, s_state#139, s_zip#140, s_country#141, s_gmt_offset#142, s_tax_percentage#143]
Keys [2]: [s_store_sk#115, s_zip#140]
Functions: []
Aggregate Attributes: []
Results [2]: [s_store_sk#115, s_zip#140]

(37) BroadcastExchange
Input [2]: [s_store_sk#115, s_zip#140]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#144]

(38) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_store_sk#36]
Right keys [1]: [s_store_sk#115]
Join condition: NOT (substr(ca_zip#84, 1, 5) = substr(s_zip#140, 1, 5))

(39) Project [codegen id : 13]
Output [5]: [i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103, _pushedexpression#145]
Input [9]: [ca_zip#84, ss_store_sk#36, i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103, _pushedexpression#114, s_store_sk#115, s_zip#140]

(40) HashAggregate [codegen id : 13]
Input [5]: [i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103, _pushedexpression#145]
Keys [4]: [i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103]
Functions [1]: [partial_sum(_pushedexpression#145)]
Aggregate Attributes [2]: [sum#146, isEmpty#147]
Results [6]: [i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103, sum#148, isEmpty#149]

(41) Exchange
Input [6]: [i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103, sum#148, isEmpty#149]
Arguments: hashpartitioning(i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103, 5), ENSURE_REQUIREMENTS, [id=#150]

(42) HashAggregate [codegen id : 14]
Input [6]: [i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103, sum#148, isEmpty#149]
Keys [4]: [i_brand#97, i_brand_id#96, i_manufact_id#102, i_manufact#103]
Functions [1]: [sum(_pushedexpression#145)]
Aggregate Attributes [1]: [sum(_pushedexpression#145)#151]
Results [5]: [i_brand_id#96 AS brand_id#152, i_brand#97 AS brand#153, i_manufact_id#102, i_manufact#103, cast(sum(_pushedexpression#145)#151 as decimal(17,2)) AS ext_price#154]

(43) TakeOrderedAndProject
Input [5]: [brand_id#152, brand#153, i_manufact_id#102, i_manufact#103, ext_price#154]
Arguments: 100, [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#102 ASC NULLS FIRST, i_manufact#103 ASC NULLS FIRST], [brand_id#152, brand#153, i_manufact_id#102, i_manufact#103, ext_price#154]

===== Subqueries =====

Subquery:1 Hosting operator id = 5 Hosting Expression = ss_sold_date_sk#52 IN dynamicpruning#53
ReusedExchange (44)


(44) ReusedExchange [Reuses operator id: 4]
Output [28]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28]


