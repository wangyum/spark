== Physical Plan ==
TakeOrderedAndProject (32)
+- * Project (31)
   +- * SortMergeJoin Inner (30)
      :- * Sort (24)
      :  +- Exchange (23)
      :     +- * HashAggregate (22)
      :        +- Exchange (21)
      :           +- * HashAggregate (20)
      :              +- * Project (19)
      :                 +- * BroadcastHashJoin Inner BuildRight (18)
      :                    :- * Project (12)
      :                    :  +- * HashAggregate (11)
      :                    :     +- * BroadcastHashJoin Inner BuildRight (10)
      :                    :        :- * BroadcastHashJoin Inner BuildRight (5)
      :                    :        :  :- * Filter (3)
      :                    :        :  :  +- * ColumnarToRow (2)
      :                    :        :  :     +- Scan parquet default.store_sales (1)
      :                    :        :  +- ReusedExchange (4)
      :                    :        +- BroadcastExchange (9)
      :                    :           +- * Filter (8)
      :                    :              +- * ColumnarToRow (7)
      :                    :                 +- Scan parquet default.store (6)
      :                    +- BroadcastExchange (17)
      :                       +- * HashAggregate (16)
      :                          +- * Filter (15)
      :                             +- * ColumnarToRow (14)
      :                                +- Scan parquet default.household_demographics (13)
      +- * Sort (29)
         +- Exchange (28)
            +- * Filter (27)
               +- * ColumnarToRow (26)
                  +- Scan parquet default.customer (25)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23), (ss_sold_date_sk#23 >= 2450819), (ss_sold_date_sk#23 <= 2451904), dynamicpruningexpression(ss_sold_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 4]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : ((isnotnull(ss_store_sk#7) AND isnotnull(ss_hdemo_sk#5)) AND isnotnull(ss_customer_sk#3))

(4) ReusedExchange [Reuses operator id: 36]
Output [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#25]
Join condition: None

(6) Scan parquet default.store
Output [29]: [s_store_sk#53, s_store_id#54, s_rec_start_date#55, s_rec_end_date#56, s_closed_date_sk#57, s_store_name#58, s_number_employees#59, s_floor_space#60, s_hours#61, s_manager#62, s_market_id#63, s_geography_class#64, s_market_desc#65, s_market_manager#66, s_division_id#67, s_division_name#68, s_company_id#69, s_company_name#70, s_street_number#71, s_street_name#72, s_street_type#73, s_suite_number#74, s_city#75, s_county#76, s_state#77, s_zip#78, s_country#79, s_gmt_offset#80, s_tax_percentage#81]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_number_employees), GreaterThanOrEqual(s_number_employees,200), LessThanOrEqual(s_number_employees,295), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(7) ColumnarToRow [codegen id : 2]
Input [29]: [s_store_sk#53, s_store_id#54, s_rec_start_date#55, s_rec_end_date#56, s_closed_date_sk#57, s_store_name#58, s_number_employees#59, s_floor_space#60, s_hours#61, s_manager#62, s_market_id#63, s_geography_class#64, s_market_desc#65, s_market_manager#66, s_division_id#67, s_division_name#68, s_company_id#69, s_company_name#70, s_street_number#71, s_street_name#72, s_street_type#73, s_suite_number#74, s_city#75, s_county#76, s_state#77, s_zip#78, s_country#79, s_gmt_offset#80, s_tax_percentage#81]

(8) Filter [codegen id : 2]
Input [29]: [s_store_sk#53, s_store_id#54, s_rec_start_date#55, s_rec_end_date#56, s_closed_date_sk#57, s_store_name#58, s_number_employees#59, s_floor_space#60, s_hours#61, s_manager#62, s_market_id#63, s_geography_class#64, s_market_desc#65, s_market_manager#66, s_division_id#67, s_division_name#68, s_company_id#69, s_company_name#70, s_street_number#71, s_street_name#72, s_street_type#73, s_suite_number#74, s_city#75, s_county#76, s_state#77, s_zip#78, s_country#79, s_gmt_offset#80, s_tax_percentage#81]
Condition : (((isnotnull(s_number_employees#59) AND (s_number_employees#59 >= 200)) AND (s_number_employees#59 <= 295)) AND isnotnull(s_store_sk#53))

(9) BroadcastExchange
Input [29]: [s_store_sk#53, s_store_id#54, s_rec_start_date#55, s_rec_end_date#56, s_closed_date_sk#57, s_store_name#58, s_number_employees#59, s_floor_space#60, s_hours#61, s_manager#62, s_market_id#63, s_geography_class#64, s_market_desc#65, s_market_manager#66, s_division_id#67, s_division_name#68, s_company_id#69, s_company_name#70, s_street_number#71, s_street_name#72, s_street_type#73, s_suite_number#74, s_city#75, s_county#76, s_state#77, s_zip#78, s_country#79, s_gmt_offset#80, s_tax_percentage#81]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#82]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#53]
Join condition: None

(11) HashAggregate [codegen id : 4]
Input [80]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52, s_store_sk#53, s_store_id#54, s_rec_start_date#55, s_rec_end_date#56, s_closed_date_sk#57, s_store_name#58, s_number_employees#59, s_floor_space#60, s_hours#61, s_manager#62, s_market_id#63, s_geography_class#64, s_market_desc#65, s_market_manager#66, s_division_id#67, s_division_name#68, s_company_id#69, s_company_name#70, s_street_number#71, s_street_name#72, s_street_type#73, s_suite_number#74, s_city#75, s_county#76, s_state#77, s_zip#78, s_country#79, s_gmt_offset#80, s_tax_percentage#81]
Keys [5]: [ss_hdemo_sk#5, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#19)), partial_sum(UnscaledValue(ss_net_profit#22))]
Aggregate Attributes [2]: [sum#83, sum#84]
Results [7]: [ss_hdemo_sk#5, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75, sum#85, sum#86]

(12) Project [codegen id : 4]
Output [7]: [ss_hdemo_sk#5, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75, sum#85 AS _pushedexpression#87, sum#86 AS _pushedexpression#88]
Input [7]: [ss_hdemo_sk#5, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75, sum#85, sum#86]

(13) Scan parquet default.household_demographics
Output [5]: [hd_demo_sk#89, hd_income_band_sk#90, hd_buy_potential#91, hd_dep_count#92, hd_vehicle_count#93]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,8),GreaterThan(hd_vehicle_count,0)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int,hd_buy_potential:string,hd_dep_count:int,hd_vehicle_count:int>

(14) ColumnarToRow [codegen id : 3]
Input [5]: [hd_demo_sk#89, hd_income_band_sk#90, hd_buy_potential#91, hd_dep_count#92, hd_vehicle_count#93]

(15) Filter [codegen id : 3]
Input [5]: [hd_demo_sk#89, hd_income_band_sk#90, hd_buy_potential#91, hd_dep_count#92, hd_vehicle_count#93]
Condition : (((hd_dep_count#92 = 8) OR (hd_vehicle_count#93 > 0)) AND isnotnull(hd_demo_sk#89))

(16) HashAggregate [codegen id : 3]
Input [5]: [hd_demo_sk#89, hd_income_band_sk#90, hd_buy_potential#91, hd_dep_count#92, hd_vehicle_count#93]
Keys [1]: [hd_demo_sk#89]
Functions: []
Aggregate Attributes: []
Results [1]: [hd_demo_sk#89]

(17) BroadcastExchange
Input [1]: [hd_demo_sk#89]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#94]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_hdemo_sk#5]
Right keys [1]: [hd_demo_sk#89]
Join condition: None

(19) Project [codegen id : 4]
Output [6]: [ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75, _pushedexpression#95, _pushedexpression#96]
Input [8]: [ss_hdemo_sk#5, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75, _pushedexpression#87, _pushedexpression#88, hd_demo_sk#89]

(20) HashAggregate [codegen id : 4]
Input [6]: [ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75, _pushedexpression#95, _pushedexpression#96]
Keys [4]: [ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75]
Functions [2]: [partial_sum(_pushedexpression#95), partial_sum(_pushedexpression#96)]
Aggregate Attributes [4]: [sum#97, isEmpty#98, sum#99, isEmpty#100]
Results [8]: [ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75, sum#101, isEmpty#102, sum#103, isEmpty#104]

(21) Exchange
Input [8]: [ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75, sum#101, isEmpty#102, sum#103, isEmpty#104]
Arguments: hashpartitioning(ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75, 5), ENSURE_REQUIREMENTS, [id=#105]

(22) HashAggregate [codegen id : 5]
Input [8]: [ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75, sum#101, isEmpty#102, sum#103, isEmpty#104]
Keys [4]: [ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, s_city#75]
Functions [2]: [sum(_pushedexpression#95), sum(_pushedexpression#96)]
Aggregate Attributes [2]: [sum(_pushedexpression#95)#106, sum(_pushedexpression#96)#107]
Results [5]: [ss_ticket_number#9, ss_customer_sk#3, s_city#75, cast(sum(_pushedexpression#95)#106 as decimal(17,2)) AS amt#108, cast(sum(_pushedexpression#96)#107 as decimal(17,2)) AS profit#109]

(23) Exchange
Input [5]: [ss_ticket_number#9, ss_customer_sk#3, s_city#75, amt#108, profit#109]
Arguments: hashpartitioning(ss_customer_sk#3, 5), ENSURE_REQUIREMENTS, [id=#110]

(24) Sort [codegen id : 6]
Input [5]: [ss_ticket_number#9, ss_customer_sk#3, s_city#75, amt#108, profit#109]
Arguments: [ss_customer_sk#3 ASC NULLS FIRST], false, 0

(25) Scan parquet default.customer
Output [3]: [c_customer_sk#111, c_first_name#112, c_last_name#113]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(26) ColumnarToRow [codegen id : 7]
Input [3]: [c_customer_sk#111, c_first_name#112, c_last_name#113]

(27) Filter [codegen id : 7]
Input [3]: [c_customer_sk#111, c_first_name#112, c_last_name#113]
Condition : isnotnull(c_customer_sk#111)

(28) Exchange
Input [3]: [c_customer_sk#111, c_first_name#112, c_last_name#113]
Arguments: hashpartitioning(c_customer_sk#111, 5), ENSURE_REQUIREMENTS, [id=#114]

(29) Sort [codegen id : 8]
Input [3]: [c_customer_sk#111, c_first_name#112, c_last_name#113]
Arguments: [c_customer_sk#111 ASC NULLS FIRST], false, 0

(30) SortMergeJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#3]
Right keys [1]: [c_customer_sk#111]
Join condition: None

(31) Project [codegen id : 9]
Output [7]: [c_last_name#113, c_first_name#112, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#115, ss_ticket_number#9, amt#108, profit#109, s_city#75]
Input [8]: [ss_ticket_number#9, ss_customer_sk#3, s_city#75, amt#108, profit#109, c_customer_sk#111, c_first_name#112, c_last_name#113]

(32) TakeOrderedAndProject
Input [7]: [c_last_name#113, c_first_name#112, substr(s_city, 1, 30)#115, ss_ticket_number#9, amt#108, profit#109, s_city#75]
Arguments: 100, [c_last_name#113 ASC NULLS FIRST, c_first_name#112 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#109 ASC NULLS FIRST], [c_last_name#113, c_first_name#112, substr(s_city, 1, 30)#115, ss_ticket_number#9, amt#108, profit#109]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#23 IN dynamicpruning#24
BroadcastExchange (36)
+- * Filter (35)
   +- * ColumnarToRow (34)
      +- Scan parquet default.date_dim (33)


(33) Scan parquet default.date_dim
Output [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1998,1999,2000]), GreaterThanOrEqual(d_date_sk,2450819), LessThanOrEqual(d_date_sk,2451904), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(34) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]

(35) Filter [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Condition : (((((isnotnull(d_dow#32) AND (d_dow#32 = 1)) AND d_year#31 IN (1998,1999,2000)) AND (d_date_sk#25 >= 2450819)) AND (d_date_sk#25 <= 2451904)) AND isnotnull(d_date_sk#25))

(36) BroadcastExchange
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#116]


