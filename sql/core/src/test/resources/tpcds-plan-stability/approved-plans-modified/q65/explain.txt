== Physical Plan ==
TakeOrderedAndProject (42)
+- * Project (41)
   +- * BroadcastHashJoin Inner BuildRight (40)
      :- * Project (24)
      :  +- * BroadcastHashJoin Inner BuildRight (23)
      :     :- * Project (18)
      :     :  +- * BroadcastHashJoin Inner BuildRight (17)
      :     :     :- * Filter (3)
      :     :     :  +- * ColumnarToRow (2)
      :     :     :     +- Scan parquet default.store (1)
      :     :     +- BroadcastExchange (16)
      :     :        +- * Filter (15)
      :     :           +- * HashAggregate (14)
      :     :              +- Exchange (13)
      :     :                 +- * HashAggregate (12)
      :     :                    +- * Project (11)
      :     :                       +- * BroadcastHashJoin Inner BuildRight (10)
      :     :                          :- * Project (8)
      :     :                          :  +- * HashAggregate (7)
      :     :                          :     +- * Filter (6)
      :     :                          :        +- * ColumnarToRow (5)
      :     :                          :           +- Scan parquet default.store_sales (4)
      :     :                          +- ReusedExchange (9)
      :     +- BroadcastExchange (22)
      :        +- * Filter (21)
      :           +- * ColumnarToRow (20)
      :              +- Scan parquet default.item (19)
      +- BroadcastExchange (39)
         +- * HashAggregate (38)
            +- Exchange (37)
               +- * HashAggregate (36)
                  +- * HashAggregate (35)
                     +- Exchange (34)
                        +- * HashAggregate (33)
                           +- * Project (32)
                              +- * BroadcastHashJoin Inner BuildRight (31)
                                 :- * Project (29)
                                 :  +- * HashAggregate (28)
                                 :     +- * Filter (27)
                                 :        +- * ColumnarToRow (26)
                                 :           +- Scan parquet default.store_sales (25)
                                 +- ReusedExchange (30)


(1) Scan parquet default.store
Output [2]: [s_store_sk#1, s_store_name#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(2) ColumnarToRow [codegen id : 9]
Input [2]: [s_store_sk#1, s_store_name#2]

(3) Filter [codegen id : 9]
Input [2]: [s_store_sk#1, s_store_name#2]
Condition : isnotnull(s_store_sk#1)

(4) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#25), (ss_sold_date_sk#25 >= 2451911), (ss_sold_date_sk#25 <= 2452275), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#26)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(5) ColumnarToRow [codegen id : 2]
Input [23]: [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25]

(6) Filter [codegen id : 2]
Input [23]: [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25]
Condition : (isnotnull(ss_store_sk#9) AND isnotnull(ss_item_sk#4))

(7) HashAggregate [codegen id : 2]
Input [23]: [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25]
Keys [3]: [ss_sold_date_sk#25, ss_store_sk#9, ss_item_sk#4]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#15))]
Aggregate Attributes [1]: [sum#27]
Results [4]: [ss_sold_date_sk#25, ss_store_sk#9, ss_item_sk#4, sum#28]

(8) Project [codegen id : 2]
Output [4]: [ss_sold_date_sk#25, ss_store_sk#9, ss_item_sk#4, sum#28 AS _pushedexpression#29]
Input [4]: [ss_sold_date_sk#25, ss_store_sk#9, ss_item_sk#4, sum#28]

(9) ReusedExchange [Reuses operator id: 47]
Output [1]: [d_date_sk#30]

(10) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#25]
Right keys [1]: [d_date_sk#30]
Join condition: None

(11) Project [codegen id : 2]
Output [3]: [ss_store_sk#9, ss_item_sk#4, _pushedexpression#31]
Input [5]: [ss_sold_date_sk#25, ss_store_sk#9, ss_item_sk#4, _pushedexpression#29, d_date_sk#30]

(12) HashAggregate [codegen id : 2]
Input [3]: [ss_store_sk#9, ss_item_sk#4, _pushedexpression#31]
Keys [2]: [ss_store_sk#9, ss_item_sk#4]
Functions [1]: [partial_sum(_pushedexpression#31)]
Aggregate Attributes [2]: [sum#32, isEmpty#33]
Results [4]: [ss_store_sk#9, ss_item_sk#4, sum#34, isEmpty#35]

(13) Exchange
Input [4]: [ss_store_sk#9, ss_item_sk#4, sum#34, isEmpty#35]
Arguments: hashpartitioning(ss_store_sk#9, ss_item_sk#4, 5), ENSURE_REQUIREMENTS, [id=#36]

(14) HashAggregate [codegen id : 3]
Input [4]: [ss_store_sk#9, ss_item_sk#4, sum#34, isEmpty#35]
Keys [2]: [ss_store_sk#9, ss_item_sk#4]
Functions [1]: [sum(_pushedexpression#31)]
Aggregate Attributes [1]: [sum(_pushedexpression#31)#37]
Results [3]: [ss_store_sk#9, ss_item_sk#4, cast(sum(_pushedexpression#31)#37 as decimal(17,2)) AS revenue#38]

(15) Filter [codegen id : 3]
Input [3]: [ss_store_sk#9, ss_item_sk#4, revenue#38]
Condition : isnotnull(revenue#38)

(16) BroadcastExchange
Input [3]: [ss_store_sk#9, ss_item_sk#4, revenue#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39]

(17) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [s_store_sk#1]
Right keys [1]: [ss_store_sk#9]
Join condition: None

(18) Project [codegen id : 9]
Output [4]: [s_store_name#2, ss_store_sk#9, ss_item_sk#4, revenue#38]
Input [5]: [s_store_sk#1, s_store_name#2, ss_store_sk#9, ss_item_sk#4, revenue#38]

(19) Scan parquet default.item
Output [5]: [i_item_sk#40, i_item_desc#41, i_current_price#42, i_wholesale_cost#43, i_brand#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(20) ColumnarToRow [codegen id : 4]
Input [5]: [i_item_sk#40, i_item_desc#41, i_current_price#42, i_wholesale_cost#43, i_brand#44]

(21) Filter [codegen id : 4]
Input [5]: [i_item_sk#40, i_item_desc#41, i_current_price#42, i_wholesale_cost#43, i_brand#44]
Condition : isnotnull(i_item_sk#40)

(22) BroadcastExchange
Input [5]: [i_item_sk#40, i_item_desc#41, i_current_price#42, i_wholesale_cost#43, i_brand#44]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#45]

(23) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#4]
Right keys [1]: [i_item_sk#40]
Join condition: None

(24) Project [codegen id : 9]
Output [7]: [s_store_name#2, ss_store_sk#9, revenue#38, i_item_desc#41, i_current_price#42, i_wholesale_cost#43, i_brand#44]
Input [9]: [s_store_name#2, ss_store_sk#9, ss_item_sk#4, revenue#38, i_item_sk#40, i_item_desc#41, i_current_price#42, i_wholesale_cost#43, i_brand#44]

(25) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#46, ss_item_sk#47, ss_customer_sk#48, ss_cdemo_sk#49, ss_hdemo_sk#50, ss_addr_sk#51, ss_store_sk#52, ss_promo_sk#53, ss_ticket_number#54, ss_quantity#55, ss_wholesale_cost#56, ss_list_price#57, ss_sales_price#58, ss_ext_discount_amt#59, ss_ext_sales_price#60, ss_ext_wholesale_cost#61, ss_ext_list_price#62, ss_ext_tax#63, ss_coupon_amt#64, ss_net_paid#65, ss_net_paid_inc_tax#66, ss_net_profit#67, ss_sold_date_sk#68]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#68), (ss_sold_date_sk#68 >= 2451911), (ss_sold_date_sk#68 <= 2452275), dynamicpruningexpression(ss_sold_date_sk#68 IN dynamicpruning#26)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(26) ColumnarToRow [codegen id : 6]
Input [23]: [ss_sold_time_sk#46, ss_item_sk#47, ss_customer_sk#48, ss_cdemo_sk#49, ss_hdemo_sk#50, ss_addr_sk#51, ss_store_sk#52, ss_promo_sk#53, ss_ticket_number#54, ss_quantity#55, ss_wholesale_cost#56, ss_list_price#57, ss_sales_price#58, ss_ext_discount_amt#59, ss_ext_sales_price#60, ss_ext_wholesale_cost#61, ss_ext_list_price#62, ss_ext_tax#63, ss_coupon_amt#64, ss_net_paid#65, ss_net_paid_inc_tax#66, ss_net_profit#67, ss_sold_date_sk#68]

(27) Filter [codegen id : 6]
Input [23]: [ss_sold_time_sk#46, ss_item_sk#47, ss_customer_sk#48, ss_cdemo_sk#49, ss_hdemo_sk#50, ss_addr_sk#51, ss_store_sk#52, ss_promo_sk#53, ss_ticket_number#54, ss_quantity#55, ss_wholesale_cost#56, ss_list_price#57, ss_sales_price#58, ss_ext_discount_amt#59, ss_ext_sales_price#60, ss_ext_wholesale_cost#61, ss_ext_list_price#62, ss_ext_tax#63, ss_coupon_amt#64, ss_net_paid#65, ss_net_paid_inc_tax#66, ss_net_profit#67, ss_sold_date_sk#68]
Condition : isnotnull(ss_store_sk#52)

(28) HashAggregate [codegen id : 6]
Input [23]: [ss_sold_time_sk#46, ss_item_sk#47, ss_customer_sk#48, ss_cdemo_sk#49, ss_hdemo_sk#50, ss_addr_sk#51, ss_store_sk#52, ss_promo_sk#53, ss_ticket_number#54, ss_quantity#55, ss_wholesale_cost#56, ss_list_price#57, ss_sales_price#58, ss_ext_discount_amt#59, ss_ext_sales_price#60, ss_ext_wholesale_cost#61, ss_ext_list_price#62, ss_ext_tax#63, ss_coupon_amt#64, ss_net_paid#65, ss_net_paid_inc_tax#66, ss_net_profit#67, ss_sold_date_sk#68]
Keys [3]: [ss_sold_date_sk#68, ss_store_sk#52, ss_item_sk#47]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#58))]
Aggregate Attributes [1]: [sum#69]
Results [4]: [ss_sold_date_sk#68, ss_store_sk#52, ss_item_sk#47, sum#70]

(29) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#68, ss_store_sk#52, ss_item_sk#47, sum#70 AS _pushedexpression#71]
Input [4]: [ss_sold_date_sk#68, ss_store_sk#52, ss_item_sk#47, sum#70]

(30) ReusedExchange [Reuses operator id: 47]
Output [1]: [d_date_sk#72]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#68]
Right keys [1]: [d_date_sk#72]
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [ss_store_sk#52, ss_item_sk#47, _pushedexpression#73]
Input [5]: [ss_sold_date_sk#68, ss_store_sk#52, ss_item_sk#47, _pushedexpression#71, d_date_sk#72]

(33) HashAggregate [codegen id : 6]
Input [3]: [ss_store_sk#52, ss_item_sk#47, _pushedexpression#73]
Keys [2]: [ss_store_sk#52, ss_item_sk#47]
Functions [1]: [partial_sum(_pushedexpression#73)]
Aggregate Attributes [2]: [sum#74, isEmpty#75]
Results [4]: [ss_store_sk#52, ss_item_sk#47, sum#76, isEmpty#77]

(34) Exchange
Input [4]: [ss_store_sk#52, ss_item_sk#47, sum#76, isEmpty#77]
Arguments: hashpartitioning(ss_store_sk#52, ss_item_sk#47, 5), ENSURE_REQUIREMENTS, [id=#78]

(35) HashAggregate [codegen id : 7]
Input [4]: [ss_store_sk#52, ss_item_sk#47, sum#76, isEmpty#77]
Keys [2]: [ss_store_sk#52, ss_item_sk#47]
Functions [1]: [sum(_pushedexpression#73)]
Aggregate Attributes [1]: [sum(_pushedexpression#73)#79]
Results [2]: [ss_store_sk#52, cast(sum(_pushedexpression#73)#79 as decimal(17,2)) AS revenue#80]

(36) HashAggregate [codegen id : 7]
Input [2]: [ss_store_sk#52, revenue#80]
Keys [1]: [ss_store_sk#52]
Functions [1]: [partial_avg(revenue#80)]
Aggregate Attributes [2]: [sum#81, count#82]
Results [3]: [ss_store_sk#52, sum#83, count#84]

(37) Exchange
Input [3]: [ss_store_sk#52, sum#83, count#84]
Arguments: hashpartitioning(ss_store_sk#52, 5), ENSURE_REQUIREMENTS, [id=#85]

(38) HashAggregate [codegen id : 8]
Input [3]: [ss_store_sk#52, sum#83, count#84]
Keys [1]: [ss_store_sk#52]
Functions [1]: [avg(revenue#80)]
Aggregate Attributes [1]: [avg(revenue#80)#86]
Results [2]: [ss_store_sk#52, avg(revenue#80)#86 AS ave#87]

(39) BroadcastExchange
Input [2]: [ss_store_sk#52, ave#87]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#88]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#9]
Right keys [1]: [ss_store_sk#52]
Join condition: (cast(revenue#38 as decimal(23,7)) <= CheckOverflow((0.100000 * promote_precision(ave#87)), DecimalType(23,7)))

(41) Project [codegen id : 9]
Output [6]: [s_store_name#2, i_item_desc#41, revenue#38, i_current_price#42, i_wholesale_cost#43, i_brand#44]
Input [9]: [s_store_name#2, ss_store_sk#9, revenue#38, i_item_desc#41, i_current_price#42, i_wholesale_cost#43, i_brand#44, ss_store_sk#52, ave#87]

(42) TakeOrderedAndProject
Input [6]: [s_store_name#2, i_item_desc#41, revenue#38, i_current_price#42, i_wholesale_cost#43, i_brand#44]
Arguments: 100, [s_store_name#2 ASC NULLS FIRST, i_item_desc#41 ASC NULLS FIRST], [s_store_name#2, i_item_desc#41, revenue#38, i_current_price#42, i_wholesale_cost#43, i_brand#44]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#25 IN dynamicpruning#26
BroadcastExchange (47)
+- * HashAggregate (46)
   +- * Filter (45)
      +- * ColumnarToRow (44)
         +- Scan parquet default.date_dim (43)


(43) Scan parquet default.date_dim
Output [28]: [d_date_sk#30, d_date_id#89, d_date#90, d_month_seq#91, d_week_seq#92, d_quarter_seq#93, d_year#94, d_dow#95, d_moy#96, d_dom#97, d_qoy#98, d_fy_year#99, d_fy_quarter_seq#100, d_fy_week_seq#101, d_day_name#102, d_quarter_name#103, d_holiday#104, d_weekend#105, d_following_holiday#106, d_first_dom#107, d_last_dom#108, d_same_day_ly#109, d_same_day_lq#110, d_current_day#111, d_current_week#112, d_current_month#113, d_current_quarter#114, d_current_year#115]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), GreaterThanOrEqual(d_date_sk,2451911), LessThanOrEqual(d_date_sk,2452275), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(44) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#30, d_date_id#89, d_date#90, d_month_seq#91, d_week_seq#92, d_quarter_seq#93, d_year#94, d_dow#95, d_moy#96, d_dom#97, d_qoy#98, d_fy_year#99, d_fy_quarter_seq#100, d_fy_week_seq#101, d_day_name#102, d_quarter_name#103, d_holiday#104, d_weekend#105, d_following_holiday#106, d_first_dom#107, d_last_dom#108, d_same_day_ly#109, d_same_day_lq#110, d_current_day#111, d_current_week#112, d_current_month#113, d_current_quarter#114, d_current_year#115]

(45) Filter [codegen id : 1]
Input [28]: [d_date_sk#30, d_date_id#89, d_date#90, d_month_seq#91, d_week_seq#92, d_quarter_seq#93, d_year#94, d_dow#95, d_moy#96, d_dom#97, d_qoy#98, d_fy_year#99, d_fy_quarter_seq#100, d_fy_week_seq#101, d_day_name#102, d_quarter_name#103, d_holiday#104, d_weekend#105, d_following_holiday#106, d_first_dom#107, d_last_dom#108, d_same_day_ly#109, d_same_day_lq#110, d_current_day#111, d_current_week#112, d_current_month#113, d_current_quarter#114, d_current_year#115]
Condition : (((((isnotnull(d_month_seq#91) AND (d_month_seq#91 >= 1212)) AND (d_month_seq#91 <= 1223)) AND (d_date_sk#30 >= 2451911)) AND (d_date_sk#30 <= 2452275)) AND isnotnull(d_date_sk#30))

(46) HashAggregate [codegen id : 1]
Input [28]: [d_date_sk#30, d_date_id#89, d_date#90, d_month_seq#91, d_week_seq#92, d_quarter_seq#93, d_year#94, d_dow#95, d_moy#96, d_dom#97, d_qoy#98, d_fy_year#99, d_fy_quarter_seq#100, d_fy_week_seq#101, d_day_name#102, d_quarter_name#103, d_holiday#104, d_weekend#105, d_following_holiday#106, d_first_dom#107, d_last_dom#108, d_same_day_ly#109, d_same_day_lq#110, d_current_day#111, d_current_week#112, d_current_month#113, d_current_quarter#114, d_current_year#115]
Keys [1]: [d_date_sk#30]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#30]

(47) BroadcastExchange
Input [1]: [d_date_sk#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#116]

Subquery:2 Hosting operator id = 25 Hosting Expression = ss_sold_date_sk#68 IN dynamicpruning#26


