== Physical Plan ==
TakeOrderedAndProject (29)
+- * Project (28)
   +- * Filter (27)
      +- Window (26)
         +- * Sort (25)
            +- Exchange (24)
               +- * HashAggregate (23)
                  +- Exchange (22)
                     +- * HashAggregate (21)
                        +- * Project (20)
                           +- * BroadcastHashJoin Inner BuildRight (19)
                              :- * Project (13)
                              :  +- * HashAggregate (12)
                              :     +- * Project (11)
                              :        +- * BroadcastHashJoin Inner BuildRight (10)
                              :           :- * BroadcastHashJoin Inner BuildRight (5)
                              :           :  :- * Filter (3)
                              :           :  :  +- * ColumnarToRow (2)
                              :           :  :     +- Scan parquet default.store_sales (1)
                              :           :  +- ReusedExchange (4)
                              :           +- BroadcastExchange (9)
                              :              +- * Filter (8)
                              :                 +- * ColumnarToRow (7)
                              :                    +- Scan parquet default.item (6)
                              +- BroadcastExchange (18)
                                 +- * HashAggregate (17)
                                    +- * Filter (16)
                                       +- * ColumnarToRow (15)
                                          +- Scan parquet default.store (14)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23), (ss_sold_date_sk#23 >= 2451545), (ss_sold_date_sk#23 <= 2451910), dynamicpruningexpression(ss_sold_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 4]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_store_sk#7))

(4) ReusedExchange [Reuses operator id: 33]
Output [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#25]
Join condition: None

(6) Scan parquet default.item
Output [22]: [i_item_sk#53, i_item_id#54, i_rec_start_date#55, i_rec_end_date#56, i_item_desc#57, i_current_price#58, i_wholesale_cost#59, i_brand_id#60, i_brand#61, i_class_id#62, i_class#63, i_category_id#64, i_category#65, i_manufact_id#66, i_manufact#67, i_size#68, i_formulation#69, i_color#70, i_units#71, i_container#72, i_manager_id#73, i_product_name#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [Or(And(In(i_category, [Books                                             ,Electronics                                       ,Home                                              ]),In(i_class, [musical                                           ,parenting                                         ,wallpaper                                         ])),And(In(i_category, [Jewelry                                           ,Men                                               ,Shoes                                             ]),In(i_class, [birdal                                            ,pants                                             ,womens                                            ]))), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(7) ColumnarToRow [codegen id : 2]
Input [22]: [i_item_sk#53, i_item_id#54, i_rec_start_date#55, i_rec_end_date#56, i_item_desc#57, i_current_price#58, i_wholesale_cost#59, i_brand_id#60, i_brand#61, i_class_id#62, i_class#63, i_category_id#64, i_category#65, i_manufact_id#66, i_manufact#67, i_size#68, i_formulation#69, i_color#70, i_units#71, i_container#72, i_manager_id#73, i_product_name#74]

(8) Filter [codegen id : 2]
Input [22]: [i_item_sk#53, i_item_id#54, i_rec_start_date#55, i_rec_end_date#56, i_item_desc#57, i_current_price#58, i_wholesale_cost#59, i_brand_id#60, i_brand#61, i_class_id#62, i_class#63, i_category_id#64, i_category#65, i_manufact_id#66, i_manufact#67, i_size#68, i_formulation#69, i_color#70, i_units#71, i_container#72, i_manager_id#73, i_product_name#74]
Condition : (((i_category#65 IN (Home                                              ,Books                                             ,Electronics                                       ) AND i_class#63 IN (wallpaper                                         ,parenting                                         ,musical                                           )) OR (i_category#65 IN (Shoes                                             ,Jewelry                                           ,Men                                               ) AND i_class#63 IN (womens                                            ,birdal                                            ,pants                                             ))) AND isnotnull(i_item_sk#53))

(9) BroadcastExchange
Input [22]: [i_item_sk#53, i_item_id#54, i_rec_start_date#55, i_rec_end_date#56, i_item_desc#57, i_current_price#58, i_wholesale_cost#59, i_brand_id#60, i_brand#61, i_class_id#62, i_class#63, i_category_id#64, i_category#65, i_manufact_id#66, i_manufact#67, i_size#68, i_formulation#69, i_color#70, i_units#71, i_container#72, i_manager_id#73, i_product_name#74]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#75]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#53]
Join condition: None

(11) Project [codegen id : 4]
Output [73]: [i_item_sk#53, i_item_id#54, i_rec_start_date#55, i_rec_end_date#56, i_item_desc#57, i_current_price#58, i_wholesale_cost#59, i_brand_id#60, i_brand#61, i_class_id#62, i_class#63, i_category_id#64, i_category#65, i_manufact_id#66, i_manufact#67, i_size#68, i_formulation#69, i_color#70, i_units#71, i_container#72, i_manager_id#73, i_product_name#74, ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Input [73]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52, i_item_sk#53, i_item_id#54, i_rec_start_date#55, i_rec_end_date#56, i_item_desc#57, i_current_price#58, i_wholesale_cost#59, i_brand_id#60, i_brand#61, i_class_id#62, i_class#63, i_category_id#64, i_category#65, i_manufact_id#66, i_manufact#67, i_size#68, i_formulation#69, i_color#70, i_units#71, i_container#72, i_manager_id#73, i_product_name#74]

(12) HashAggregate [codegen id : 4]
Input [73]: [i_item_sk#53, i_item_id#54, i_rec_start_date#55, i_rec_end_date#56, i_item_desc#57, i_current_price#58, i_wholesale_cost#59, i_brand_id#60, i_brand#61, i_class_id#62, i_class#63, i_category_id#64, i_category#65, i_manufact_id#66, i_manufact#67, i_size#68, i_formulation#69, i_color#70, i_units#71, i_container#72, i_manager_id#73, i_product_name#74, ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Keys [5]: [ss_store_sk#7, i_category#65, i_class#63, i_brand#61, d_moy#33]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#13))]
Aggregate Attributes [1]: [sum#76]
Results [6]: [ss_store_sk#7, i_category#65, i_class#63, i_brand#61, d_moy#33, sum#77]

(13) Project [codegen id : 4]
Output [6]: [ss_store_sk#7, i_category#65, i_class#63, i_brand#61, d_moy#33, sum#77 AS _pushedexpression#78]
Input [6]: [ss_store_sk#7, i_category#65, i_class#63, i_brand#61, d_moy#33, sum#77]

(14) Scan parquet default.store
Output [29]: [s_store_sk#79, s_store_id#80, s_rec_start_date#81, s_rec_end_date#82, s_closed_date_sk#83, s_store_name#84, s_number_employees#85, s_floor_space#86, s_hours#87, s_manager#88, s_market_id#89, s_geography_class#90, s_market_desc#91, s_market_manager#92, s_division_id#93, s_division_name#94, s_company_id#95, s_company_name#96, s_street_number#97, s_street_name#98, s_street_type#99, s_suite_number#100, s_city#101, s_county#102, s_state#103, s_zip#104, s_country#105, s_gmt_offset#106, s_tax_percentage#107]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(15) ColumnarToRow [codegen id : 3]
Input [29]: [s_store_sk#79, s_store_id#80, s_rec_start_date#81, s_rec_end_date#82, s_closed_date_sk#83, s_store_name#84, s_number_employees#85, s_floor_space#86, s_hours#87, s_manager#88, s_market_id#89, s_geography_class#90, s_market_desc#91, s_market_manager#92, s_division_id#93, s_division_name#94, s_company_id#95, s_company_name#96, s_street_number#97, s_street_name#98, s_street_type#99, s_suite_number#100, s_city#101, s_county#102, s_state#103, s_zip#104, s_country#105, s_gmt_offset#106, s_tax_percentage#107]

(16) Filter [codegen id : 3]
Input [29]: [s_store_sk#79, s_store_id#80, s_rec_start_date#81, s_rec_end_date#82, s_closed_date_sk#83, s_store_name#84, s_number_employees#85, s_floor_space#86, s_hours#87, s_manager#88, s_market_id#89, s_geography_class#90, s_market_desc#91, s_market_manager#92, s_division_id#93, s_division_name#94, s_company_id#95, s_company_name#96, s_street_number#97, s_street_name#98, s_street_type#99, s_suite_number#100, s_city#101, s_county#102, s_state#103, s_zip#104, s_country#105, s_gmt_offset#106, s_tax_percentage#107]
Condition : isnotnull(s_store_sk#79)

(17) HashAggregate [codegen id : 3]
Input [29]: [s_store_sk#79, s_store_id#80, s_rec_start_date#81, s_rec_end_date#82, s_closed_date_sk#83, s_store_name#84, s_number_employees#85, s_floor_space#86, s_hours#87, s_manager#88, s_market_id#89, s_geography_class#90, s_market_desc#91, s_market_manager#92, s_division_id#93, s_division_name#94, s_company_id#95, s_company_name#96, s_street_number#97, s_street_name#98, s_street_type#99, s_suite_number#100, s_city#101, s_county#102, s_state#103, s_zip#104, s_country#105, s_gmt_offset#106, s_tax_percentage#107]
Keys [3]: [s_store_sk#79, s_store_name#84, s_company_name#96]
Functions: []
Aggregate Attributes: []
Results [3]: [s_store_sk#79, s_store_name#84, s_company_name#96]

(18) BroadcastExchange
Input [3]: [s_store_sk#79, s_store_name#84, s_company_name#96]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#108]

(19) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#79]
Join condition: None

(20) Project [codegen id : 4]
Output [7]: [i_category#65, i_class#63, i_brand#61, d_moy#33, _pushedexpression#109, s_store_name#84, s_company_name#96]
Input [9]: [ss_store_sk#7, i_category#65, i_class#63, i_brand#61, d_moy#33, _pushedexpression#78, s_store_sk#79, s_store_name#84, s_company_name#96]

(21) HashAggregate [codegen id : 4]
Input [7]: [i_category#65, i_class#63, i_brand#61, d_moy#33, _pushedexpression#109, s_store_name#84, s_company_name#96]
Keys [6]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33]
Functions [1]: [partial_sum(_pushedexpression#109)]
Aggregate Attributes [2]: [sum#110, isEmpty#111]
Results [8]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, sum#112, isEmpty#113]

(22) Exchange
Input [8]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, sum#112, isEmpty#113]
Arguments: hashpartitioning(i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, 5), ENSURE_REQUIREMENTS, [id=#114]

(23) HashAggregate [codegen id : 5]
Input [8]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, sum#112, isEmpty#113]
Keys [6]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33]
Functions [1]: [sum(_pushedexpression#109)]
Aggregate Attributes [1]: [sum(_pushedexpression#109)#115]
Results [8]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, cast(sum(_pushedexpression#109)#115 as decimal(17,2)) AS sum_sales#116, cast(sum(_pushedexpression#109)#115 as decimal(17,2)) AS _w0#117]

(24) Exchange
Input [8]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, sum_sales#116, _w0#117]
Arguments: hashpartitioning(i_category#65, i_brand#61, s_store_name#84, s_company_name#96, 5), ENSURE_REQUIREMENTS, [id=#118]

(25) Sort [codegen id : 6]
Input [8]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, sum_sales#116, _w0#117]
Arguments: [i_category#65 ASC NULLS FIRST, i_brand#61 ASC NULLS FIRST, s_store_name#84 ASC NULLS FIRST, s_company_name#96 ASC NULLS FIRST], false, 0

(26) Window
Input [8]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, sum_sales#116, _w0#117]
Arguments: [avg(_w0#117) windowspecdefinition(i_category#65, i_brand#61, s_store_name#84, s_company_name#96, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#119], [i_category#65, i_brand#61, s_store_name#84, s_company_name#96]

(27) Filter [codegen id : 7]
Input [9]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, sum_sales#116, _w0#117, avg_monthly_sales#119]
Condition : (isnotnull(avg_monthly_sales#119) AND (NOT (avg_monthly_sales#119 = 0.000000) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#116 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#119 as decimal(22,6)))), DecimalType(22,6)))) / promote_precision(cast(avg_monthly_sales#119 as decimal(22,6)))), DecimalType(38,16)) > 0.1000000000000000)))

(28) Project [codegen id : 7]
Output [8]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, sum_sales#116, avg_monthly_sales#119]
Input [9]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, sum_sales#116, _w0#117, avg_monthly_sales#119]

(29) TakeOrderedAndProject
Input [8]: [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, sum_sales#116, avg_monthly_sales#119]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#116 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#119 as decimal(22,6)))), DecimalType(22,6)) ASC NULLS FIRST, s_store_name#84 ASC NULLS FIRST], [i_category#65, i_class#63, i_brand#61, s_store_name#84, s_company_name#96, d_moy#33, sum_sales#116, avg_monthly_sales#119]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#23 IN dynamicpruning#24
BroadcastExchange (33)
+- * Filter (32)
   +- * ColumnarToRow (31)
      +- Scan parquet default.date_dim (30)


(30) Scan parquet default.date_dim
Output [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), GreaterThanOrEqual(d_date_sk,2451545), LessThanOrEqual(d_date_sk,2451910), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(31) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]

(32) Filter [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Condition : ((((isnotnull(d_year#31) AND (d_year#31 = 2000)) AND (d_date_sk#25 >= 2451545)) AND (d_date_sk#25 <= 2451910)) AND isnotnull(d_date_sk#25))

(33) BroadcastExchange
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#120]


