== Physical Plan ==
* Project (26)
+- * Sort (25)
   +- Exchange (24)
      +- * Project (23)
         +- Window (22)
            +- * Sort (21)
               +- Exchange (20)
                  +- * HashAggregate (19)
                     +- Exchange (18)
                        +- * HashAggregate (17)
                           +- * Project (16)
                              +- * BroadcastHashJoin Inner BuildRight (15)
                                 :- * Project (13)
                                 :  +- * HashAggregate (12)
                                 :     +- * SortMergeJoin Inner (11)
                                 :        :- * Sort (5)
                                 :        :  +- Exchange (4)
                                 :        :     +- * Filter (3)
                                 :        :        +- * ColumnarToRow (2)
                                 :        :           +- Scan parquet default.store_sales (1)
                                 :        +- * Sort (10)
                                 :           +- Exchange (9)
                                 :              +- * Filter (8)
                                 :                 +- * ColumnarToRow (7)
                                 :                    +- Scan parquet default.item (6)
                                 +- ReusedExchange (14)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23), (ss_sold_date_sk#23 >= 2451911), (ss_sold_date_sk#23 <= 2451941), dynamicpruningexpression(ss_sold_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 1]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : isnotnull(ss_item_sk#2)

(4) Exchange
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#25]

(5) Sort [codegen id : 2]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [22]: [i_item_sk#26, i_item_id#27, i_rec_start_date#28, i_rec_end_date#29, i_item_desc#30, i_current_price#31, i_wholesale_cost#32, i_brand_id#33, i_brand#34, i_class_id#35, i_class#36, i_category_id#37, i_category#38, i_manufact_id#39, i_manufact#40, i_size#41, i_formulation#42, i_color#43, i_units#44, i_container#45, i_manager_id#46, i_product_name#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [In(i_category, [Books                                             ,Jewelry                                           ,Sports                                            ]), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(7) ColumnarToRow [codegen id : 3]
Input [22]: [i_item_sk#26, i_item_id#27, i_rec_start_date#28, i_rec_end_date#29, i_item_desc#30, i_current_price#31, i_wholesale_cost#32, i_brand_id#33, i_brand#34, i_class_id#35, i_class#36, i_category_id#37, i_category#38, i_manufact_id#39, i_manufact#40, i_size#41, i_formulation#42, i_color#43, i_units#44, i_container#45, i_manager_id#46, i_product_name#47]

(8) Filter [codegen id : 3]
Input [22]: [i_item_sk#26, i_item_id#27, i_rec_start_date#28, i_rec_end_date#29, i_item_desc#30, i_current_price#31, i_wholesale_cost#32, i_brand_id#33, i_brand#34, i_class_id#35, i_class#36, i_category_id#37, i_category#38, i_manufact_id#39, i_manufact#40, i_size#41, i_formulation#42, i_color#43, i_units#44, i_container#45, i_manager_id#46, i_product_name#47]
Condition : (i_category#38 IN (Jewelry                                           ,Sports                                            ,Books                                             ) AND isnotnull(i_item_sk#26))

(9) Exchange
Input [22]: [i_item_sk#26, i_item_id#27, i_rec_start_date#28, i_rec_end_date#29, i_item_desc#30, i_current_price#31, i_wholesale_cost#32, i_brand_id#33, i_brand#34, i_class_id#35, i_class#36, i_category_id#37, i_category#38, i_manufact_id#39, i_manufact#40, i_size#41, i_formulation#42, i_color#43, i_units#44, i_container#45, i_manager_id#46, i_product_name#47]
Arguments: hashpartitioning(i_item_sk#26, 5), ENSURE_REQUIREMENTS, [id=#48]

(10) Sort [codegen id : 4]
Input [22]: [i_item_sk#26, i_item_id#27, i_rec_start_date#28, i_rec_end_date#29, i_item_desc#30, i_current_price#31, i_wholesale_cost#32, i_brand_id#33, i_brand#34, i_class_id#35, i_class#36, i_category_id#37, i_category#38, i_manufact_id#39, i_manufact#40, i_size#41, i_formulation#42, i_color#43, i_units#44, i_container#45, i_manager_id#46, i_product_name#47]
Arguments: [i_item_sk#26 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#26]
Join condition: None

(12) HashAggregate [codegen id : 6]
Input [45]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, i_item_sk#26, i_item_id#27, i_rec_start_date#28, i_rec_end_date#29, i_item_desc#30, i_current_price#31, i_wholesale_cost#32, i_brand_id#33, i_brand#34, i_class_id#35, i_class#36, i_category_id#37, i_category#38, i_manufact_id#39, i_manufact#40, i_size#41, i_formulation#42, i_color#43, i_units#44, i_container#45, i_manager_id#46, i_product_name#47]
Keys [6]: [ss_sold_date_sk#23, i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#15))]
Aggregate Attributes [1]: [sum#49]
Results [7]: [ss_sold_date_sk#23, i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31, sum#50]

(13) Project [codegen id : 6]
Output [7]: [ss_sold_date_sk#23, i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31, sum#50 AS _pushedexpression#51]
Input [7]: [ss_sold_date_sk#23, i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31, sum#50]

(14) ReusedExchange [Reuses operator id: 31]
Output [1]: [d_date_sk#52]

(15) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#52]
Join condition: None

(16) Project [codegen id : 6]
Output [6]: [i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31, _pushedexpression#53]
Input [8]: [ss_sold_date_sk#23, i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31, _pushedexpression#51, d_date_sk#52]

(17) HashAggregate [codegen id : 6]
Input [6]: [i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31, _pushedexpression#53]
Keys [5]: [i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31]
Functions [1]: [partial_sum(_pushedexpression#53)]
Aggregate Attributes [2]: [sum#54, isEmpty#55]
Results [7]: [i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31, sum#56, isEmpty#57]

(18) Exchange
Input [7]: [i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31, sum#56, isEmpty#57]
Arguments: hashpartitioning(i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31, 5), ENSURE_REQUIREMENTS, [id=#58]

(19) HashAggregate [codegen id : 7]
Input [7]: [i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31, sum#56, isEmpty#57]
Keys [5]: [i_item_id#27, i_item_desc#30, i_category#38, i_class#36, i_current_price#31]
Functions [1]: [sum(_pushedexpression#53)]
Aggregate Attributes [1]: [sum(_pushedexpression#53)#59]
Results [8]: [i_item_desc#30, i_category#38, i_class#36, i_current_price#31, cast(sum(_pushedexpression#53)#59 as decimal(17,2)) AS itemrevenue#60, cast(sum(_pushedexpression#53)#59 as decimal(17,2)) AS _w0#61, cast(sum(_pushedexpression#53)#59 as decimal(17,2)) AS _w1#62, i_item_id#27]

(20) Exchange
Input [8]: [i_item_desc#30, i_category#38, i_class#36, i_current_price#31, itemrevenue#60, _w0#61, _w1#62, i_item_id#27]
Arguments: hashpartitioning(i_class#36, 5), ENSURE_REQUIREMENTS, [id=#63]

(21) Sort [codegen id : 8]
Input [8]: [i_item_desc#30, i_category#38, i_class#36, i_current_price#31, itemrevenue#60, _w0#61, _w1#62, i_item_id#27]
Arguments: [i_class#36 ASC NULLS FIRST], false, 0

(22) Window
Input [8]: [i_item_desc#30, i_category#38, i_class#36, i_current_price#31, itemrevenue#60, _w0#61, _w1#62, i_item_id#27]
Arguments: [sum(_w1#62) windowspecdefinition(i_class#36, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#64], [i_class#36]

(23) Project [codegen id : 9]
Output [7]: [i_item_desc#30, i_category#38, i_class#36, i_current_price#31, itemrevenue#60, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#61) * 100.00), DecimalType(21,2)) as decimal(27,2))) / promote_precision(_we0#64)), DecimalType(38,17)) AS revenueratio#65, i_item_id#27]
Input [9]: [i_item_desc#30, i_category#38, i_class#36, i_current_price#31, itemrevenue#60, _w0#61, _w1#62, i_item_id#27, _we0#64]

(24) Exchange
Input [7]: [i_item_desc#30, i_category#38, i_class#36, i_current_price#31, itemrevenue#60, revenueratio#65, i_item_id#27]
Arguments: rangepartitioning(i_category#38 ASC NULLS FIRST, i_class#36 ASC NULLS FIRST, i_item_id#27 ASC NULLS FIRST, i_item_desc#30 ASC NULLS FIRST, revenueratio#65 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#66]

(25) Sort [codegen id : 10]
Input [7]: [i_item_desc#30, i_category#38, i_class#36, i_current_price#31, itemrevenue#60, revenueratio#65, i_item_id#27]
Arguments: [i_category#38 ASC NULLS FIRST, i_class#36 ASC NULLS FIRST, i_item_id#27 ASC NULLS FIRST, i_item_desc#30 ASC NULLS FIRST, revenueratio#65 ASC NULLS FIRST], true, 0

(26) Project [codegen id : 10]
Output [6]: [i_item_desc#30, i_category#38, i_class#36, i_current_price#31, itemrevenue#60, revenueratio#65]
Input [7]: [i_item_desc#30, i_category#38, i_class#36, i_current_price#31, itemrevenue#60, revenueratio#65, i_item_id#27]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#23 IN dynamicpruning#24
BroadcastExchange (31)
+- * HashAggregate (30)
   +- * Filter (29)
      +- * ColumnarToRow (28)
         +- Scan parquet default.date_dim (27)


(27) Scan parquet default.date_dim
Output [28]: [d_date_sk#52, d_date_id#67, d_date#68, d_month_seq#69, d_week_seq#70, d_quarter_seq#71, d_year#72, d_dow#73, d_moy#74, d_dom#75, d_qoy#76, d_fy_year#77, d_fy_quarter_seq#78, d_fy_week_seq#79, d_day_name#80, d_quarter_name#81, d_holiday#82, d_weekend#83, d_following_holiday#84, d_first_dom#85, d_last_dom#86, d_same_day_ly#87, d_same_day_lq#88, d_current_day#89, d_current_week#90, d_current_month#91, d_current_quarter#92, d_current_year#93]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2001-01-01), LessThanOrEqual(d_date,2001-01-31), GreaterThanOrEqual(d_date_sk,2451911), LessThanOrEqual(d_date_sk,2451941), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(28) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#52, d_date_id#67, d_date#68, d_month_seq#69, d_week_seq#70, d_quarter_seq#71, d_year#72, d_dow#73, d_moy#74, d_dom#75, d_qoy#76, d_fy_year#77, d_fy_quarter_seq#78, d_fy_week_seq#79, d_day_name#80, d_quarter_name#81, d_holiday#82, d_weekend#83, d_following_holiday#84, d_first_dom#85, d_last_dom#86, d_same_day_ly#87, d_same_day_lq#88, d_current_day#89, d_current_week#90, d_current_month#91, d_current_quarter#92, d_current_year#93]

(29) Filter [codegen id : 1]
Input [28]: [d_date_sk#52, d_date_id#67, d_date#68, d_month_seq#69, d_week_seq#70, d_quarter_seq#71, d_year#72, d_dow#73, d_moy#74, d_dom#75, d_qoy#76, d_fy_year#77, d_fy_quarter_seq#78, d_fy_week_seq#79, d_day_name#80, d_quarter_name#81, d_holiday#82, d_weekend#83, d_following_holiday#84, d_first_dom#85, d_last_dom#86, d_same_day_ly#87, d_same_day_lq#88, d_current_day#89, d_current_week#90, d_current_month#91, d_current_quarter#92, d_current_year#93]
Condition : (((((isnotnull(d_date#68) AND (d_date#68 >= 2001-01-01)) AND (d_date#68 <= 2001-01-31)) AND (d_date_sk#52 >= 2451911)) AND (d_date_sk#52 <= 2451941)) AND isnotnull(d_date_sk#52))

(30) HashAggregate [codegen id : 1]
Input [28]: [d_date_sk#52, d_date_id#67, d_date#68, d_month_seq#69, d_week_seq#70, d_quarter_seq#71, d_year#72, d_dow#73, d_moy#74, d_dom#75, d_qoy#76, d_fy_year#77, d_fy_quarter_seq#78, d_fy_week_seq#79, d_day_name#80, d_quarter_name#81, d_holiday#82, d_weekend#83, d_following_holiday#84, d_first_dom#85, d_last_dom#86, d_same_day_ly#87, d_same_day_lq#88, d_current_day#89, d_current_week#90, d_current_month#91, d_current_quarter#92, d_current_year#93]
Keys [1]: [d_date_sk#52]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#52]

(31) BroadcastExchange
Input [1]: [d_date_sk#52]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#94]


