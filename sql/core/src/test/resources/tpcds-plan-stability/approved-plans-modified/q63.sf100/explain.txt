== Physical Plan ==
TakeOrderedAndProject (28)
+- * Project (27)
   +- * Filter (26)
      +- Window (25)
         +- * Sort (24)
            +- Exchange (23)
               +- * HashAggregate (22)
                  +- Exchange (21)
                     +- * HashAggregate (20)
                        +- * Project (19)
                           +- * BroadcastHashJoin Inner BuildRight (18)
                              :- * Project (12)
                              :  +- * HashAggregate (11)
                              :     +- * BroadcastHashJoin Inner BuildRight (10)
                              :        :- * BroadcastHashJoin Inner BuildLeft (8)
                              :        :  :- BroadcastExchange (4)
                              :        :  :  +- * Filter (3)
                              :        :  :     +- * ColumnarToRow (2)
                              :        :  :        +- Scan parquet default.item (1)
                              :        :  +- * Filter (7)
                              :        :     +- * ColumnarToRow (6)
                              :        :        +- Scan parquet default.store_sales (5)
                              :        +- ReusedExchange (9)
                              +- BroadcastExchange (17)
                                 +- * HashAggregate (16)
                                    +- * Filter (15)
                                       +- * ColumnarToRow (14)
                                          +- Scan parquet default.store (13)


(1) Scan parquet default.item
Output [22]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [Or(And(And(In(i_category, [Books                                             ,Children                                          ,Electronics                                       ]),In(i_class, [personal                                          ,portable                                          ,reference                                         ,self-help                                         ])),In(i_brand, [exportiunivamalg #23                               ,scholaramalgamalg #24                             ,scholaramalgamalg #25                              ,scholaramalgamalg #23                              ])),And(And(In(i_category, [Men                                               ,Music                                             ,Women                                             ]),In(i_class, [accessories                                       ,classical                                         ,fragrances                                        ,pants                                             ])),In(i_brand, [amalgimporto #26                                   ,edu packscholar #26                                ,exportiimporto #26                                 ,importoamalg #26                                   ]))), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(2) ColumnarToRow [codegen id : 1]
Input [22]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22]

(3) Filter [codegen id : 1]
Input [22]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22]
Condition : ((((i_category#13 IN (Books                                             ,Children                                          ,Electronics                                       ) AND i_class#11 IN (personal                                          ,portable                                          ,reference                                         ,self-help                                         )) AND i_brand#9 IN (scholaramalgamalg #24                             ,scholaramalgamalg #25                              ,exportiunivamalg #23                               ,scholaramalgamalg #23                              )) OR ((i_category#13 IN (Women                                             ,Music                                             ,Men                                               ) AND i_class#11 IN (accessories                                       ,classical                                         ,fragrances                                        ,pants                                             )) AND i_brand#9 IN (amalgimporto #26                                   ,edu packscholar #26                                ,exportiimporto #26                                 ,importoamalg #26                                   ))) AND isnotnull(i_item_sk#1))

(4) BroadcastExchange
Input [22]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(5) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#28, ss_item_sk#29, ss_customer_sk#30, ss_cdemo_sk#31, ss_hdemo_sk#32, ss_addr_sk#33, ss_store_sk#34, ss_promo_sk#35, ss_ticket_number#36, ss_quantity#37, ss_wholesale_cost#38, ss_list_price#39, ss_sales_price#40, ss_ext_discount_amt#41, ss_ext_sales_price#42, ss_ext_wholesale_cost#43, ss_ext_list_price#44, ss_ext_tax#45, ss_coupon_amt#46, ss_net_paid#47, ss_net_paid_inc_tax#48, ss_net_profit#49, ss_sold_date_sk#50]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#50), (ss_sold_date_sk#50 >= 2452123), (ss_sold_date_sk#50 <= 2452487), dynamicpruningexpression(ss_sold_date_sk#50 IN dynamicpruning#51)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(6) ColumnarToRow
Input [23]: [ss_sold_time_sk#28, ss_item_sk#29, ss_customer_sk#30, ss_cdemo_sk#31, ss_hdemo_sk#32, ss_addr_sk#33, ss_store_sk#34, ss_promo_sk#35, ss_ticket_number#36, ss_quantity#37, ss_wholesale_cost#38, ss_list_price#39, ss_sales_price#40, ss_ext_discount_amt#41, ss_ext_sales_price#42, ss_ext_wholesale_cost#43, ss_ext_list_price#44, ss_ext_tax#45, ss_coupon_amt#46, ss_net_paid#47, ss_net_paid_inc_tax#48, ss_net_profit#49, ss_sold_date_sk#50]

(7) Filter
Input [23]: [ss_sold_time_sk#28, ss_item_sk#29, ss_customer_sk#30, ss_cdemo_sk#31, ss_hdemo_sk#32, ss_addr_sk#33, ss_store_sk#34, ss_promo_sk#35, ss_ticket_number#36, ss_quantity#37, ss_wholesale_cost#38, ss_list_price#39, ss_sales_price#40, ss_ext_discount_amt#41, ss_ext_sales_price#42, ss_ext_wholesale_cost#43, ss_ext_list_price#44, ss_ext_tax#45, ss_coupon_amt#46, ss_net_paid#47, ss_net_paid_inc_tax#48, ss_net_profit#49, ss_sold_date_sk#50]
Condition : (isnotnull(ss_item_sk#29) AND isnotnull(ss_store_sk#34))

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(9) ReusedExchange [Reuses operator id: 32]
Output [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#50]
Right keys [1]: [d_date_sk#52]
Join condition: None

(11) HashAggregate [codegen id : 4]
Input [73]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22, ss_sold_time_sk#28, ss_item_sk#29, ss_customer_sk#30, ss_cdemo_sk#31, ss_hdemo_sk#32, ss_addr_sk#33, ss_store_sk#34, ss_promo_sk#35, ss_ticket_number#36, ss_quantity#37, ss_wholesale_cost#38, ss_list_price#39, ss_sales_price#40, ss_ext_discount_amt#41, ss_ext_sales_price#42, ss_ext_wholesale_cost#43, ss_ext_list_price#44, ss_ext_tax#45, ss_coupon_amt#46, ss_net_paid#47, ss_net_paid_inc_tax#48, ss_net_profit#49, ss_sold_date_sk#50, d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]
Keys [3]: [ss_store_sk#34, i_manager_id#21, d_moy#60]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#40))]
Aggregate Attributes [1]: [sum#80]
Results [4]: [ss_store_sk#34, i_manager_id#21, d_moy#60, sum#81]

(12) Project [codegen id : 4]
Output [4]: [ss_store_sk#34, i_manager_id#21, d_moy#60, sum#81 AS _pushedexpression#82]
Input [4]: [ss_store_sk#34, i_manager_id#21, d_moy#60, sum#81]

(13) Scan parquet default.store
Output [29]: [s_store_sk#83, s_store_id#84, s_rec_start_date#85, s_rec_end_date#86, s_closed_date_sk#87, s_store_name#88, s_number_employees#89, s_floor_space#90, s_hours#91, s_manager#92, s_market_id#93, s_geography_class#94, s_market_desc#95, s_market_manager#96, s_division_id#97, s_division_name#98, s_company_id#99, s_company_name#100, s_street_number#101, s_street_name#102, s_street_type#103, s_suite_number#104, s_city#105, s_county#106, s_state#107, s_zip#108, s_country#109, s_gmt_offset#110, s_tax_percentage#111]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(14) ColumnarToRow [codegen id : 3]
Input [29]: [s_store_sk#83, s_store_id#84, s_rec_start_date#85, s_rec_end_date#86, s_closed_date_sk#87, s_store_name#88, s_number_employees#89, s_floor_space#90, s_hours#91, s_manager#92, s_market_id#93, s_geography_class#94, s_market_desc#95, s_market_manager#96, s_division_id#97, s_division_name#98, s_company_id#99, s_company_name#100, s_street_number#101, s_street_name#102, s_street_type#103, s_suite_number#104, s_city#105, s_county#106, s_state#107, s_zip#108, s_country#109, s_gmt_offset#110, s_tax_percentage#111]

(15) Filter [codegen id : 3]
Input [29]: [s_store_sk#83, s_store_id#84, s_rec_start_date#85, s_rec_end_date#86, s_closed_date_sk#87, s_store_name#88, s_number_employees#89, s_floor_space#90, s_hours#91, s_manager#92, s_market_id#93, s_geography_class#94, s_market_desc#95, s_market_manager#96, s_division_id#97, s_division_name#98, s_company_id#99, s_company_name#100, s_street_number#101, s_street_name#102, s_street_type#103, s_suite_number#104, s_city#105, s_county#106, s_state#107, s_zip#108, s_country#109, s_gmt_offset#110, s_tax_percentage#111]
Condition : isnotnull(s_store_sk#83)

(16) HashAggregate [codegen id : 3]
Input [29]: [s_store_sk#83, s_store_id#84, s_rec_start_date#85, s_rec_end_date#86, s_closed_date_sk#87, s_store_name#88, s_number_employees#89, s_floor_space#90, s_hours#91, s_manager#92, s_market_id#93, s_geography_class#94, s_market_desc#95, s_market_manager#96, s_division_id#97, s_division_name#98, s_company_id#99, s_company_name#100, s_street_number#101, s_street_name#102, s_street_type#103, s_suite_number#104, s_city#105, s_county#106, s_state#107, s_zip#108, s_country#109, s_gmt_offset#110, s_tax_percentage#111]
Keys [1]: [s_store_sk#83]
Functions: []
Aggregate Attributes: []
Results [1]: [s_store_sk#83]

(17) BroadcastExchange
Input [1]: [s_store_sk#83]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#34]
Right keys [1]: [s_store_sk#83]
Join condition: None

(19) Project [codegen id : 4]
Output [3]: [i_manager_id#21, d_moy#60, _pushedexpression#113]
Input [5]: [ss_store_sk#34, i_manager_id#21, d_moy#60, _pushedexpression#82, s_store_sk#83]

(20) HashAggregate [codegen id : 4]
Input [3]: [i_manager_id#21, d_moy#60, _pushedexpression#113]
Keys [2]: [i_manager_id#21, d_moy#60]
Functions [1]: [partial_sum(_pushedexpression#113)]
Aggregate Attributes [2]: [sum#114, isEmpty#115]
Results [4]: [i_manager_id#21, d_moy#60, sum#116, isEmpty#117]

(21) Exchange
Input [4]: [i_manager_id#21, d_moy#60, sum#116, isEmpty#117]
Arguments: hashpartitioning(i_manager_id#21, d_moy#60, 5), ENSURE_REQUIREMENTS, [id=#118]

(22) HashAggregate [codegen id : 5]
Input [4]: [i_manager_id#21, d_moy#60, sum#116, isEmpty#117]
Keys [2]: [i_manager_id#21, d_moy#60]
Functions [1]: [sum(_pushedexpression#113)]
Aggregate Attributes [1]: [sum(_pushedexpression#113)#119]
Results [3]: [i_manager_id#21, cast(sum(_pushedexpression#113)#119 as decimal(17,2)) AS sum_sales#120, cast(sum(_pushedexpression#113)#119 as decimal(17,2)) AS _w0#121]

(23) Exchange
Input [3]: [i_manager_id#21, sum_sales#120, _w0#121]
Arguments: hashpartitioning(i_manager_id#21, 5), ENSURE_REQUIREMENTS, [id=#122]

(24) Sort [codegen id : 6]
Input [3]: [i_manager_id#21, sum_sales#120, _w0#121]
Arguments: [i_manager_id#21 ASC NULLS FIRST], false, 0

(25) Window
Input [3]: [i_manager_id#21, sum_sales#120, _w0#121]
Arguments: [avg(_w0#121) windowspecdefinition(i_manager_id#21, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#123], [i_manager_id#21]

(26) Filter [codegen id : 7]
Input [4]: [i_manager_id#21, sum_sales#120, _w0#121, avg_monthly_sales#123]
Condition : (isnotnull(avg_monthly_sales#123) AND ((avg_monthly_sales#123 > 0.000000) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#120 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#123 as decimal(22,6)))), DecimalType(22,6)))) / promote_precision(cast(avg_monthly_sales#123 as decimal(22,6)))), DecimalType(38,16)) > 0.1000000000000000)))

(27) Project [codegen id : 7]
Output [3]: [i_manager_id#21, sum_sales#120, avg_monthly_sales#123]
Input [4]: [i_manager_id#21, sum_sales#120, _w0#121, avg_monthly_sales#123]

(28) TakeOrderedAndProject
Input [3]: [i_manager_id#21, sum_sales#120, avg_monthly_sales#123]
Arguments: 100, [i_manager_id#21 ASC NULLS FIRST, avg_monthly_sales#123 ASC NULLS FIRST, sum_sales#120 ASC NULLS FIRST], [i_manager_id#21, sum_sales#120, avg_monthly_sales#123]

===== Subqueries =====

Subquery:1 Hosting operator id = 5 Hosting Expression = ss_sold_date_sk#50 IN dynamicpruning#51
BroadcastExchange (32)
+- * Filter (31)
   +- * ColumnarToRow (30)
      +- Scan parquet default.date_dim (29)


(29) Scan parquet default.date_dim
Output [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_month_seq, [1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230]), GreaterThanOrEqual(d_date_sk,2452123), LessThanOrEqual(d_date_sk,2452487), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(30) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]

(31) Filter [codegen id : 1]
Input [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]
Condition : (((d_month_seq#55 INSET 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230 AND (d_date_sk#52 >= 2452123)) AND (d_date_sk#52 <= 2452487)) AND isnotnull(d_date_sk#52))

(32) BroadcastExchange
Input [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#124]


