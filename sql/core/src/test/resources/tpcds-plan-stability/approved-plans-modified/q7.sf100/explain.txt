== Physical Plan ==
TakeOrderedAndProject (32)
+- * HashAggregate (31)
   +- Exchange (30)
      +- * HashAggregate (29)
         +- * Project (28)
            +- * BroadcastHashJoin Inner BuildRight (27)
               :- * Project (21)
               :  +- * HashAggregate (20)
               :     +- * Project (19)
               :        +- * SortMergeJoin Inner (18)
               :           :- * Sort (12)
               :           :  +- Exchange (11)
               :           :     +- * BroadcastHashJoin Inner BuildRight (10)
               :           :        :- * BroadcastHashJoin Inner BuildRight (5)
               :           :        :  :- * Filter (3)
               :           :        :  :  +- * ColumnarToRow (2)
               :           :        :  :     +- Scan parquet default.store_sales (1)
               :           :        :  +- ReusedExchange (4)
               :           :        +- BroadcastExchange (9)
               :           :           +- * Filter (8)
               :           :              +- * ColumnarToRow (7)
               :           :                 +- Scan parquet default.customer_demographics (6)
               :           +- * Sort (17)
               :              +- Exchange (16)
               :                 +- * Filter (15)
               :                    +- * ColumnarToRow (14)
               :                       +- Scan parquet default.item (13)
               +- BroadcastExchange (26)
                  +- * HashAggregate (25)
                     +- * Filter (24)
                        +- * ColumnarToRow (23)
                           +- Scan parquet default.promotion (22)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23), (ss_sold_date_sk#23 >= 2450815), (ss_sold_date_sk#23 <= 2451179), dynamicpruningexpression(ss_sold_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 3]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : ((isnotnull(ss_cdemo_sk#4) AND isnotnull(ss_promo_sk#8)) AND isnotnull(ss_item_sk#2))

(4) ReusedExchange [Reuses operator id: 36]
Output [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#25]
Join condition: None

(6) Scan parquet default.customer_demographics
Output [9]: [cd_demo_sk#53, cd_gender#54, cd_marital_status#55, cd_education_status#56, cd_purchase_estimate#57, cd_credit_rating#58, cd_dep_count#59, cd_dep_employed_count#60, cd_dep_college_count#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_marital_status,W), EqualTo(cd_education_status,Primary             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(7) ColumnarToRow [codegen id : 2]
Input [9]: [cd_demo_sk#53, cd_gender#54, cd_marital_status#55, cd_education_status#56, cd_purchase_estimate#57, cd_credit_rating#58, cd_dep_count#59, cd_dep_employed_count#60, cd_dep_college_count#61]

(8) Filter [codegen id : 2]
Input [9]: [cd_demo_sk#53, cd_gender#54, cd_marital_status#55, cd_education_status#56, cd_purchase_estimate#57, cd_credit_rating#58, cd_dep_count#59, cd_dep_employed_count#60, cd_dep_college_count#61]
Condition : ((((((isnotnull(cd_gender#54) AND isnotnull(cd_marital_status#55)) AND isnotnull(cd_education_status#56)) AND (cd_gender#54 = F)) AND (cd_marital_status#55 = W)) AND (cd_education_status#56 = Primary             )) AND isnotnull(cd_demo_sk#53))

(9) BroadcastExchange
Input [9]: [cd_demo_sk#53, cd_gender#54, cd_marital_status#55, cd_education_status#56, cd_purchase_estimate#57, cd_credit_rating#58, cd_dep_count#59, cd_dep_employed_count#60, cd_dep_college_count#61]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#62]

(10) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#53]
Join condition: None

(11) Exchange
Input [60]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52, cd_demo_sk#53, cd_gender#54, cd_marital_status#55, cd_education_status#56, cd_purchase_estimate#57, cd_credit_rating#58, cd_dep_count#59, cd_dep_employed_count#60, cd_dep_college_count#61]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#63]

(12) Sort [codegen id : 4]
Input [60]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52, cd_demo_sk#53, cd_gender#54, cd_marital_status#55, cd_education_status#56, cd_purchase_estimate#57, cd_credit_rating#58, cd_dep_count#59, cd_dep_employed_count#60, cd_dep_college_count#61]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet default.item
Output [22]: [i_item_sk#64, i_item_id#65, i_rec_start_date#66, i_rec_end_date#67, i_item_desc#68, i_current_price#69, i_wholesale_cost#70, i_brand_id#71, i_brand#72, i_class_id#73, i_class#74, i_category_id#75, i_category#76, i_manufact_id#77, i_manufact#78, i_size#79, i_formulation#80, i_color#81, i_units#82, i_container#83, i_manager_id#84, i_product_name#85]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(14) ColumnarToRow [codegen id : 5]
Input [22]: [i_item_sk#64, i_item_id#65, i_rec_start_date#66, i_rec_end_date#67, i_item_desc#68, i_current_price#69, i_wholesale_cost#70, i_brand_id#71, i_brand#72, i_class_id#73, i_class#74, i_category_id#75, i_category#76, i_manufact_id#77, i_manufact#78, i_size#79, i_formulation#80, i_color#81, i_units#82, i_container#83, i_manager_id#84, i_product_name#85]

(15) Filter [codegen id : 5]
Input [22]: [i_item_sk#64, i_item_id#65, i_rec_start_date#66, i_rec_end_date#67, i_item_desc#68, i_current_price#69, i_wholesale_cost#70, i_brand_id#71, i_brand#72, i_class_id#73, i_class#74, i_category_id#75, i_category#76, i_manufact_id#77, i_manufact#78, i_size#79, i_formulation#80, i_color#81, i_units#82, i_container#83, i_manager_id#84, i_product_name#85]
Condition : isnotnull(i_item_sk#64)

(16) Exchange
Input [22]: [i_item_sk#64, i_item_id#65, i_rec_start_date#66, i_rec_end_date#67, i_item_desc#68, i_current_price#69, i_wholesale_cost#70, i_brand_id#71, i_brand#72, i_class_id#73, i_class#74, i_category_id#75, i_category#76, i_manufact_id#77, i_manufact#78, i_size#79, i_formulation#80, i_color#81, i_units#82, i_container#83, i_manager_id#84, i_product_name#85]
Arguments: hashpartitioning(i_item_sk#64, 5), ENSURE_REQUIREMENTS, [id=#86]

(17) Sort [codegen id : 6]
Input [22]: [i_item_sk#64, i_item_id#65, i_rec_start_date#66, i_rec_end_date#67, i_item_desc#68, i_current_price#69, i_wholesale_cost#70, i_brand_id#71, i_brand#72, i_class_id#73, i_class#74, i_category_id#75, i_category#76, i_manufact_id#77, i_manufact#78, i_size#79, i_formulation#80, i_color#81, i_units#82, i_container#83, i_manager_id#84, i_product_name#85]
Arguments: [i_item_sk#64 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#64]
Join condition: None

(19) Project [codegen id : 8]
Output [82]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, cd_demo_sk#53, cd_gender#54, cd_marital_status#55, cd_education_status#56, cd_purchase_estimate#57, cd_credit_rating#58, cd_dep_count#59, cd_dep_employed_count#60, cd_dep_college_count#61, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52, i_item_sk#64, i_item_id#65, i_rec_start_date#66, i_rec_end_date#67, i_item_desc#68, i_current_price#69, i_wholesale_cost#70, i_brand_id#71, i_brand#72, i_class_id#73, i_class#74, i_category_id#75, i_category#76, i_manufact_id#77, i_manufact#78, i_size#79, i_formulation#80, i_color#81, i_units#82, i_container#83, i_manager_id#84, i_product_name#85]
Input [82]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52, cd_demo_sk#53, cd_gender#54, cd_marital_status#55, cd_education_status#56, cd_purchase_estimate#57, cd_credit_rating#58, cd_dep_count#59, cd_dep_employed_count#60, cd_dep_college_count#61, i_item_sk#64, i_item_id#65, i_rec_start_date#66, i_rec_end_date#67, i_item_desc#68, i_current_price#69, i_wholesale_cost#70, i_brand_id#71, i_brand#72, i_class_id#73, i_class#74, i_category_id#75, i_category#76, i_manufact_id#77, i_manufact#78, i_size#79, i_formulation#80, i_color#81, i_units#82, i_container#83, i_manager_id#84, i_product_name#85]

(20) HashAggregate [codegen id : 8]
Input [82]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, cd_demo_sk#53, cd_gender#54, cd_marital_status#55, cd_education_status#56, cd_purchase_estimate#57, cd_credit_rating#58, cd_dep_count#59, cd_dep_employed_count#60, cd_dep_college_count#61, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52, i_item_sk#64, i_item_id#65, i_rec_start_date#66, i_rec_end_date#67, i_item_desc#68, i_current_price#69, i_wholesale_cost#70, i_brand_id#71, i_brand#72, i_class_id#73, i_class#74, i_category_id#75, i_category#76, i_manufact_id#77, i_manufact#78, i_size#79, i_formulation#80, i_color#81, i_units#82, i_container#83, i_manager_id#84, i_product_name#85]
Keys [2]: [ss_promo_sk#8, i_item_id#65]
Functions [4]: [partial_avg(ss_quantity#10), partial_avg(UnscaledValue(ss_list_price#12)), partial_avg(UnscaledValue(ss_coupon_amt#19)), partial_avg(UnscaledValue(ss_sales_price#13))]
Aggregate Attributes [8]: [sum#87, count#88, sum#89, count#90, sum#91, count#92, sum#93, count#94]
Results [10]: [ss_promo_sk#8, i_item_id#65, sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102]

(21) Project [codegen id : 8]
Output [6]: [ss_promo_sk#8, i_item_id#65, sum#95 AS _pushedexpression#103, count#96 AS _pushedexpression#104, sum#97 AS _pushedexpression#105, count#98 AS _pushedexpression#106]
Input [10]: [ss_promo_sk#8, i_item_id#65, sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102]

(22) Scan parquet default.promotion
Output [19]: [p_promo_sk#107, p_promo_id#108, p_start_date_sk#109, p_end_date_sk#110, p_item_sk#111, p_cost#112, p_response_target#113, p_promo_name#114, p_channel_dmail#115, p_channel_email#116, p_channel_catalog#117, p_channel_tv#118, p_channel_radio#119, p_channel_press#120, p_channel_event#121, p_channel_demo#122, p_channel_details#123, p_purpose#124, p_discount_active#125]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [Or(EqualTo(p_channel_email,N),EqualTo(p_channel_event,N)), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_promo_id:string,p_start_date_sk:int,p_end_date_sk:int,p_item_sk:int,p_cost:decimal(15,2),p_response_target:int,p_promo_name:string,p_channel_dmail:string,p_channel_email:string,p_channel_catalog:string,p_channel_tv:string,p_channel_radio:string,p_channel_press:string,p_channel_event:string,p_channel_demo:string,p_channel_details:string,p_purpose:string,p_discount_active:string>

(23) ColumnarToRow [codegen id : 7]
Input [19]: [p_promo_sk#107, p_promo_id#108, p_start_date_sk#109, p_end_date_sk#110, p_item_sk#111, p_cost#112, p_response_target#113, p_promo_name#114, p_channel_dmail#115, p_channel_email#116, p_channel_catalog#117, p_channel_tv#118, p_channel_radio#119, p_channel_press#120, p_channel_event#121, p_channel_demo#122, p_channel_details#123, p_purpose#124, p_discount_active#125]

(24) Filter [codegen id : 7]
Input [19]: [p_promo_sk#107, p_promo_id#108, p_start_date_sk#109, p_end_date_sk#110, p_item_sk#111, p_cost#112, p_response_target#113, p_promo_name#114, p_channel_dmail#115, p_channel_email#116, p_channel_catalog#117, p_channel_tv#118, p_channel_radio#119, p_channel_press#120, p_channel_event#121, p_channel_demo#122, p_channel_details#123, p_purpose#124, p_discount_active#125]
Condition : (((p_channel_email#116 = N) OR (p_channel_event#121 = N)) AND isnotnull(p_promo_sk#107))

(25) HashAggregate [codegen id : 7]
Input [19]: [p_promo_sk#107, p_promo_id#108, p_start_date_sk#109, p_end_date_sk#110, p_item_sk#111, p_cost#112, p_response_target#113, p_promo_name#114, p_channel_dmail#115, p_channel_email#116, p_channel_catalog#117, p_channel_tv#118, p_channel_radio#119, p_channel_press#120, p_channel_event#121, p_channel_demo#122, p_channel_details#123, p_purpose#124, p_discount_active#125]
Keys [1]: [p_promo_sk#107]
Functions: []
Aggregate Attributes: []
Results [1]: [p_promo_sk#107]

(26) BroadcastExchange
Input [1]: [p_promo_sk#107]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#126]

(27) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_promo_sk#8]
Right keys [1]: [p_promo_sk#107]
Join condition: None

(28) Project [codegen id : 8]
Output [5]: [i_item_id#65, _pushedexpression#103, _pushedexpression#127, _pushedexpression#105, _pushedexpression#128]
Input [7]: [ss_promo_sk#8, i_item_id#65, _pushedexpression#103, _pushedexpression#104, _pushedexpression#105, _pushedexpression#106, p_promo_sk#107]

(29) HashAggregate [codegen id : 8]
Input [5]: [i_item_id#65, _pushedexpression#103, _pushedexpression#127, _pushedexpression#105, _pushedexpression#128]
Keys [1]: [i_item_id#65]
Functions [4]: [partial_avg(_pushedexpression#103), partial_avg(UnscaledValue(_pushedexpression#127)), partial_avg(UnscaledValue(_pushedexpression#105)), partial_avg(UnscaledValue(_pushedexpression#128))]
Aggregate Attributes [8]: [sum#129, count#130, sum#131, count#132, sum#133, count#134, sum#135, count#136]
Results [9]: [i_item_id#65, sum#137, count#138, sum#139, count#140, sum#141, count#142, sum#143, count#144]

(30) Exchange
Input [9]: [i_item_id#65, sum#137, count#138, sum#139, count#140, sum#141, count#142, sum#143, count#144]
Arguments: hashpartitioning(i_item_id#65, 5), ENSURE_REQUIREMENTS, [id=#145]

(31) HashAggregate [codegen id : 9]
Input [9]: [i_item_id#65, sum#137, count#138, sum#139, count#140, sum#141, count#142, sum#143, count#144]
Keys [1]: [i_item_id#65]
Functions [4]: [avg(_pushedexpression#103), avg(UnscaledValue(_pushedexpression#127)), avg(UnscaledValue(_pushedexpression#105)), avg(UnscaledValue(_pushedexpression#128))]
Aggregate Attributes [4]: [avg(_pushedexpression#103)#146, avg(UnscaledValue(_pushedexpression#127))#147, avg(UnscaledValue(_pushedexpression#105))#148, avg(UnscaledValue(_pushedexpression#128))#149]
Results [5]: [i_item_id#65, avg(_pushedexpression#103)#146 AS agg1#150, cast(cast((avg(UnscaledValue(_pushedexpression#127))#147 / 1000000.0) as decimal(15,10)) as decimal(11,6)) AS agg2#151, cast(cast((avg(UnscaledValue(_pushedexpression#105))#148 / 1000000.0) as decimal(15,10)) as decimal(11,6)) AS agg3#152, cast(cast((avg(UnscaledValue(_pushedexpression#128))#149 / 1000000.0) as decimal(15,10)) as decimal(11,6)) AS agg4#153]

(32) TakeOrderedAndProject
Input [5]: [i_item_id#65, agg1#150, agg2#151, agg3#152, agg4#153]
Arguments: 100, [i_item_id#65 ASC NULLS FIRST], [i_item_id#65, agg1#150, agg2#151, agg3#152, agg4#153]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#23 IN dynamicpruning#24
BroadcastExchange (36)
+- * Filter (35)
   +- * ColumnarToRow (34)
      +- Scan parquet default.date_dim (33)


(33) Scan parquet default.date_dim
Output [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), GreaterThanOrEqual(d_date_sk,2450815), LessThanOrEqual(d_date_sk,2451179), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(34) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]

(35) Filter [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Condition : ((((isnotnull(d_year#31) AND (d_year#31 = 1998)) AND (d_date_sk#25 >= 2450815)) AND (d_date_sk#25 <= 2451179)) AND isnotnull(d_date_sk#25))

(36) BroadcastExchange
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#154]


