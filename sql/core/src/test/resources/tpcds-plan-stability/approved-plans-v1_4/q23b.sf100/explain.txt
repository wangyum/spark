== Physical Plan ==
TakeOrderedAndProject (135)
+- Union (134)
   :- * HashAggregate (76)
   :  +- Exchange (75)
   :     +- * HashAggregate (74)
   :        +- * Project (73)
   :           +- * SortMergeJoin Inner (72)
   :              :- * Project (53)
   :              :  +- * BroadcastHashJoin Inner BuildRight (52)
   :              :     :- * SortMergeJoin LeftSemi (50)
   :              :     :  :- * Sort (30)
   :              :     :  :  +- Exchange (29)
   :              :     :  :     +- * Project (28)
   :              :     :  :        +- * SortMergeJoin LeftSemi (27)
   :              :     :  :           :- * Sort (5)
   :              :     :  :           :  +- Exchange (4)
   :              :     :  :           :     +- * Filter (3)
   :              :     :  :           :        +- * ColumnarToRow (2)
   :              :     :  :           :           +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- * Sort (26)
   :              :     :  :              +- * HashAggregate (25)
   :              :     :  :                 +- * Project (24)
   :              :     :  :                    +- * Filter (23)
   :              :     :  :                       +- * HashAggregate (22)
   :              :     :  :                          +- * HashAggregate (21)
   :              :     :  :                             +- * Project (20)
   :              :     :  :                                +- * SortMergeJoin Inner (19)
   :              :     :  :                                   :- * Sort (13)
   :              :     :  :                                   :  +- Exchange (12)
   :              :     :  :                                   :     +- * Project (11)
   :              :     :  :                                   :        +- * BroadcastHashJoin Inner BuildRight (10)
   :              :     :  :                                   :           :- * Filter (8)
   :              :     :  :                                   :           :  +- * ColumnarToRow (7)
   :              :     :  :                                   :           :     +- Scan parquet default.store_sales (6)
   :              :     :  :                                   :           +- ReusedExchange (9)
   :              :     :  :                                   +- * Sort (18)
   :              :     :  :                                      +- Exchange (17)
   :              :     :  :                                         +- * Filter (16)
   :              :     :  :                                            +- * ColumnarToRow (15)
   :              :     :  :                                               +- Scan parquet default.item (14)
   :              :     :  +- * Sort (49)
   :              :     :     +- * HashAggregate (48)
   :              :     :        +- * Project (47)
   :              :     :           +- * Filter (46)
   :              :     :              +- * HashAggregate (45)
   :              :     :                 +- * HashAggregate (44)
   :              :     :                    +- * Project (43)
   :              :     :                       +- * SortMergeJoin Inner (42)
   :              :     :                          :- * Sort (36)
   :              :     :                          :  +- Exchange (35)
   :              :     :                          :     +- * Project (34)
   :              :     :                          :        +- * Filter (33)
   :              :     :                          :           +- * ColumnarToRow (32)
   :              :     :                          :              +- Scan parquet default.store_sales (31)
   :              :     :                          +- * Sort (41)
   :              :     :                             +- Exchange (40)
   :              :     :                                +- * Filter (39)
   :              :     :                                   +- * ColumnarToRow (38)
   :              :     :                                      +- Scan parquet default.customer (37)
   :              :     +- ReusedExchange (51)
   :              +- * SortMergeJoin LeftSemi (71)
   :                 :- * Sort (58)
   :                 :  +- Exchange (57)
   :                 :     +- * Filter (56)
   :                 :        +- * ColumnarToRow (55)
   :                 :           +- Scan parquet default.customer (54)
   :                 +- * Sort (70)
   :                    +- * HashAggregate (69)
   :                       +- * Project (68)
   :                          +- * Filter (67)
   :                             +- * HashAggregate (66)
   :                                +- * HashAggregate (65)
   :                                   +- * Project (64)
   :                                      +- * SortMergeJoin Inner (63)
   :                                         :- * Sort (60)
   :                                         :  +- ReusedExchange (59)
   :                                         +- * Sort (62)
   :                                            +- ReusedExchange (61)
   +- * HashAggregate (133)
      +- Exchange (132)
         +- * HashAggregate (131)
            +- * Project (130)
               +- * SortMergeJoin Inner (129)
                  :- * Project (113)
                  :  +- * BroadcastHashJoin Inner BuildRight (112)
                  :     :- * SortMergeJoin LeftSemi (110)
                  :     :  :- * Sort (97)
                  :     :  :  +- Exchange (96)
                  :     :  :     +- * Project (95)
                  :     :  :        +- * SortMergeJoin LeftSemi (94)
                  :     :  :           :- * Sort (81)
                  :     :  :           :  +- Exchange (80)
                  :     :  :           :     +- * Filter (79)
                  :     :  :           :        +- * ColumnarToRow (78)
                  :     :  :           :           +- Scan parquet default.web_sales (77)
                  :     :  :           +- * Sort (93)
                  :     :  :              +- * HashAggregate (92)
                  :     :  :                 +- * Project (91)
                  :     :  :                    +- * Filter (90)
                  :     :  :                       +- * HashAggregate (89)
                  :     :  :                          +- * HashAggregate (88)
                  :     :  :                             +- * Project (87)
                  :     :  :                                +- * SortMergeJoin Inner (86)
                  :     :  :                                   :- * Sort (83)
                  :     :  :                                   :  +- ReusedExchange (82)
                  :     :  :                                   +- * Sort (85)
                  :     :  :                                      +- ReusedExchange (84)
                  :     :  +- * Sort (109)
                  :     :     +- * HashAggregate (108)
                  :     :        +- * Project (107)
                  :     :           +- * Filter (106)
                  :     :              +- * HashAggregate (105)
                  :     :                 +- * HashAggregate (104)
                  :     :                    +- * Project (103)
                  :     :                       +- * SortMergeJoin Inner (102)
                  :     :                          :- * Sort (99)
                  :     :                          :  +- ReusedExchange (98)
                  :     :                          +- * Sort (101)
                  :     :                             +- ReusedExchange (100)
                  :     +- ReusedExchange (111)
                  +- * SortMergeJoin LeftSemi (128)
                     :- * Sort (115)
                     :  +- ReusedExchange (114)
                     +- * Sort (127)
                        +- * HashAggregate (126)
                           +- * Project (125)
                              +- * Filter (124)
                                 +- * HashAggregate (123)
                                    +- * HashAggregate (122)
                                       +- * Project (121)
                                          +- * SortMergeJoin Inner (120)
                                             :- * Sort (117)
                                             :  +- ReusedExchange (116)
                                             +- * Sort (119)
                                                +- ReusedExchange (118)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(8) Filter [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Condition : isnotnull(ss_item_sk#8)

(9) ReusedExchange [Reuses operator id: 145]
Output [2]: [d_date_sk#11, d_date#12]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(11) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#12]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#11, d_date#12]

(12) Exchange
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: hashpartitioning(ss_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#13]

(13) Sort [codegen id : 5]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(14) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(15) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]

(16) Filter [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(17) Exchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#16]

(18) Sort [codegen id : 7]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(20) Project [codegen id : 8]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#17]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(21) HashAggregate [codegen id : 8]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#17]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]

(22) HashAggregate [codegen id : 8]
Input [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(23) Filter [codegen id : 8]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(24) Project [codegen id : 8]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(25) HashAggregate [codegen id : 8]
Input [1]: [item_sk#21]
Keys [1]: [item_sk#21]
Functions: []
Aggregate Attributes: []
Results [1]: [item_sk#21]

(26) Sort [codegen id : 8]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(27) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#21]
Join condition: None

(28) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(29) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(30) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(31) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(32) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(33) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(34) Project [codegen id : 11]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(35) Exchange
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: hashpartitioning(ss_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#28]

(36) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(37) Scan parquet default.customer
Output [1]: [c_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(38) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#29]

(39) Filter [codegen id : 13]
Input [1]: [c_customer_sk#29]
Condition : isnotnull(c_customer_sk#29)

(40) Exchange
Input [1]: [c_customer_sk#29]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(41) Sort [codegen id : 14]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(43) Project [codegen id : 15]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(44) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#31, isEmpty#32]
Results [3]: [c_customer_sk#29, sum#33, isEmpty#34]

(45) HashAggregate [codegen id : 15]
Input [3]: [c_customer_sk#29, sum#33, isEmpty#34]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(46) Filter [codegen id : 15]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(47) Project [codegen id : 15]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(48) HashAggregate [codegen id : 15]
Input [1]: [c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions: []
Aggregate Attributes: []
Results [1]: [c_customer_sk#29]

(49) Sort [codegen id : 15]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(51) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#39]

(52) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#39]
Join condition: None

(53) Project [codegen id : 17]
Output [3]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4]
Input [5]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#39]

(54) Scan parquet default.customer
Output [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(55) ColumnarToRow [codegen id : 18]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]

(56) Filter [codegen id : 18]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Condition : isnotnull(c_customer_sk#40)

(57) Exchange
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Arguments: hashpartitioning(c_customer_sk#40, 5), ENSURE_REQUIREMENTS, [id=#43]

(58) Sort [codegen id : 19]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Arguments: [c_customer_sk#40 ASC NULLS FIRST], false, 0

(59) ReusedExchange [Reuses operator id: 35]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(60) Sort [codegen id : 21]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(61) ReusedExchange [Reuses operator id: 40]
Output [1]: [c_customer_sk#29]

(62) Sort [codegen id : 23]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(63) SortMergeJoin [codegen id : 24]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(64) Project [codegen id : 24]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(65) HashAggregate [codegen id : 24]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#31, isEmpty#32]
Results [3]: [c_customer_sk#29, sum#33, isEmpty#34]

(66) HashAggregate [codegen id : 24]
Input [3]: [c_customer_sk#29, sum#33, isEmpty#34]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(67) Filter [codegen id : 24]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(68) Project [codegen id : 24]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(69) HashAggregate [codegen id : 24]
Input [1]: [c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions: []
Aggregate Attributes: []
Results [1]: [c_customer_sk#29]

(70) Sort [codegen id : 24]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 25]
Left keys [1]: [c_customer_sk#40]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(72) SortMergeJoin [codegen id : 26]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#40]
Join condition: None

(73) Project [codegen id : 26]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#41, c_last_name#42]
Input [6]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, c_customer_sk#40, c_first_name#41, c_last_name#42]

(74) HashAggregate [codegen id : 26]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#41, c_last_name#42]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#44, isEmpty#45]
Results [4]: [c_last_name#42, c_first_name#41, sum#46, isEmpty#47]

(75) Exchange
Input [4]: [c_last_name#42, c_first_name#41, sum#46, isEmpty#47]
Arguments: hashpartitioning(c_last_name#42, c_first_name#41, 5), ENSURE_REQUIREMENTS, [id=#48]

(76) HashAggregate [codegen id : 27]
Input [4]: [c_last_name#42, c_first_name#41, sum#46, isEmpty#47]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))#49]
Results [3]: [c_last_name#42, c_first_name#41, sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))#49 AS sales#50]

(77) Scan parquet default.web_sales
Output [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#55), dynamicpruningexpression(ws_sold_date_sk#55 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(78) ColumnarToRow [codegen id : 28]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]

(79) Filter [codegen id : 28]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Condition : isnotnull(ws_bill_customer_sk#52)

(80) Exchange
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: hashpartitioning(ws_item_sk#51, 5), ENSURE_REQUIREMENTS, [id=#56]

(81) Sort [codegen id : 29]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: [ws_item_sk#51 ASC NULLS FIRST], false, 0

(82) ReusedExchange [Reuses operator id: 12]
Output [2]: [ss_item_sk#8, d_date#12]

(83) Sort [codegen id : 32]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(84) ReusedExchange [Reuses operator id: 17]
Output [2]: [i_item_sk#14, i_item_desc#15]

(85) Sort [codegen id : 34]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(86) SortMergeJoin [codegen id : 35]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(87) Project [codegen id : 35]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#57]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(88) HashAggregate [codegen id : 35]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#57]
Keys [3]: [_groupingexpression#57, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#57, i_item_sk#14, d_date#12, count#19]

(89) HashAggregate [codegen id : 35]
Input [4]: [_groupingexpression#57, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#57, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(90) Filter [codegen id : 35]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(91) Project [codegen id : 35]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(92) HashAggregate [codegen id : 35]
Input [1]: [item_sk#21]
Keys [1]: [item_sk#21]
Functions: []
Aggregate Attributes: []
Results [1]: [item_sk#21]

(93) Sort [codegen id : 35]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(94) SortMergeJoin [codegen id : 36]
Left keys [1]: [ws_item_sk#51]
Right keys [1]: [item_sk#21]
Join condition: None

(95) Project [codegen id : 36]
Output [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]

(96) Exchange
Input [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: hashpartitioning(ws_bill_customer_sk#52, 5), ENSURE_REQUIREMENTS, [id=#58]

(97) Sort [codegen id : 37]
Input [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: [ws_bill_customer_sk#52 ASC NULLS FIRST], false, 0

(98) ReusedExchange [Reuses operator id: 35]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(99) Sort [codegen id : 39]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(100) ReusedExchange [Reuses operator id: 40]
Output [1]: [c_customer_sk#29]

(101) Sort [codegen id : 41]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(102) SortMergeJoin [codegen id : 42]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(103) Project [codegen id : 42]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(104) HashAggregate [codegen id : 42]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#59, isEmpty#60]
Results [3]: [c_customer_sk#29, sum#61, isEmpty#62]

(105) HashAggregate [codegen id : 42]
Input [3]: [c_customer_sk#29, sum#61, isEmpty#62]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(106) Filter [codegen id : 42]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(107) Project [codegen id : 42]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(108) HashAggregate [codegen id : 42]
Input [1]: [c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions: []
Aggregate Attributes: []
Results [1]: [c_customer_sk#29]

(109) Sort [codegen id : 42]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(110) SortMergeJoin [codegen id : 44]
Left keys [1]: [ws_bill_customer_sk#52]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(111) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#63]

(112) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ws_sold_date_sk#55]
Right keys [1]: [d_date_sk#63]
Join condition: None

(113) Project [codegen id : 44]
Output [3]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54]
Input [5]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55, d_date_sk#63]

(114) ReusedExchange [Reuses operator id: 57]
Output [3]: [c_customer_sk#64, c_first_name#65, c_last_name#66]

(115) Sort [codegen id : 46]
Input [3]: [c_customer_sk#64, c_first_name#65, c_last_name#66]
Arguments: [c_customer_sk#64 ASC NULLS FIRST], false, 0

(116) ReusedExchange [Reuses operator id: 35]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(117) Sort [codegen id : 48]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(118) ReusedExchange [Reuses operator id: 40]
Output [1]: [c_customer_sk#29]

(119) Sort [codegen id : 50]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(120) SortMergeJoin [codegen id : 51]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(121) Project [codegen id : 51]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(122) HashAggregate [codegen id : 51]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#59, isEmpty#60]
Results [3]: [c_customer_sk#29, sum#61, isEmpty#62]

(123) HashAggregate [codegen id : 51]
Input [3]: [c_customer_sk#29, sum#61, isEmpty#62]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(124) Filter [codegen id : 51]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(125) Project [codegen id : 51]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(126) HashAggregate [codegen id : 51]
Input [1]: [c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions: []
Aggregate Attributes: []
Results [1]: [c_customer_sk#29]

(127) Sort [codegen id : 51]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(128) SortMergeJoin [codegen id : 52]
Left keys [1]: [c_customer_sk#64]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(129) SortMergeJoin [codegen id : 53]
Left keys [1]: [ws_bill_customer_sk#52]
Right keys [1]: [c_customer_sk#64]
Join condition: None

(130) Project [codegen id : 53]
Output [4]: [ws_quantity#53, ws_list_price#54, c_first_name#65, c_last_name#66]
Input [6]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, c_customer_sk#64, c_first_name#65, c_last_name#66]

(131) HashAggregate [codegen id : 53]
Input [4]: [ws_quantity#53, ws_list_price#54, c_first_name#65, c_last_name#66]
Keys [2]: [c_last_name#66, c_first_name#65]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ws_quantity#53 as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#67, isEmpty#68]
Results [4]: [c_last_name#66, c_first_name#65, sum#69, isEmpty#70]

(132) Exchange
Input [4]: [c_last_name#66, c_first_name#65, sum#69, isEmpty#70]
Arguments: hashpartitioning(c_last_name#66, c_first_name#65, 5), ENSURE_REQUIREMENTS, [id=#71]

(133) HashAggregate [codegen id : 54]
Input [4]: [c_last_name#66, c_first_name#65, sum#69, isEmpty#70]
Keys [2]: [c_last_name#66, c_first_name#65]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#53 as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#53 as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2)))#72]
Results [3]: [c_last_name#66, c_first_name#65, sum(CheckOverflow((promote_precision(cast(ws_quantity#53 as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2)))#72 AS sales#73]

(134) Union

(135) TakeOrderedAndProject
Input [3]: [c_last_name#42, c_first_name#41, sales#50]
Arguments: 100, [c_last_name#42 ASC NULLS FIRST, c_first_name#41 ASC NULLS FIRST, sales#50 ASC NULLS FIRST], [c_last_name#42, c_first_name#41, sales#50]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (140)
+- * Project (139)
   +- * Filter (138)
      +- * ColumnarToRow (137)
         +- Scan parquet default.date_dim (136)


(136) Scan parquet default.date_dim
Output [3]: [d_date_sk#39, d_year#74, d_moy#75]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(137) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#74, d_moy#75]

(138) Filter [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#74, d_moy#75]
Condition : ((((isnotnull(d_year#74) AND isnotnull(d_moy#75)) AND (d_year#74 = 2000)) AND (d_moy#75 = 2)) AND isnotnull(d_date_sk#39))

(139) Project [codegen id : 1]
Output [1]: [d_date_sk#39]
Input [3]: [d_date_sk#39, d_year#74, d_moy#75]

(140) BroadcastExchange
Input [1]: [d_date_sk#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76]

Subquery:2 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (145)
+- * Project (144)
   +- * Filter (143)
      +- * ColumnarToRow (142)
         +- Scan parquet default.date_dim (141)


(141) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_date#12, d_year#77]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(142) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#77]

(143) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#77]
Condition : (d_year#77 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#11))

(144) Project [codegen id : 1]
Output [2]: [d_date_sk#11, d_date#12]
Input [3]: [d_date_sk#11, d_date#12, d_year#77]

(145) BroadcastExchange
Input [2]: [d_date_sk#11, d_date#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#78]

Subquery:3 Hosting operator id = 46 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (162)
+- Exchange (161)
   +- * HashAggregate (160)
      +- * HashAggregate (159)
         +- * HashAggregate (158)
            +- * Project (157)
               +- * SortMergeJoin Inner (156)
                  :- * Sort (153)
                  :  +- Exchange (152)
                  :     +- * Project (151)
                  :        +- * BroadcastHashJoin Inner BuildRight (150)
                  :           :- * Filter (148)
                  :           :  +- * ColumnarToRow (147)
                  :           :     +- Scan parquet default.store_sales (146)
                  :           +- ReusedExchange (149)
                  +- * Sort (155)
                     +- ReusedExchange (154)


(146) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81, ss_sold_date_sk#82]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#82), dynamicpruningexpression(ss_sold_date_sk#82 IN dynamicpruning#83)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(147) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81, ss_sold_date_sk#82]

(148) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81, ss_sold_date_sk#82]
Condition : isnotnull(ss_customer_sk#79)

(149) ReusedExchange [Reuses operator id: 167]
Output [1]: [d_date_sk#84]

(150) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#82]
Right keys [1]: [d_date_sk#84]
Join condition: None

(151) Project [codegen id : 2]
Output [3]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81]
Input [5]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81, ss_sold_date_sk#82, d_date_sk#84]

(152) Exchange
Input [3]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81]
Arguments: hashpartitioning(ss_customer_sk#79, 5), ENSURE_REQUIREMENTS, [id=#85]

(153) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81]
Arguments: [ss_customer_sk#79 ASC NULLS FIRST], false, 0

(154) ReusedExchange [Reuses operator id: 40]
Output [1]: [c_customer_sk#86]

(155) Sort [codegen id : 5]
Input [1]: [c_customer_sk#86]
Arguments: [c_customer_sk#86 ASC NULLS FIRST], false, 0

(156) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#79]
Right keys [1]: [c_customer_sk#86]
Join condition: None

(157) Project [codegen id : 6]
Output [3]: [ss_quantity#80, ss_sales_price#81, c_customer_sk#86]
Input [4]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81, c_customer_sk#86]

(158) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#80, ss_sales_price#81, c_customer_sk#86]
Keys [1]: [c_customer_sk#86]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#80 as decimal(12,2))) * promote_precision(cast(ss_sales_price#81 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#87, isEmpty#88]
Results [3]: [c_customer_sk#86, sum#89, isEmpty#90]

(159) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#86, sum#89, isEmpty#90]
Keys [1]: [c_customer_sk#86]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#80 as decimal(12,2))) * promote_precision(cast(ss_sales_price#81 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#80 as decimal(12,2))) * promote_precision(cast(ss_sales_price#81 as decimal(12,2)))), DecimalType(18,2)))#91]
Results [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#80 as decimal(12,2))) * promote_precision(cast(ss_sales_price#81 as decimal(12,2)))), DecimalType(18,2)))#91 AS csales#92]

(160) HashAggregate [codegen id : 6]
Input [1]: [csales#92]
Keys: []
Functions [1]: [partial_max(csales#92)]
Aggregate Attributes [1]: [max#93]
Results [1]: [max#94]

(161) Exchange
Input [1]: [max#94]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#95]

(162) HashAggregate [codegen id : 7]
Input [1]: [max#94]
Keys: []
Functions [1]: [max(csales#92)]
Aggregate Attributes [1]: [max(csales#92)#96]
Results [1]: [max(csales#92)#96 AS tpcds_cmax#97]

Subquery:4 Hosting operator id = 146 Hosting Expression = ss_sold_date_sk#82 IN dynamicpruning#83
BroadcastExchange (167)
+- * Project (166)
   +- * Filter (165)
      +- * ColumnarToRow (164)
         +- Scan parquet default.date_dim (163)


(163) Scan parquet default.date_dim
Output [2]: [d_date_sk#84, d_year#98]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(164) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#84, d_year#98]

(165) Filter [codegen id : 1]
Input [2]: [d_date_sk#84, d_year#98]
Condition : (d_year#98 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#84))

(166) Project [codegen id : 1]
Output [1]: [d_date_sk#84]
Input [2]: [d_date_sk#84, d_year#98]

(167) BroadcastExchange
Input [1]: [d_date_sk#84]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#99]

Subquery:5 Hosting operator id = 67 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]

Subquery:6 Hosting operator id = 77 Hosting Expression = ws_sold_date_sk#55 IN dynamicpruning#6

Subquery:7 Hosting operator id = 106 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]

Subquery:8 Hosting operator id = 124 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


