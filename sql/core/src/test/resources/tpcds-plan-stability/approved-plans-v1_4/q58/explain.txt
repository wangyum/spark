== Physical Plan ==
TakeOrderedAndProject (52)
+- * Project (51)
   +- * BroadcastHashJoin Inner BuildRight (50)
      :- * Project (34)
      :  +- * BroadcastHashJoin Inner BuildRight (33)
      :     :- * Filter (17)
      :     :  +- * HashAggregate (16)
      :     :     +- Exchange (15)
      :     :        +- * HashAggregate (14)
      :     :           +- * Project (13)
      :     :              +- * BroadcastHashJoin Inner BuildRight (12)
      :     :                 :- * Project (10)
      :     :                 :  +- * HashAggregate (9)
      :     :                 :     +- * BroadcastHashJoin Inner BuildRight (8)
      :     :                 :        :- * Filter (3)
      :     :                 :        :  +- * ColumnarToRow (2)
      :     :                 :        :     +- Scan parquet default.store_sales (1)
      :     :                 :        +- BroadcastExchange (7)
      :     :                 :           +- * Filter (6)
      :     :                 :              +- * ColumnarToRow (5)
      :     :                 :                 +- Scan parquet default.item (4)
      :     :                 +- ReusedExchange (11)
      :     +- BroadcastExchange (32)
      :        +- * Filter (31)
      :           +- * HashAggregate (30)
      :              +- Exchange (29)
      :                 +- * HashAggregate (28)
      :                    +- * Project (27)
      :                       +- * BroadcastHashJoin Inner BuildRight (26)
      :                          :- * Project (24)
      :                          :  +- * HashAggregate (23)
      :                          :     +- * BroadcastHashJoin Inner BuildRight (22)
      :                          :        :- * Filter (20)
      :                          :        :  +- * ColumnarToRow (19)
      :                          :        :     +- Scan parquet default.catalog_sales (18)
      :                          :        +- ReusedExchange (21)
      :                          +- ReusedExchange (25)
      +- BroadcastExchange (49)
         +- * Filter (48)
            +- * HashAggregate (47)
               +- Exchange (46)
                  +- * HashAggregate (45)
                     +- * Project (44)
                        +- * BroadcastHashJoin Inner BuildRight (43)
                           :- * Project (41)
                           :  +- * HashAggregate (40)
                           :     +- * BroadcastHashJoin Inner BuildRight (39)
                           :        :- * Filter (37)
                           :        :  +- * ColumnarToRow (36)
                           :        :     +- Scan parquet default.web_sales (35)
                           :        +- ReusedExchange (38)
                           +- ReusedExchange (42)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23), dynamicpruningexpression(ss_sold_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 4]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : isnotnull(ss_item_sk#2)

(4) Scan parquet default.item
Output [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(5) ColumnarToRow [codegen id : 1]
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]

(6) Filter [codegen id : 1]
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Condition : (isnotnull(i_item_sk#25) AND isnotnull(i_item_id#26))

(7) BroadcastExchange
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#25]
Join condition: None

(9) HashAggregate [codegen id : 4]
Input [45]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Keys [2]: [ss_sold_date_sk#23, i_item_id#26]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#15))]
Aggregate Attributes [1]: [sum#48]
Results [3]: [ss_sold_date_sk#23, i_item_id#26, sum#49]

(10) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#23, i_item_id#26, sum#49 AS _pushedexpression#50]
Input [3]: [ss_sold_date_sk#23, i_item_id#26, sum#49]

(11) ReusedExchange [Reuses operator id: 64]
Output [1]: [d_date_sk#51]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#51]
Join condition: None

(13) Project [codegen id : 4]
Output [2]: [i_item_id#26, _pushedexpression#52]
Input [4]: [ss_sold_date_sk#23, i_item_id#26, _pushedexpression#50, d_date_sk#51]

(14) HashAggregate [codegen id : 4]
Input [2]: [i_item_id#26, _pushedexpression#52]
Keys [1]: [i_item_id#26]
Functions [1]: [partial_sum(_pushedexpression#52)]
Aggregate Attributes [2]: [sum#53, isEmpty#54]
Results [3]: [i_item_id#26, sum#55, isEmpty#56]

(15) Exchange
Input [3]: [i_item_id#26, sum#55, isEmpty#56]
Arguments: hashpartitioning(i_item_id#26, 5), ENSURE_REQUIREMENTS, [id=#57]

(16) HashAggregate [codegen id : 15]
Input [3]: [i_item_id#26, sum#55, isEmpty#56]
Keys [1]: [i_item_id#26]
Functions [1]: [sum(_pushedexpression#52)]
Aggregate Attributes [1]: [sum(_pushedexpression#52)#58]
Results [2]: [i_item_id#26 AS item_id#59, cast(sum(_pushedexpression#52)#58 as decimal(17,2)) AS ss_item_rev#60]

(17) Filter [codegen id : 15]
Input [2]: [item_id#59, ss_item_rev#60]
Condition : isnotnull(ss_item_rev#60)

(18) Scan parquet default.catalog_sales
Output [34]: [cs_sold_time_sk#61, cs_ship_date_sk#62, cs_bill_customer_sk#63, cs_bill_cdemo_sk#64, cs_bill_hdemo_sk#65, cs_bill_addr_sk#66, cs_ship_customer_sk#67, cs_ship_cdemo_sk#68, cs_ship_hdemo_sk#69, cs_ship_addr_sk#70, cs_call_center_sk#71, cs_catalog_page_sk#72, cs_ship_mode_sk#73, cs_warehouse_sk#74, cs_item_sk#75, cs_promo_sk#76, cs_order_number#77, cs_quantity#78, cs_wholesale_cost#79, cs_list_price#80, cs_sales_price#81, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, cs_ext_tax#86, cs_coupon_amt#87, cs_ext_ship_cost#88, cs_net_paid#89, cs_net_paid_inc_tax#90, cs_net_paid_inc_ship#91, cs_net_paid_inc_ship_tax#92, cs_net_profit#93, cs_sold_date_sk#94]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#94), dynamicpruningexpression(cs_sold_date_sk#94 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_time_sk:int,cs_ship_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_bill_addr_sk:int,cs_ship_customer_sk:int,cs_ship_cdemo_sk:int,cs_ship_hdemo_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_catalog_page_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2),cs_ext_tax:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_ext_ship_cost:decimal(7,2),cs_net_paid:decimal(7,2),cs_net_paid_inc_tax:decimal(7,2),cs_net_paid_inc_ship:decimal(7,2),cs_net_paid_inc_ship_tax:decimal(7,2),cs_net_profit:decimal(7,2)>

(19) ColumnarToRow [codegen id : 8]
Input [34]: [cs_sold_time_sk#61, cs_ship_date_sk#62, cs_bill_customer_sk#63, cs_bill_cdemo_sk#64, cs_bill_hdemo_sk#65, cs_bill_addr_sk#66, cs_ship_customer_sk#67, cs_ship_cdemo_sk#68, cs_ship_hdemo_sk#69, cs_ship_addr_sk#70, cs_call_center_sk#71, cs_catalog_page_sk#72, cs_ship_mode_sk#73, cs_warehouse_sk#74, cs_item_sk#75, cs_promo_sk#76, cs_order_number#77, cs_quantity#78, cs_wholesale_cost#79, cs_list_price#80, cs_sales_price#81, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, cs_ext_tax#86, cs_coupon_amt#87, cs_ext_ship_cost#88, cs_net_paid#89, cs_net_paid_inc_tax#90, cs_net_paid_inc_ship#91, cs_net_paid_inc_ship_tax#92, cs_net_profit#93, cs_sold_date_sk#94]

(20) Filter [codegen id : 8]
Input [34]: [cs_sold_time_sk#61, cs_ship_date_sk#62, cs_bill_customer_sk#63, cs_bill_cdemo_sk#64, cs_bill_hdemo_sk#65, cs_bill_addr_sk#66, cs_ship_customer_sk#67, cs_ship_cdemo_sk#68, cs_ship_hdemo_sk#69, cs_ship_addr_sk#70, cs_call_center_sk#71, cs_catalog_page_sk#72, cs_ship_mode_sk#73, cs_warehouse_sk#74, cs_item_sk#75, cs_promo_sk#76, cs_order_number#77, cs_quantity#78, cs_wholesale_cost#79, cs_list_price#80, cs_sales_price#81, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, cs_ext_tax#86, cs_coupon_amt#87, cs_ext_ship_cost#88, cs_net_paid#89, cs_net_paid_inc_tax#90, cs_net_paid_inc_ship#91, cs_net_paid_inc_ship_tax#92, cs_net_profit#93, cs_sold_date_sk#94]
Condition : isnotnull(cs_item_sk#75)

(21) ReusedExchange [Reuses operator id: 7]
Output [22]: [i_item_sk#95, i_item_id#96, i_rec_start_date#97, i_rec_end_date#98, i_item_desc#99, i_current_price#100, i_wholesale_cost#101, i_brand_id#102, i_brand#103, i_class_id#104, i_class#105, i_category_id#106, i_category#107, i_manufact_id#108, i_manufact#109, i_size#110, i_formulation#111, i_color#112, i_units#113, i_container#114, i_manager_id#115, i_product_name#116]

(22) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#75]
Right keys [1]: [i_item_sk#95]
Join condition: None

(23) HashAggregate [codegen id : 8]
Input [56]: [cs_sold_time_sk#61, cs_ship_date_sk#62, cs_bill_customer_sk#63, cs_bill_cdemo_sk#64, cs_bill_hdemo_sk#65, cs_bill_addr_sk#66, cs_ship_customer_sk#67, cs_ship_cdemo_sk#68, cs_ship_hdemo_sk#69, cs_ship_addr_sk#70, cs_call_center_sk#71, cs_catalog_page_sk#72, cs_ship_mode_sk#73, cs_warehouse_sk#74, cs_item_sk#75, cs_promo_sk#76, cs_order_number#77, cs_quantity#78, cs_wholesale_cost#79, cs_list_price#80, cs_sales_price#81, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, cs_ext_tax#86, cs_coupon_amt#87, cs_ext_ship_cost#88, cs_net_paid#89, cs_net_paid_inc_tax#90, cs_net_paid_inc_ship#91, cs_net_paid_inc_ship_tax#92, cs_net_profit#93, cs_sold_date_sk#94, i_item_sk#95, i_item_id#96, i_rec_start_date#97, i_rec_end_date#98, i_item_desc#99, i_current_price#100, i_wholesale_cost#101, i_brand_id#102, i_brand#103, i_class_id#104, i_class#105, i_category_id#106, i_category#107, i_manufact_id#108, i_manufact#109, i_size#110, i_formulation#111, i_color#112, i_units#113, i_container#114, i_manager_id#115, i_product_name#116]
Keys [2]: [cs_sold_date_sk#94, i_item_id#96]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#83))]
Aggregate Attributes [1]: [sum#117]
Results [3]: [cs_sold_date_sk#94, i_item_id#96, sum#118]

(24) Project [codegen id : 8]
Output [3]: [cs_sold_date_sk#94, i_item_id#96, sum#118 AS _pushedexpression#119]
Input [3]: [cs_sold_date_sk#94, i_item_id#96, sum#118]

(25) ReusedExchange [Reuses operator id: 64]
Output [1]: [d_date_sk#120]

(26) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#94]
Right keys [1]: [d_date_sk#120]
Join condition: None

(27) Project [codegen id : 8]
Output [2]: [i_item_id#96, _pushedexpression#121]
Input [4]: [cs_sold_date_sk#94, i_item_id#96, _pushedexpression#119, d_date_sk#120]

(28) HashAggregate [codegen id : 8]
Input [2]: [i_item_id#96, _pushedexpression#121]
Keys [1]: [i_item_id#96]
Functions [1]: [partial_sum(_pushedexpression#121)]
Aggregate Attributes [2]: [sum#122, isEmpty#123]
Results [3]: [i_item_id#96, sum#124, isEmpty#125]

(29) Exchange
Input [3]: [i_item_id#96, sum#124, isEmpty#125]
Arguments: hashpartitioning(i_item_id#96, 5), ENSURE_REQUIREMENTS, [id=#126]

(30) HashAggregate [codegen id : 9]
Input [3]: [i_item_id#96, sum#124, isEmpty#125]
Keys [1]: [i_item_id#96]
Functions [1]: [sum(_pushedexpression#121)]
Aggregate Attributes [1]: [sum(_pushedexpression#121)#127]
Results [2]: [i_item_id#96 AS item_id#128, cast(sum(_pushedexpression#121)#127 as decimal(17,2)) AS cs_item_rev#129]

(31) Filter [codegen id : 9]
Input [2]: [item_id#128, cs_item_rev#129]
Condition : isnotnull(cs_item_rev#129)

(32) BroadcastExchange
Input [2]: [item_id#128, cs_item_rev#129]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#130]

(33) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [item_id#59]
Right keys [1]: [item_id#128]
Join condition: ((((cast(ss_item_rev#60 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#129)), DecimalType(19,3))) AND (cast(ss_item_rev#60 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#129)), DecimalType(20,3)))) AND (cast(cs_item_rev#129 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#60)), DecimalType(19,3)))) AND (cast(cs_item_rev#129 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#60)), DecimalType(20,3))))

(34) Project [codegen id : 15]
Output [3]: [item_id#59, ss_item_rev#60, cs_item_rev#129]
Input [4]: [item_id#59, ss_item_rev#60, item_id#128, cs_item_rev#129]

(35) Scan parquet default.web_sales
Output [34]: [ws_sold_time_sk#131, ws_ship_date_sk#132, ws_item_sk#133, ws_bill_customer_sk#134, ws_bill_cdemo_sk#135, ws_bill_hdemo_sk#136, ws_bill_addr_sk#137, ws_ship_customer_sk#138, ws_ship_cdemo_sk#139, ws_ship_hdemo_sk#140, ws_ship_addr_sk#141, ws_web_page_sk#142, ws_web_site_sk#143, ws_ship_mode_sk#144, ws_warehouse_sk#145, ws_promo_sk#146, ws_order_number#147, ws_quantity#148, ws_wholesale_cost#149, ws_list_price#150, ws_sales_price#151, ws_ext_discount_amt#152, ws_ext_sales_price#153, ws_ext_wholesale_cost#154, ws_ext_list_price#155, ws_ext_tax#156, ws_coupon_amt#157, ws_ext_ship_cost#158, ws_net_paid#159, ws_net_paid_inc_tax#160, ws_net_paid_inc_ship#161, ws_net_paid_inc_ship_tax#162, ws_net_profit#163, ws_sold_date_sk#164]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#164), dynamicpruningexpression(ws_sold_date_sk#164 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_sold_time_sk:int,ws_ship_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_bill_cdemo_sk:int,ws_bill_hdemo_sk:int,ws_bill_addr_sk:int,ws_ship_customer_sk:int,ws_ship_cdemo_sk:int,ws_ship_hdemo_sk:int,ws_ship_addr_sk:int,ws_web_page_sk:int,ws_web_site_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_promo_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_list_price:decimal(7,2),ws_sales_price:decimal(7,2),ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2),ws_ext_tax:decimal(7,2),ws_coupon_amt:decimal(7,2),ws_ext_ship_cost:decimal(7,2),ws_net_paid:decimal(7,2),ws_net_paid_inc_tax:decimal(7,2),ws_net_paid_inc_ship:decimal(7,2),ws_net_paid_inc_ship_tax:decimal(7,2),ws_net_profit:decimal(7,2)>

(36) ColumnarToRow [codegen id : 13]
Input [34]: [ws_sold_time_sk#131, ws_ship_date_sk#132, ws_item_sk#133, ws_bill_customer_sk#134, ws_bill_cdemo_sk#135, ws_bill_hdemo_sk#136, ws_bill_addr_sk#137, ws_ship_customer_sk#138, ws_ship_cdemo_sk#139, ws_ship_hdemo_sk#140, ws_ship_addr_sk#141, ws_web_page_sk#142, ws_web_site_sk#143, ws_ship_mode_sk#144, ws_warehouse_sk#145, ws_promo_sk#146, ws_order_number#147, ws_quantity#148, ws_wholesale_cost#149, ws_list_price#150, ws_sales_price#151, ws_ext_discount_amt#152, ws_ext_sales_price#153, ws_ext_wholesale_cost#154, ws_ext_list_price#155, ws_ext_tax#156, ws_coupon_amt#157, ws_ext_ship_cost#158, ws_net_paid#159, ws_net_paid_inc_tax#160, ws_net_paid_inc_ship#161, ws_net_paid_inc_ship_tax#162, ws_net_profit#163, ws_sold_date_sk#164]

(37) Filter [codegen id : 13]
Input [34]: [ws_sold_time_sk#131, ws_ship_date_sk#132, ws_item_sk#133, ws_bill_customer_sk#134, ws_bill_cdemo_sk#135, ws_bill_hdemo_sk#136, ws_bill_addr_sk#137, ws_ship_customer_sk#138, ws_ship_cdemo_sk#139, ws_ship_hdemo_sk#140, ws_ship_addr_sk#141, ws_web_page_sk#142, ws_web_site_sk#143, ws_ship_mode_sk#144, ws_warehouse_sk#145, ws_promo_sk#146, ws_order_number#147, ws_quantity#148, ws_wholesale_cost#149, ws_list_price#150, ws_sales_price#151, ws_ext_discount_amt#152, ws_ext_sales_price#153, ws_ext_wholesale_cost#154, ws_ext_list_price#155, ws_ext_tax#156, ws_coupon_amt#157, ws_ext_ship_cost#158, ws_net_paid#159, ws_net_paid_inc_tax#160, ws_net_paid_inc_ship#161, ws_net_paid_inc_ship_tax#162, ws_net_profit#163, ws_sold_date_sk#164]
Condition : isnotnull(ws_item_sk#133)

(38) ReusedExchange [Reuses operator id: 7]
Output [22]: [i_item_sk#165, i_item_id#166, i_rec_start_date#167, i_rec_end_date#168, i_item_desc#169, i_current_price#170, i_wholesale_cost#171, i_brand_id#172, i_brand#173, i_class_id#174, i_class#175, i_category_id#176, i_category#177, i_manufact_id#178, i_manufact#179, i_size#180, i_formulation#181, i_color#182, i_units#183, i_container#184, i_manager_id#185, i_product_name#186]

(39) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_item_sk#133]
Right keys [1]: [i_item_sk#165]
Join condition: None

(40) HashAggregate [codegen id : 13]
Input [56]: [ws_sold_time_sk#131, ws_ship_date_sk#132, ws_item_sk#133, ws_bill_customer_sk#134, ws_bill_cdemo_sk#135, ws_bill_hdemo_sk#136, ws_bill_addr_sk#137, ws_ship_customer_sk#138, ws_ship_cdemo_sk#139, ws_ship_hdemo_sk#140, ws_ship_addr_sk#141, ws_web_page_sk#142, ws_web_site_sk#143, ws_ship_mode_sk#144, ws_warehouse_sk#145, ws_promo_sk#146, ws_order_number#147, ws_quantity#148, ws_wholesale_cost#149, ws_list_price#150, ws_sales_price#151, ws_ext_discount_amt#152, ws_ext_sales_price#153, ws_ext_wholesale_cost#154, ws_ext_list_price#155, ws_ext_tax#156, ws_coupon_amt#157, ws_ext_ship_cost#158, ws_net_paid#159, ws_net_paid_inc_tax#160, ws_net_paid_inc_ship#161, ws_net_paid_inc_ship_tax#162, ws_net_profit#163, ws_sold_date_sk#164, i_item_sk#165, i_item_id#166, i_rec_start_date#167, i_rec_end_date#168, i_item_desc#169, i_current_price#170, i_wholesale_cost#171, i_brand_id#172, i_brand#173, i_class_id#174, i_class#175, i_category_id#176, i_category#177, i_manufact_id#178, i_manufact#179, i_size#180, i_formulation#181, i_color#182, i_units#183, i_container#184, i_manager_id#185, i_product_name#186]
Keys [2]: [ws_sold_date_sk#164, i_item_id#166]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#153))]
Aggregate Attributes [1]: [sum#187]
Results [3]: [ws_sold_date_sk#164, i_item_id#166, sum#188]

(41) Project [codegen id : 13]
Output [3]: [ws_sold_date_sk#164, i_item_id#166, sum#188 AS _pushedexpression#189]
Input [3]: [ws_sold_date_sk#164, i_item_id#166, sum#188]

(42) ReusedExchange [Reuses operator id: 64]
Output [1]: [d_date_sk#190]

(43) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#164]
Right keys [1]: [d_date_sk#190]
Join condition: None

(44) Project [codegen id : 13]
Output [2]: [i_item_id#166, _pushedexpression#191]
Input [4]: [ws_sold_date_sk#164, i_item_id#166, _pushedexpression#189, d_date_sk#190]

(45) HashAggregate [codegen id : 13]
Input [2]: [i_item_id#166, _pushedexpression#191]
Keys [1]: [i_item_id#166]
Functions [1]: [partial_sum(_pushedexpression#191)]
Aggregate Attributes [2]: [sum#192, isEmpty#193]
Results [3]: [i_item_id#166, sum#194, isEmpty#195]

(46) Exchange
Input [3]: [i_item_id#166, sum#194, isEmpty#195]
Arguments: hashpartitioning(i_item_id#166, 5), ENSURE_REQUIREMENTS, [id=#196]

(47) HashAggregate [codegen id : 14]
Input [3]: [i_item_id#166, sum#194, isEmpty#195]
Keys [1]: [i_item_id#166]
Functions [1]: [sum(_pushedexpression#191)]
Aggregate Attributes [1]: [sum(_pushedexpression#191)#197]
Results [2]: [i_item_id#166 AS item_id#198, cast(sum(_pushedexpression#191)#197 as decimal(17,2)) AS ws_item_rev#199]

(48) Filter [codegen id : 14]
Input [2]: [item_id#198, ws_item_rev#199]
Condition : isnotnull(ws_item_rev#199)

(49) BroadcastExchange
Input [2]: [item_id#198, ws_item_rev#199]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#200]

(50) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [item_id#59]
Right keys [1]: [item_id#198]
Join condition: ((((((((cast(ss_item_rev#60 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#199)), DecimalType(19,3))) AND (cast(ss_item_rev#60 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#199)), DecimalType(20,3)))) AND (cast(cs_item_rev#129 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#199)), DecimalType(19,3)))) AND (cast(cs_item_rev#129 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#199)), DecimalType(20,3)))) AND (cast(ws_item_rev#199 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#60)), DecimalType(19,3)))) AND (cast(ws_item_rev#199 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#60)), DecimalType(20,3)))) AND (cast(ws_item_rev#199 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#129)), DecimalType(19,3)))) AND (cast(ws_item_rev#199 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#129)), DecimalType(20,3))))

(51) Project [codegen id : 15]
Output [8]: [item_id#59, ss_item_rev#60, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#60 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#60 as decimal(18,2))) + promote_precision(cast(cs_item_rev#129 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#199 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS ss_dev#201, cs_item_rev#129, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#129 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#60 as decimal(18,2))) + promote_precision(cast(cs_item_rev#129 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#199 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS cs_dev#202, ws_item_rev#199, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#199 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#60 as decimal(18,2))) + promote_precision(cast(cs_item_rev#129 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#199 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS ws_dev#203, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#60 as decimal(18,2))) + promote_precision(cast(cs_item_rev#129 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#199 as decimal(19,2)))), DecimalType(19,2))) / 3.00), DecimalType(23,6)) AS average#204]
Input [5]: [item_id#59, ss_item_rev#60, cs_item_rev#129, item_id#198, ws_item_rev#199]

(52) TakeOrderedAndProject
Input [8]: [item_id#59, ss_item_rev#60, ss_dev#201, cs_item_rev#129, cs_dev#202, ws_item_rev#199, ws_dev#203, average#204]
Arguments: 100, [item_id#59 ASC NULLS FIRST, ss_item_rev#60 ASC NULLS FIRST], [item_id#59, ss_item_rev#60, ss_dev#201, cs_item_rev#129, cs_dev#202, ws_item_rev#199, ws_dev#203, average#204]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#23 IN dynamicpruning#24
BroadcastExchange (64)
+- * HashAggregate (63)
   +- * BroadcastHashJoin LeftSemi BuildRight (62)
      :- * Filter (55)
      :  +- * ColumnarToRow (54)
      :     +- Scan parquet default.date_dim (53)
      +- BroadcastExchange (61)
         +- * HashAggregate (60)
            +- * Project (59)
               +- * Filter (58)
                  +- * ColumnarToRow (57)
                     +- Scan parquet default.date_dim (56)


(53) Scan parquet default.date_dim
Output [28]: [d_date_sk#51, d_date_id#205, d_date#206, d_month_seq#207, d_week_seq#208, d_quarter_seq#209, d_year#210, d_dow#211, d_moy#212, d_dom#213, d_qoy#214, d_fy_year#215, d_fy_quarter_seq#216, d_fy_week_seq#217, d_day_name#218, d_quarter_name#219, d_holiday#220, d_weekend#221, d_following_holiday#222, d_first_dom#223, d_last_dom#224, d_same_day_ly#225, d_same_day_lq#226, d_current_day#227, d_current_week#228, d_current_month#229, d_current_quarter#230, d_current_year#231]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(54) ColumnarToRow [codegen id : 2]
Input [28]: [d_date_sk#51, d_date_id#205, d_date#206, d_month_seq#207, d_week_seq#208, d_quarter_seq#209, d_year#210, d_dow#211, d_moy#212, d_dom#213, d_qoy#214, d_fy_year#215, d_fy_quarter_seq#216, d_fy_week_seq#217, d_day_name#218, d_quarter_name#219, d_holiday#220, d_weekend#221, d_following_holiday#222, d_first_dom#223, d_last_dom#224, d_same_day_ly#225, d_same_day_lq#226, d_current_day#227, d_current_week#228, d_current_month#229, d_current_quarter#230, d_current_year#231]

(55) Filter [codegen id : 2]
Input [28]: [d_date_sk#51, d_date_id#205, d_date#206, d_month_seq#207, d_week_seq#208, d_quarter_seq#209, d_year#210, d_dow#211, d_moy#212, d_dom#213, d_qoy#214, d_fy_year#215, d_fy_quarter_seq#216, d_fy_week_seq#217, d_day_name#218, d_quarter_name#219, d_holiday#220, d_weekend#221, d_following_holiday#222, d_first_dom#223, d_last_dom#224, d_same_day_ly#225, d_same_day_lq#226, d_current_day#227, d_current_week#228, d_current_month#229, d_current_quarter#230, d_current_year#231]
Condition : isnotnull(d_date_sk#51)

(56) Scan parquet default.date_dim
Output [2]: [d_date#232, d_week_seq#233]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(57) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#232, d_week_seq#233]

(58) Filter [codegen id : 1]
Input [2]: [d_date#232, d_week_seq#233]
Condition : (isnotnull(d_week_seq#233) AND (d_week_seq#233 = Subquery scalar-subquery#234, [id=#235]))

(59) Project [codegen id : 1]
Output [1]: [d_date#232]
Input [2]: [d_date#232, d_week_seq#233]

(60) HashAggregate [codegen id : 1]
Input [1]: [d_date#232]
Keys [1]: [d_date#232]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date#232]

(61) BroadcastExchange
Input [1]: [d_date#232]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#236]

(62) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_date#206]
Right keys [1]: [d_date#232]
Join condition: None

(63) HashAggregate [codegen id : 2]
Input [28]: [d_date_sk#51, d_date_id#205, d_date#206, d_month_seq#207, d_week_seq#208, d_quarter_seq#209, d_year#210, d_dow#211, d_moy#212, d_dom#213, d_qoy#214, d_fy_year#215, d_fy_quarter_seq#216, d_fy_week_seq#217, d_day_name#218, d_quarter_name#219, d_holiday#220, d_weekend#221, d_following_holiday#222, d_first_dom#223, d_last_dom#224, d_same_day_ly#225, d_same_day_lq#226, d_current_day#227, d_current_week#228, d_current_month#229, d_current_quarter#230, d_current_year#231]
Keys [1]: [d_date_sk#51]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#51]

(64) BroadcastExchange
Input [1]: [d_date_sk#51]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#237]

Subquery:2 Hosting operator id = 58 Hosting Expression = Subquery scalar-subquery#234, [id=#235]
* Project (68)
+- * Filter (67)
   +- * ColumnarToRow (66)
      +- Scan parquet default.date_dim (65)


(65) Scan parquet default.date_dim
Output [2]: [d_date#238, d_week_seq#239]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(66) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#238, d_week_seq#239]

(67) Filter [codegen id : 1]
Input [2]: [d_date#238, d_week_seq#239]
Condition : (isnotnull(d_date#238) AND (d_date#238 = 2000-01-03))

(68) Project [codegen id : 1]
Output [1]: [d_week_seq#239]
Input [2]: [d_date#238, d_week_seq#239]

Subquery:3 Hosting operator id = 18 Hosting Expression = cs_sold_date_sk#94 IN dynamicpruning#24

Subquery:4 Hosting operator id = 35 Hosting Expression = ws_sold_date_sk#164 IN dynamicpruning#24


