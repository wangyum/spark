== Physical Plan ==
CollectLimit (28)
+- * Project (27)
   +- * BroadcastHashJoin Inner BuildRight (26)
      :- * Project (24)
      :  +- * BroadcastHashJoin Inner BuildRight (23)
      :     :- * Project (10)
      :     :  +- * BroadcastHashJoin Inner BuildRight (9)
      :     :     :- * Filter (3)
      :     :     :  +- * ColumnarToRow (2)
      :     :     :     +- Scan parquet default.catalog_sales (1)
      :     :     +- BroadcastExchange (8)
      :     :        +- * Project (7)
      :     :           +- * Filter (6)
      :     :              +- * ColumnarToRow (5)
      :     :                 +- Scan parquet default.item (4)
      :     +- BroadcastExchange (22)
      :        +- * Filter (21)
      :           +- * HashAggregate (20)
      :              +- Exchange (19)
      :                 +- * HashAggregate (18)
      :                    +- * Project (17)
      :                       +- * BroadcastHashJoin Inner BuildRight (16)
      :                          :- * HashAggregate (14)
      :                          :  +- * Filter (13)
      :                          :     +- * ColumnarToRow (12)
      :                          :        +- Scan parquet default.catalog_sales (11)
      :                          +- ReusedExchange (15)
      +- ReusedExchange (25)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_ext_discount_amt)]
ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 6]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 6]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Condition : (isnotnull(cs_item_sk#1) AND isnotnull(cs_ext_discount_amt#2))

(4) Scan parquet default.item
Output [2]: [i_item_sk#5, i_manufact_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,977), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_manufact_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#5, i_manufact_id#6]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#5, i_manufact_id#6]
Condition : ((isnotnull(i_manufact_id#6) AND (i_manufact_id#6 = 977)) AND isnotnull(i_item_sk#5))

(7) Project [codegen id : 1]
Output [1]: [i_item_sk#5]
Input [2]: [i_item_sk#5, i_manufact_id#6]

(8) BroadcastExchange
Input [1]: [i_item_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#1]
Right keys [1]: [i_item_sk#5]
Join condition: None

(10) Project [codegen id : 6]
Output [3]: [cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#5]
Input [4]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#5]

(11) Scan parquet default.catalog_sales
Output [34]: [cs_sold_time_sk#8, cs_ship_date_sk#9, cs_bill_customer_sk#10, cs_bill_cdemo_sk#11, cs_bill_hdemo_sk#12, cs_bill_addr_sk#13, cs_ship_customer_sk#14, cs_ship_cdemo_sk#15, cs_ship_hdemo_sk#16, cs_ship_addr_sk#17, cs_call_center_sk#18, cs_catalog_page_sk#19, cs_ship_mode_sk#20, cs_warehouse_sk#21, cs_item_sk#22, cs_promo_sk#23, cs_order_number#24, cs_quantity#25, cs_wholesale_cost#26, cs_list_price#27, cs_sales_price#28, cs_ext_discount_amt#29, cs_ext_sales_price#30, cs_ext_wholesale_cost#31, cs_ext_list_price#32, cs_ext_tax#33, cs_coupon_amt#34, cs_ext_ship_cost#35, cs_net_paid#36, cs_net_paid_inc_tax#37, cs_net_paid_inc_ship#38, cs_net_paid_inc_ship_tax#39, cs_net_profit#40, cs_sold_date_sk#41]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#41), dynamicpruningexpression(cs_sold_date_sk#41 IN dynamicpruning#42)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_time_sk:int,cs_ship_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_bill_addr_sk:int,cs_ship_customer_sk:int,cs_ship_cdemo_sk:int,cs_ship_hdemo_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_catalog_page_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2),cs_ext_tax:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_ext_ship_cost:decimal(7,2),cs_net_paid:decimal(7,2),cs_net_paid_inc_tax:decimal(7,2),cs_net_paid_inc_ship:decimal(7,2),cs_net_paid_inc_ship_tax:decimal(7,2),cs_net_profit:decimal(7,2)>

(12) ColumnarToRow [codegen id : 3]
Input [34]: [cs_sold_time_sk#8, cs_ship_date_sk#9, cs_bill_customer_sk#10, cs_bill_cdemo_sk#11, cs_bill_hdemo_sk#12, cs_bill_addr_sk#13, cs_ship_customer_sk#14, cs_ship_cdemo_sk#15, cs_ship_hdemo_sk#16, cs_ship_addr_sk#17, cs_call_center_sk#18, cs_catalog_page_sk#19, cs_ship_mode_sk#20, cs_warehouse_sk#21, cs_item_sk#22, cs_promo_sk#23, cs_order_number#24, cs_quantity#25, cs_wholesale_cost#26, cs_list_price#27, cs_sales_price#28, cs_ext_discount_amt#29, cs_ext_sales_price#30, cs_ext_wholesale_cost#31, cs_ext_list_price#32, cs_ext_tax#33, cs_coupon_amt#34, cs_ext_ship_cost#35, cs_net_paid#36, cs_net_paid_inc_tax#37, cs_net_paid_inc_ship#38, cs_net_paid_inc_ship_tax#39, cs_net_profit#40, cs_sold_date_sk#41]

(13) Filter [codegen id : 3]
Input [34]: [cs_sold_time_sk#8, cs_ship_date_sk#9, cs_bill_customer_sk#10, cs_bill_cdemo_sk#11, cs_bill_hdemo_sk#12, cs_bill_addr_sk#13, cs_ship_customer_sk#14, cs_ship_cdemo_sk#15, cs_ship_hdemo_sk#16, cs_ship_addr_sk#17, cs_call_center_sk#18, cs_catalog_page_sk#19, cs_ship_mode_sk#20, cs_warehouse_sk#21, cs_item_sk#22, cs_promo_sk#23, cs_order_number#24, cs_quantity#25, cs_wholesale_cost#26, cs_list_price#27, cs_sales_price#28, cs_ext_discount_amt#29, cs_ext_sales_price#30, cs_ext_wholesale_cost#31, cs_ext_list_price#32, cs_ext_tax#33, cs_coupon_amt#34, cs_ext_ship_cost#35, cs_net_paid#36, cs_net_paid_inc_tax#37, cs_net_paid_inc_ship#38, cs_net_paid_inc_ship_tax#39, cs_net_profit#40, cs_sold_date_sk#41]
Condition : isnotnull(cs_item_sk#22)

(14) HashAggregate [codegen id : 3]
Input [34]: [cs_sold_time_sk#8, cs_ship_date_sk#9, cs_bill_customer_sk#10, cs_bill_cdemo_sk#11, cs_bill_hdemo_sk#12, cs_bill_addr_sk#13, cs_ship_customer_sk#14, cs_ship_cdemo_sk#15, cs_ship_hdemo_sk#16, cs_ship_addr_sk#17, cs_call_center_sk#18, cs_catalog_page_sk#19, cs_ship_mode_sk#20, cs_warehouse_sk#21, cs_item_sk#22, cs_promo_sk#23, cs_order_number#24, cs_quantity#25, cs_wholesale_cost#26, cs_list_price#27, cs_sales_price#28, cs_ext_discount_amt#29, cs_ext_sales_price#30, cs_ext_wholesale_cost#31, cs_ext_list_price#32, cs_ext_tax#33, cs_coupon_amt#34, cs_ext_ship_cost#35, cs_net_paid#36, cs_net_paid_inc_tax#37, cs_net_paid_inc_ship#38, cs_net_paid_inc_ship_tax#39, cs_net_profit#40, cs_sold_date_sk#41]
Keys [2]: [cs_sold_date_sk#41, cs_item_sk#22]
Functions: []
Aggregate Attributes: []
Results [2]: [cs_sold_date_sk#41, cs_item_sk#22]

(15) ReusedExchange [Reuses operator id: 38]
Output [1]: [d_date_sk#43]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#41]
Right keys [1]: [d_date_sk#43]
Join condition: None

(17) Project [codegen id : 3]
Output [1]: [cs_item_sk#22]
Input [3]: [cs_sold_date_sk#41, cs_item_sk#22, d_date_sk#43]

(18) HashAggregate [codegen id : 3]
Input [1]: [cs_item_sk#22]
Keys [1]: [cs_item_sk#22]
Functions [1]: [partial_avg(UnscaledValue(cs_ext_discount_amt#29))]
Aggregate Attributes [2]: [sum#44, count#45]
Results [3]: [cs_item_sk#22, sum#46, count#47]

(19) Exchange
Input [3]: [cs_item_sk#22, sum#46, count#47]
Arguments: hashpartitioning(cs_item_sk#22, 5), ENSURE_REQUIREMENTS, [id=#48]

(20) HashAggregate [codegen id : 4]
Input [3]: [cs_item_sk#22, sum#46, count#47]
Keys [1]: [cs_item_sk#22]
Functions [1]: [avg(UnscaledValue(cs_ext_discount_amt#29))]
Aggregate Attributes [1]: [avg(UnscaledValue(cs_ext_discount_amt#29))#49]
Results [2]: [CheckOverflow((1.300000 * promote_precision(cast((avg(UnscaledValue(cs_ext_discount_amt#29))#49 / 100.0) as decimal(11,6)))), DecimalType(14,7)) AS (1.3 * avg(cs_ext_discount_amt))#50, cs_item_sk#22]

(21) Filter [codegen id : 4]
Input [2]: [(1.3 * avg(cs_ext_discount_amt))#50, cs_item_sk#22]
Condition : isnotnull((1.3 * avg(cs_ext_discount_amt))#50)

(22) BroadcastExchange
Input [2]: [(1.3 * avg(cs_ext_discount_amt))#50, cs_item_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#51]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [cs_item_sk#22]
Join condition: (cast(cs_ext_discount_amt#2 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#50)

(24) Project [codegen id : 6]
Output [1]: [cs_sold_date_sk#3]
Input [5]: [cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#5, (1.3 * avg(cs_ext_discount_amt))#50, cs_item_sk#22]

(25) ReusedExchange [Reuses operator id: 33]
Output [1]: [d_date_sk#52]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#52]
Join condition: None

(27) Project [codegen id : 6]
Output [1]: [1 AS excess discount amount #53]
Input [2]: [cs_sold_date_sk#3, d_date_sk#52]

(28) CollectLimit
Input [1]: [excess discount amount #53]
Arguments: 100

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (33)
+- * Project (32)
   +- * Filter (31)
      +- * ColumnarToRow (30)
         +- Scan parquet default.date_dim (29)


(29) Scan parquet default.date_dim
Output [2]: [d_date_sk#52, d_date#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(30) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#52, d_date#54]

(31) Filter [codegen id : 1]
Input [2]: [d_date_sk#52, d_date#54]
Condition : (((isnotnull(d_date#54) AND (d_date#54 >= 2000-01-27)) AND (d_date#54 <= 2000-04-26)) AND isnotnull(d_date_sk#52))

(32) Project [codegen id : 1]
Output [1]: [d_date_sk#52]
Input [2]: [d_date_sk#52, d_date#54]

(33) BroadcastExchange
Input [1]: [d_date_sk#52]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#55]

Subquery:2 Hosting operator id = 11 Hosting Expression = cs_sold_date_sk#41 IN dynamicpruning#42
BroadcastExchange (38)
+- * HashAggregate (37)
   +- * Filter (36)
      +- * ColumnarToRow (35)
         +- Scan parquet default.date_dim (34)


(34) Scan parquet default.date_dim
Output [28]: [d_date_sk#43, d_date_id#56, d_date#57, d_month_seq#58, d_week_seq#59, d_quarter_seq#60, d_year#61, d_dow#62, d_moy#63, d_dom#64, d_qoy#65, d_fy_year#66, d_fy_quarter_seq#67, d_fy_week_seq#68, d_day_name#69, d_quarter_name#70, d_holiday#71, d_weekend#72, d_following_holiday#73, d_first_dom#74, d_last_dom#75, d_same_day_ly#76, d_same_day_lq#77, d_current_day#78, d_current_week#79, d_current_month#80, d_current_quarter#81, d_current_year#82]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(35) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#43, d_date_id#56, d_date#57, d_month_seq#58, d_week_seq#59, d_quarter_seq#60, d_year#61, d_dow#62, d_moy#63, d_dom#64, d_qoy#65, d_fy_year#66, d_fy_quarter_seq#67, d_fy_week_seq#68, d_day_name#69, d_quarter_name#70, d_holiday#71, d_weekend#72, d_following_holiday#73, d_first_dom#74, d_last_dom#75, d_same_day_ly#76, d_same_day_lq#77, d_current_day#78, d_current_week#79, d_current_month#80, d_current_quarter#81, d_current_year#82]

(36) Filter [codegen id : 1]
Input [28]: [d_date_sk#43, d_date_id#56, d_date#57, d_month_seq#58, d_week_seq#59, d_quarter_seq#60, d_year#61, d_dow#62, d_moy#63, d_dom#64, d_qoy#65, d_fy_year#66, d_fy_quarter_seq#67, d_fy_week_seq#68, d_day_name#69, d_quarter_name#70, d_holiday#71, d_weekend#72, d_following_holiday#73, d_first_dom#74, d_last_dom#75, d_same_day_ly#76, d_same_day_lq#77, d_current_day#78, d_current_week#79, d_current_month#80, d_current_quarter#81, d_current_year#82]
Condition : (((isnotnull(d_date#57) AND (d_date#57 >= 2000-01-27)) AND (d_date#57 <= 2000-04-26)) AND isnotnull(d_date_sk#43))

(37) HashAggregate [codegen id : 1]
Input [28]: [d_date_sk#43, d_date_id#56, d_date#57, d_month_seq#58, d_week_seq#59, d_quarter_seq#60, d_year#61, d_dow#62, d_moy#63, d_dom#64, d_qoy#65, d_fy_year#66, d_fy_quarter_seq#67, d_fy_week_seq#68, d_day_name#69, d_quarter_name#70, d_holiday#71, d_weekend#72, d_following_holiday#73, d_first_dom#74, d_last_dom#75, d_same_day_ly#76, d_same_day_lq#77, d_current_day#78, d_current_week#79, d_current_month#80, d_current_quarter#81, d_current_year#82]
Keys [1]: [d_date_sk#43]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#43]

(38) BroadcastExchange
Input [1]: [d_date_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#83]


