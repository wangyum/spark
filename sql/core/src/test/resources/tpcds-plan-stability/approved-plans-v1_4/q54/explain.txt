== Physical Plan ==
TakeOrderedAndProject (54)
+- * HashAggregate (53)
   +- Exchange (52)
      +- * HashAggregate (51)
         +- * HashAggregate (50)
            +- Exchange (49)
               +- * HashAggregate (48)
                  +- * Project (47)
                     +- * BroadcastHashJoin Inner BuildRight (46)
                        :- * Project (44)
                        :  +- * HashAggregate (43)
                        :     +- * BroadcastHashJoin Inner BuildRight (42)
                        :        :- * BroadcastHashJoin Inner BuildRight (37)
                        :        :  :- * BroadcastHashJoin Inner BuildRight (32)
                        :        :  :  :- * HashAggregate (27)
                        :        :  :  :  +- Exchange (26)
                        :        :  :  :     +- * HashAggregate (25)
                        :        :  :  :        +- * Project (24)
                        :        :  :  :           +- * BroadcastHashJoin Inner BuildRight (23)
                        :        :  :  :              :- * HashAggregate (17)
                        :        :  :  :              :  +- * BroadcastHashJoin Inner BuildRight (16)
                        :        :  :  :              :     :- * BroadcastHashJoin Inner BuildRight (14)
                        :        :  :  :              :     :  :- Union (9)
                        :        :  :  :              :     :  :  :- * Project (4)
                        :        :  :  :              :     :  :  :  +- * Filter (3)
                        :        :  :  :              :     :  :  :     +- * ColumnarToRow (2)
                        :        :  :  :              :     :  :  :        +- Scan parquet default.catalog_sales (1)
                        :        :  :  :              :     :  :  +- * Project (8)
                        :        :  :  :              :     :  :     +- * Filter (7)
                        :        :  :  :              :     :  :        +- * ColumnarToRow (6)
                        :        :  :  :              :     :  :           +- Scan parquet default.web_sales (5)
                        :        :  :  :              :     :  +- BroadcastExchange (13)
                        :        :  :  :              :     :     +- * Filter (12)
                        :        :  :  :              :     :        +- * ColumnarToRow (11)
                        :        :  :  :              :     :           +- Scan parquet default.item (10)
                        :        :  :  :              :     +- ReusedExchange (15)
                        :        :  :  :              +- BroadcastExchange (22)
                        :        :  :  :                 +- * HashAggregate (21)
                        :        :  :  :                    +- * Filter (20)
                        :        :  :  :                       +- * ColumnarToRow (19)
                        :        :  :  :                          +- Scan parquet default.customer (18)
                        :        :  :  +- BroadcastExchange (31)
                        :        :  :     +- * Filter (30)
                        :        :  :        +- * ColumnarToRow (29)
                        :        :  :           +- Scan parquet default.store_sales (28)
                        :        :  +- BroadcastExchange (36)
                        :        :     +- * Filter (35)
                        :        :        +- * ColumnarToRow (34)
                        :        :           +- Scan parquet default.customer_address (33)
                        :        +- BroadcastExchange (41)
                        :           +- * Filter (40)
                        :              +- * ColumnarToRow (39)
                        :                 +- Scan parquet default.store (38)
                        +- ReusedExchange (45)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_bill_customer_sk#1))

(4) Project [codegen id : 1]
Output [3]: [cs_sold_date_sk#3 AS sold_date_sk#5, cs_bill_customer_sk#1 AS customer_sk#6, cs_item_sk#2 AS item_sk#7]
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]

(5) Scan parquet default.web_sales
Output [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#10), dynamicpruningexpression(ws_sold_date_sk#10 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int>

(6) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]

(7) Filter [codegen id : 2]
Input [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Condition : (isnotnull(ws_item_sk#8) AND isnotnull(ws_bill_customer_sk#9))

(8) Project [codegen id : 2]
Output [3]: [ws_sold_date_sk#10 AS sold_date_sk#11, ws_bill_customer_sk#9 AS customer_sk#12, ws_item_sk#8 AS item_sk#13]
Input [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]

(9) Union

(10) Scan parquet default.item
Output [22]: [i_item_sk#14, i_item_id#15, i_rec_start_date#16, i_rec_end_date#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand_id#21, i_brand#22, i_class_id#23, i_class#24, i_category_id#25, i_category#26, i_manufact_id#27, i_manufact#28, i_size#29, i_formulation#30, i_color#31, i_units#32, i_container#33, i_manager_id#34, i_product_name#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Women                                             ), EqualTo(i_class,maternity                                         ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(11) ColumnarToRow [codegen id : 3]
Input [22]: [i_item_sk#14, i_item_id#15, i_rec_start_date#16, i_rec_end_date#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand_id#21, i_brand#22, i_class_id#23, i_class#24, i_category_id#25, i_category#26, i_manufact_id#27, i_manufact#28, i_size#29, i_formulation#30, i_color#31, i_units#32, i_container#33, i_manager_id#34, i_product_name#35]

(12) Filter [codegen id : 3]
Input [22]: [i_item_sk#14, i_item_id#15, i_rec_start_date#16, i_rec_end_date#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand_id#21, i_brand#22, i_class_id#23, i_class#24, i_category_id#25, i_category#26, i_manufact_id#27, i_manufact#28, i_size#29, i_formulation#30, i_color#31, i_units#32, i_container#33, i_manager_id#34, i_product_name#35]
Condition : ((((isnotnull(i_category#26) AND isnotnull(i_class#24)) AND (i_category#26 = Women                                             )) AND (i_class#24 = maternity                                         )) AND isnotnull(i_item_sk#14))

(13) BroadcastExchange
Input [22]: [i_item_sk#14, i_item_id#15, i_rec_start_date#16, i_rec_end_date#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand_id#21, i_brand#22, i_class_id#23, i_class#24, i_category_id#25, i_category#26, i_manufact_id#27, i_manufact#28, i_size#29, i_formulation#30, i_color#31, i_units#32, i_container#33, i_manager_id#34, i_product_name#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36]

(14) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [item_sk#7]
Right keys [1]: [i_item_sk#14]
Join condition: None

(15) ReusedExchange [Reuses operator id: 58]
Output [28]: [d_date_sk#37, d_date_id#38, d_date#39, d_month_seq#40, d_week_seq#41, d_quarter_seq#42, d_year#43, d_dow#44, d_moy#45, d_dom#46, d_qoy#47, d_fy_year#48, d_fy_quarter_seq#49, d_fy_week_seq#50, d_day_name#51, d_quarter_name#52, d_holiday#53, d_weekend#54, d_following_holiday#55, d_first_dom#56, d_last_dom#57, d_same_day_ly#58, d_same_day_lq#59, d_current_day#60, d_current_week#61, d_current_month#62, d_current_quarter#63, d_current_year#64]

(16) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sold_date_sk#5]
Right keys [1]: [d_date_sk#37]
Join condition: None

(17) HashAggregate [codegen id : 6]
Input [53]: [sold_date_sk#5, customer_sk#6, item_sk#7, i_item_sk#14, i_item_id#15, i_rec_start_date#16, i_rec_end_date#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand_id#21, i_brand#22, i_class_id#23, i_class#24, i_category_id#25, i_category#26, i_manufact_id#27, i_manufact#28, i_size#29, i_formulation#30, i_color#31, i_units#32, i_container#33, i_manager_id#34, i_product_name#35, d_date_sk#37, d_date_id#38, d_date#39, d_month_seq#40, d_week_seq#41, d_quarter_seq#42, d_year#43, d_dow#44, d_moy#45, d_dom#46, d_qoy#47, d_fy_year#48, d_fy_quarter_seq#49, d_fy_week_seq#50, d_day_name#51, d_quarter_name#52, d_holiday#53, d_weekend#54, d_following_holiday#55, d_first_dom#56, d_last_dom#57, d_same_day_ly#58, d_same_day_lq#59, d_current_day#60, d_current_week#61, d_current_month#62, d_current_quarter#63, d_current_year#64]
Keys [1]: [customer_sk#6]
Functions: []
Aggregate Attributes: []
Results [1]: [customer_sk#6]

(18) Scan parquet default.customer
Output [18]: [c_customer_sk#65, c_customer_id#66, c_current_cdemo_sk#67, c_current_hdemo_sk#68, c_current_addr_sk#69, c_first_shipto_date_sk#70, c_first_sales_date_sk#71, c_salutation#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_day#76, c_birth_month#77, c_birth_year#78, c_birth_country#79, c_login#80, c_email_address#81, c_last_review_date#82]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(19) ColumnarToRow [codegen id : 5]
Input [18]: [c_customer_sk#65, c_customer_id#66, c_current_cdemo_sk#67, c_current_hdemo_sk#68, c_current_addr_sk#69, c_first_shipto_date_sk#70, c_first_sales_date_sk#71, c_salutation#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_day#76, c_birth_month#77, c_birth_year#78, c_birth_country#79, c_login#80, c_email_address#81, c_last_review_date#82]

(20) Filter [codegen id : 5]
Input [18]: [c_customer_sk#65, c_customer_id#66, c_current_cdemo_sk#67, c_current_hdemo_sk#68, c_current_addr_sk#69, c_first_shipto_date_sk#70, c_first_sales_date_sk#71, c_salutation#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_day#76, c_birth_month#77, c_birth_year#78, c_birth_country#79, c_login#80, c_email_address#81, c_last_review_date#82]
Condition : (isnotnull(c_customer_sk#65) AND isnotnull(c_current_addr_sk#69))

(21) HashAggregate [codegen id : 5]
Input [18]: [c_customer_sk#65, c_customer_id#66, c_current_cdemo_sk#67, c_current_hdemo_sk#68, c_current_addr_sk#69, c_first_shipto_date_sk#70, c_first_sales_date_sk#71, c_salutation#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_day#76, c_birth_month#77, c_birth_year#78, c_birth_country#79, c_login#80, c_email_address#81, c_last_review_date#82]
Keys [3]: [c_customer_sk#65, c_customer_sk#65, c_current_addr_sk#69]
Functions: []
Aggregate Attributes: []
Results [3]: [c_customer_sk#65, c_customer_sk#65, c_current_addr_sk#69]

(22) BroadcastExchange
Input [3]: [c_customer_sk#65, c_customer_sk#65, c_current_addr_sk#69]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#83]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [customer_sk#6]
Right keys [1]: [c_customer_sk#65]
Join condition: None

(24) Project [codegen id : 6]
Output [3]: [c_customer_sk#65, c_customer_sk#65, c_current_addr_sk#69]
Input [4]: [customer_sk#6, c_customer_sk#65, c_customer_sk#65, c_current_addr_sk#69]

(25) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#65, c_customer_sk#65, c_current_addr_sk#69]
Keys [2]: [c_customer_sk#65, c_current_addr_sk#69]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#65, c_current_addr_sk#69]

(26) Exchange
Input [2]: [c_customer_sk#65, c_current_addr_sk#69]
Arguments: hashpartitioning(c_customer_sk#65, c_current_addr_sk#69, 5), ENSURE_REQUIREMENTS, [id=#84]

(27) HashAggregate [codegen id : 11]
Input [2]: [c_customer_sk#65, c_current_addr_sk#69]
Keys [2]: [c_customer_sk#65, c_current_addr_sk#69]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#65, c_current_addr_sk#69]

(28) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#85, ss_item_sk#86, ss_customer_sk#87, ss_cdemo_sk#88, ss_hdemo_sk#89, ss_addr_sk#90, ss_store_sk#91, ss_promo_sk#92, ss_ticket_number#93, ss_quantity#94, ss_wholesale_cost#95, ss_list_price#96, ss_sales_price#97, ss_ext_discount_amt#98, ss_ext_sales_price#99, ss_ext_wholesale_cost#100, ss_ext_list_price#101, ss_ext_tax#102, ss_coupon_amt#103, ss_net_paid#104, ss_net_paid_inc_tax#105, ss_net_profit#106, ss_sold_date_sk#107]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#107), dynamicpruningexpression(ss_sold_date_sk#107 IN dynamicpruning#108)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(29) ColumnarToRow [codegen id : 7]
Input [23]: [ss_sold_time_sk#85, ss_item_sk#86, ss_customer_sk#87, ss_cdemo_sk#88, ss_hdemo_sk#89, ss_addr_sk#90, ss_store_sk#91, ss_promo_sk#92, ss_ticket_number#93, ss_quantity#94, ss_wholesale_cost#95, ss_list_price#96, ss_sales_price#97, ss_ext_discount_amt#98, ss_ext_sales_price#99, ss_ext_wholesale_cost#100, ss_ext_list_price#101, ss_ext_tax#102, ss_coupon_amt#103, ss_net_paid#104, ss_net_paid_inc_tax#105, ss_net_profit#106, ss_sold_date_sk#107]

(30) Filter [codegen id : 7]
Input [23]: [ss_sold_time_sk#85, ss_item_sk#86, ss_customer_sk#87, ss_cdemo_sk#88, ss_hdemo_sk#89, ss_addr_sk#90, ss_store_sk#91, ss_promo_sk#92, ss_ticket_number#93, ss_quantity#94, ss_wholesale_cost#95, ss_list_price#96, ss_sales_price#97, ss_ext_discount_amt#98, ss_ext_sales_price#99, ss_ext_wholesale_cost#100, ss_ext_list_price#101, ss_ext_tax#102, ss_coupon_amt#103, ss_net_paid#104, ss_net_paid_inc_tax#105, ss_net_profit#106, ss_sold_date_sk#107]
Condition : isnotnull(ss_customer_sk#87)

(31) BroadcastExchange
Input [23]: [ss_sold_time_sk#85, ss_item_sk#86, ss_customer_sk#87, ss_cdemo_sk#88, ss_hdemo_sk#89, ss_addr_sk#90, ss_store_sk#91, ss_promo_sk#92, ss_ticket_number#93, ss_quantity#94, ss_wholesale_cost#95, ss_list_price#96, ss_sales_price#97, ss_ext_discount_amt#98, ss_ext_sales_price#99, ss_ext_wholesale_cost#100, ss_ext_list_price#101, ss_ext_tax#102, ss_coupon_amt#103, ss_net_paid#104, ss_net_paid_inc_tax#105, ss_net_profit#106, ss_sold_date_sk#107]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, false] as bigint)),false), [id=#109]

(32) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_customer_sk#65]
Right keys [1]: [ss_customer_sk#87]
Join condition: None

(33) Scan parquet default.customer_address
Output [13]: [ca_address_sk#110, ca_address_id#111, ca_street_number#112, ca_street_name#113, ca_street_type#114, ca_suite_number#115, ca_city#116, ca_county#117, ca_state#118, ca_zip#119, ca_country#120, ca_gmt_offset#121, ca_location_type#122]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(34) ColumnarToRow [codegen id : 8]
Input [13]: [ca_address_sk#110, ca_address_id#111, ca_street_number#112, ca_street_name#113, ca_street_type#114, ca_suite_number#115, ca_city#116, ca_county#117, ca_state#118, ca_zip#119, ca_country#120, ca_gmt_offset#121, ca_location_type#122]

(35) Filter [codegen id : 8]
Input [13]: [ca_address_sk#110, ca_address_id#111, ca_street_number#112, ca_street_name#113, ca_street_type#114, ca_suite_number#115, ca_city#116, ca_county#117, ca_state#118, ca_zip#119, ca_country#120, ca_gmt_offset#121, ca_location_type#122]
Condition : ((isnotnull(ca_address_sk#110) AND isnotnull(ca_county#117)) AND isnotnull(ca_state#118))

(36) BroadcastExchange
Input [13]: [ca_address_sk#110, ca_address_id#111, ca_street_number#112, ca_street_name#113, ca_street_type#114, ca_suite_number#115, ca_city#116, ca_county#117, ca_state#118, ca_zip#119, ca_country#120, ca_gmt_offset#121, ca_location_type#122]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#123]

(37) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#69]
Right keys [1]: [ca_address_sk#110]
Join condition: None

(38) Scan parquet default.store
Output [29]: [s_store_sk#124, s_store_id#125, s_rec_start_date#126, s_rec_end_date#127, s_closed_date_sk#128, s_store_name#129, s_number_employees#130, s_floor_space#131, s_hours#132, s_manager#133, s_market_id#134, s_geography_class#135, s_market_desc#136, s_market_manager#137, s_division_id#138, s_division_name#139, s_company_id#140, s_company_name#141, s_street_number#142, s_street_name#143, s_street_type#144, s_suite_number#145, s_city#146, s_county#147, s_state#148, s_zip#149, s_country#150, s_gmt_offset#151, s_tax_percentage#152]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(39) ColumnarToRow [codegen id : 9]
Input [29]: [s_store_sk#124, s_store_id#125, s_rec_start_date#126, s_rec_end_date#127, s_closed_date_sk#128, s_store_name#129, s_number_employees#130, s_floor_space#131, s_hours#132, s_manager#133, s_market_id#134, s_geography_class#135, s_market_desc#136, s_market_manager#137, s_division_id#138, s_division_name#139, s_company_id#140, s_company_name#141, s_street_number#142, s_street_name#143, s_street_type#144, s_suite_number#145, s_city#146, s_county#147, s_state#148, s_zip#149, s_country#150, s_gmt_offset#151, s_tax_percentage#152]

(40) Filter [codegen id : 9]
Input [29]: [s_store_sk#124, s_store_id#125, s_rec_start_date#126, s_rec_end_date#127, s_closed_date_sk#128, s_store_name#129, s_number_employees#130, s_floor_space#131, s_hours#132, s_manager#133, s_market_id#134, s_geography_class#135, s_market_desc#136, s_market_manager#137, s_division_id#138, s_division_name#139, s_company_id#140, s_company_name#141, s_street_number#142, s_street_name#143, s_street_type#144, s_suite_number#145, s_city#146, s_county#147, s_state#148, s_zip#149, s_country#150, s_gmt_offset#151, s_tax_percentage#152]
Condition : (isnotnull(s_county#147) AND isnotnull(s_state#148))

(41) BroadcastExchange
Input [29]: [s_store_sk#124, s_store_id#125, s_rec_start_date#126, s_rec_end_date#127, s_closed_date_sk#128, s_store_name#129, s_number_employees#130, s_floor_space#131, s_hours#132, s_manager#133, s_market_id#134, s_geography_class#135, s_market_desc#136, s_market_manager#137, s_division_id#138, s_division_name#139, s_company_id#140, s_company_name#141, s_street_number#142, s_street_name#143, s_street_type#144, s_suite_number#145, s_city#146, s_county#147, s_state#148, s_zip#149, s_country#150, s_gmt_offset#151, s_tax_percentage#152]
Arguments: HashedRelationBroadcastMode(List(input[23, string, false], input[24, string, false]),false), [id=#153]

(42) BroadcastHashJoin [codegen id : 11]
Left keys [2]: [ca_county#117, ca_state#118]
Right keys [2]: [s_county#147, s_state#148]
Join condition: None

(43) HashAggregate [codegen id : 11]
Input [67]: [c_customer_sk#65, c_current_addr_sk#69, ss_sold_time_sk#85, ss_item_sk#86, ss_customer_sk#87, ss_cdemo_sk#88, ss_hdemo_sk#89, ss_addr_sk#90, ss_store_sk#91, ss_promo_sk#92, ss_ticket_number#93, ss_quantity#94, ss_wholesale_cost#95, ss_list_price#96, ss_sales_price#97, ss_ext_discount_amt#98, ss_ext_sales_price#99, ss_ext_wholesale_cost#100, ss_ext_list_price#101, ss_ext_tax#102, ss_coupon_amt#103, ss_net_paid#104, ss_net_paid_inc_tax#105, ss_net_profit#106, ss_sold_date_sk#107, ca_address_sk#110, ca_address_id#111, ca_street_number#112, ca_street_name#113, ca_street_type#114, ca_suite_number#115, ca_city#116, ca_county#117, ca_state#118, ca_zip#119, ca_country#120, ca_gmt_offset#121, ca_location_type#122, s_store_sk#124, s_store_id#125, s_rec_start_date#126, s_rec_end_date#127, s_closed_date_sk#128, s_store_name#129, s_number_employees#130, s_floor_space#131, s_hours#132, s_manager#133, s_market_id#134, s_geography_class#135, s_market_desc#136, s_market_manager#137, s_division_id#138, s_division_name#139, s_company_id#140, s_company_name#141, s_street_number#142, s_street_name#143, s_street_type#144, s_suite_number#145, s_city#146, s_county#147, s_state#148, s_zip#149, s_country#150, s_gmt_offset#151, s_tax_percentage#152]
Keys [2]: [ss_sold_date_sk#107, c_customer_sk#65]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#99))]
Aggregate Attributes [1]: [sum#154]
Results [3]: [ss_sold_date_sk#107, c_customer_sk#65, sum#155]

(44) Project [codegen id : 11]
Output [3]: [ss_sold_date_sk#107, c_customer_sk#65, sum#155 AS _pushedexpression#156]
Input [3]: [ss_sold_date_sk#107, c_customer_sk#65, sum#155]

(45) ReusedExchange [Reuses operator id: 63]
Output [1]: [d_date_sk#157]

(46) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#107]
Right keys [1]: [d_date_sk#157]
Join condition: None

(47) Project [codegen id : 11]
Output [2]: [c_customer_sk#65, _pushedexpression#158]
Input [4]: [ss_sold_date_sk#107, c_customer_sk#65, _pushedexpression#156, d_date_sk#157]

(48) HashAggregate [codegen id : 11]
Input [2]: [c_customer_sk#65, _pushedexpression#158]
Keys [1]: [c_customer_sk#65]
Functions [1]: [partial_sum(_pushedexpression#158)]
Aggregate Attributes [2]: [sum#159, isEmpty#160]
Results [3]: [c_customer_sk#65, sum#161, isEmpty#162]

(49) Exchange
Input [3]: [c_customer_sk#65, sum#161, isEmpty#162]
Arguments: hashpartitioning(c_customer_sk#65, 5), ENSURE_REQUIREMENTS, [id=#163]

(50) HashAggregate [codegen id : 12]
Input [3]: [c_customer_sk#65, sum#161, isEmpty#162]
Keys [1]: [c_customer_sk#65]
Functions [1]: [sum(_pushedexpression#158)]
Aggregate Attributes [1]: [sum(_pushedexpression#158)#164]
Results [1]: [cast(CheckOverflow((promote_precision(cast(sum(_pushedexpression#158)#164 as decimal(17,2))) / 50.00), DecimalType(21,6)) as int) AS segment#165]

(51) HashAggregate [codegen id : 12]
Input [1]: [segment#165]
Keys [1]: [segment#165]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#166]
Results [2]: [segment#165, count#167]

(52) Exchange
Input [2]: [segment#165, count#167]
Arguments: hashpartitioning(segment#165, 5), ENSURE_REQUIREMENTS, [id=#168]

(53) HashAggregate [codegen id : 13]
Input [2]: [segment#165, count#167]
Keys [1]: [segment#165]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#169]
Results [3]: [segment#165, count(1)#169 AS num_customers#170, (segment#165 * 50) AS segment_base#171]

(54) TakeOrderedAndProject
Input [3]: [segment#165, num_customers#170, segment_base#171]
Arguments: 100, [segment#165 ASC NULLS FIRST, num_customers#170 ASC NULLS FIRST], [segment#165, num_customers#170, segment_base#171]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (58)
+- * Filter (57)
   +- * ColumnarToRow (56)
      +- Scan parquet default.date_dim (55)


(55) Scan parquet default.date_dim
Output [28]: [d_date_sk#37, d_date_id#38, d_date#39, d_month_seq#40, d_week_seq#41, d_quarter_seq#42, d_year#43, d_dow#44, d_moy#45, d_dom#46, d_qoy#47, d_fy_year#48, d_fy_quarter_seq#49, d_fy_week_seq#50, d_day_name#51, d_quarter_name#52, d_holiday#53, d_weekend#54, d_following_holiday#55, d_first_dom#56, d_last_dom#57, d_same_day_ly#58, d_same_day_lq#59, d_current_day#60, d_current_week#61, d_current_month#62, d_current_quarter#63, d_current_year#64]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(56) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#37, d_date_id#38, d_date#39, d_month_seq#40, d_week_seq#41, d_quarter_seq#42, d_year#43, d_dow#44, d_moy#45, d_dom#46, d_qoy#47, d_fy_year#48, d_fy_quarter_seq#49, d_fy_week_seq#50, d_day_name#51, d_quarter_name#52, d_holiday#53, d_weekend#54, d_following_holiday#55, d_first_dom#56, d_last_dom#57, d_same_day_ly#58, d_same_day_lq#59, d_current_day#60, d_current_week#61, d_current_month#62, d_current_quarter#63, d_current_year#64]

(57) Filter [codegen id : 1]
Input [28]: [d_date_sk#37, d_date_id#38, d_date#39, d_month_seq#40, d_week_seq#41, d_quarter_seq#42, d_year#43, d_dow#44, d_moy#45, d_dom#46, d_qoy#47, d_fy_year#48, d_fy_quarter_seq#49, d_fy_week_seq#50, d_day_name#51, d_quarter_name#52, d_holiday#53, d_weekend#54, d_following_holiday#55, d_first_dom#56, d_last_dom#57, d_same_day_ly#58, d_same_day_lq#59, d_current_day#60, d_current_week#61, d_current_month#62, d_current_quarter#63, d_current_year#64]
Condition : ((((isnotnull(d_moy#45) AND isnotnull(d_year#43)) AND (d_moy#45 = 12)) AND (d_year#43 = 1998)) AND isnotnull(d_date_sk#37))

(58) BroadcastExchange
Input [28]: [d_date_sk#37, d_date_id#38, d_date#39, d_month_seq#40, d_week_seq#41, d_quarter_seq#42, d_year#43, d_dow#44, d_moy#45, d_dom#46, d_qoy#47, d_fy_year#48, d_fy_quarter_seq#49, d_fy_week_seq#50, d_day_name#51, d_quarter_name#52, d_holiday#53, d_weekend#54, d_following_holiday#55, d_first_dom#56, d_last_dom#57, d_same_day_ly#58, d_same_day_lq#59, d_current_day#60, d_current_week#61, d_current_month#62, d_current_quarter#63, d_current_year#64]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#172]

Subquery:2 Hosting operator id = 5 Hosting Expression = ws_sold_date_sk#10 IN dynamicpruning#4

Subquery:3 Hosting operator id = 28 Hosting Expression = ss_sold_date_sk#107 IN dynamicpruning#108
BroadcastExchange (63)
+- * HashAggregate (62)
   +- * Filter (61)
      +- * ColumnarToRow (60)
         +- Scan parquet default.date_dim (59)


(59) Scan parquet default.date_dim
Output [28]: [d_date_sk#157, d_date_id#173, d_date#174, d_month_seq#175, d_week_seq#176, d_quarter_seq#177, d_year#178, d_dow#179, d_moy#180, d_dom#181, d_qoy#182, d_fy_year#183, d_fy_quarter_seq#184, d_fy_week_seq#185, d_day_name#186, d_quarter_name#187, d_holiday#188, d_weekend#189, d_following_holiday#190, d_first_dom#191, d_last_dom#192, d_same_day_ly#193, d_same_day_lq#194, d_current_day#195, d_current_week#196, d_current_month#197, d_current_quarter#198, d_current_year#199]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(60) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#157, d_date_id#173, d_date#174, d_month_seq#175, d_week_seq#176, d_quarter_seq#177, d_year#178, d_dow#179, d_moy#180, d_dom#181, d_qoy#182, d_fy_year#183, d_fy_quarter_seq#184, d_fy_week_seq#185, d_day_name#186, d_quarter_name#187, d_holiday#188, d_weekend#189, d_following_holiday#190, d_first_dom#191, d_last_dom#192, d_same_day_ly#193, d_same_day_lq#194, d_current_day#195, d_current_week#196, d_current_month#197, d_current_quarter#198, d_current_year#199]

(61) Filter [codegen id : 1]
Input [28]: [d_date_sk#157, d_date_id#173, d_date#174, d_month_seq#175, d_week_seq#176, d_quarter_seq#177, d_year#178, d_dow#179, d_moy#180, d_dom#181, d_qoy#182, d_fy_year#183, d_fy_quarter_seq#184, d_fy_week_seq#185, d_day_name#186, d_quarter_name#187, d_holiday#188, d_weekend#189, d_following_holiday#190, d_first_dom#191, d_last_dom#192, d_same_day_ly#193, d_same_day_lq#194, d_current_day#195, d_current_week#196, d_current_month#197, d_current_quarter#198, d_current_year#199]
Condition : (((isnotnull(d_month_seq#175) AND (d_month_seq#175 >= Subquery scalar-subquery#200, [id=#201])) AND (d_month_seq#175 <= Subquery scalar-subquery#202, [id=#203])) AND isnotnull(d_date_sk#157))

(62) HashAggregate [codegen id : 1]
Input [28]: [d_date_sk#157, d_date_id#173, d_date#174, d_month_seq#175, d_week_seq#176, d_quarter_seq#177, d_year#178, d_dow#179, d_moy#180, d_dom#181, d_qoy#182, d_fy_year#183, d_fy_quarter_seq#184, d_fy_week_seq#185, d_day_name#186, d_quarter_name#187, d_holiday#188, d_weekend#189, d_following_holiday#190, d_first_dom#191, d_last_dom#192, d_same_day_ly#193, d_same_day_lq#194, d_current_day#195, d_current_week#196, d_current_month#197, d_current_quarter#198, d_current_year#199]
Keys [1]: [d_date_sk#157]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#157]

(63) BroadcastExchange
Input [1]: [d_date_sk#157]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#204]

Subquery:4 Hosting operator id = 61 Hosting Expression = Subquery scalar-subquery#200, [id=#201]
* HashAggregate (70)
+- Exchange (69)
   +- * HashAggregate (68)
      +- * Project (67)
         +- * Filter (66)
            +- * ColumnarToRow (65)
               +- Scan parquet default.date_dim (64)


(64) Scan parquet default.date_dim
Output [3]: [d_month_seq#205, d_year#206, d_moy#207]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(65) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#205, d_year#206, d_moy#207]

(66) Filter [codegen id : 1]
Input [3]: [d_month_seq#205, d_year#206, d_moy#207]
Condition : (((isnotnull(d_year#206) AND isnotnull(d_moy#207)) AND (d_year#206 = 1998)) AND (d_moy#207 = 12))

(67) Project [codegen id : 1]
Output [1]: [(d_month_seq#205 + 1) AS (d_month_seq + 1)#208]
Input [3]: [d_month_seq#205, d_year#206, d_moy#207]

(68) HashAggregate [codegen id : 1]
Input [1]: [(d_month_seq + 1)#208]
Keys [1]: [(d_month_seq + 1)#208]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 1)#208]

(69) Exchange
Input [1]: [(d_month_seq + 1)#208]
Arguments: hashpartitioning((d_month_seq + 1)#208, 5), ENSURE_REQUIREMENTS, [id=#209]

(70) HashAggregate [codegen id : 2]
Input [1]: [(d_month_seq + 1)#208]
Keys [1]: [(d_month_seq + 1)#208]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 1)#208]

Subquery:5 Hosting operator id = 61 Hosting Expression = Subquery scalar-subquery#202, [id=#203]
* HashAggregate (77)
+- Exchange (76)
   +- * HashAggregate (75)
      +- * Project (74)
         +- * Filter (73)
            +- * ColumnarToRow (72)
               +- Scan parquet default.date_dim (71)


(71) Scan parquet default.date_dim
Output [3]: [d_month_seq#210, d_year#211, d_moy#212]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(72) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#210, d_year#211, d_moy#212]

(73) Filter [codegen id : 1]
Input [3]: [d_month_seq#210, d_year#211, d_moy#212]
Condition : (((isnotnull(d_year#211) AND isnotnull(d_moy#212)) AND (d_year#211 = 1998)) AND (d_moy#212 = 12))

(74) Project [codegen id : 1]
Output [1]: [(d_month_seq#210 + 3) AS (d_month_seq + 3)#213]
Input [3]: [d_month_seq#210, d_year#211, d_moy#212]

(75) HashAggregate [codegen id : 1]
Input [1]: [(d_month_seq + 3)#213]
Keys [1]: [(d_month_seq + 3)#213]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 3)#213]

(76) Exchange
Input [1]: [(d_month_seq + 3)#213]
Arguments: hashpartitioning((d_month_seq + 3)#213, 5), ENSURE_REQUIREMENTS, [id=#214]

(77) HashAggregate [codegen id : 2]
Input [1]: [(d_month_seq + 3)#213]
Keys [1]: [(d_month_seq + 3)#213]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 3)#213]


