== Physical Plan ==
* HashAggregate (32)
+- Exchange (31)
   +- * HashAggregate (30)
      +- * Project (29)
         +- * BroadcastHashJoin Inner BuildRight (28)
            :- * Project (26)
            :  +- * HashAggregate (25)
            :     +- * SortMergeJoin Inner (24)
            :        :- * Sort (18)
            :        :  +- Exchange (17)
            :        :     +- * SortMergeJoin Inner (16)
            :        :        :- * Sort (10)
            :        :        :  +- Exchange (9)
            :        :        :     +- * BroadcastHashJoin Inner BuildRight (8)
            :        :        :        :- * Filter (3)
            :        :        :        :  +- * ColumnarToRow (2)
            :        :        :        :     +- Scan parquet default.store_sales (1)
            :        :        :        +- BroadcastExchange (7)
            :        :        :           +- * Filter (6)
            :        :        :              +- * ColumnarToRow (5)
            :        :        :                 +- Scan parquet default.store (4)
            :        :        +- * Sort (15)
            :        :           +- Exchange (14)
            :        :              +- * Filter (13)
            :        :                 +- * ColumnarToRow (12)
            :        :                    +- Scan parquet default.customer_demographics (11)
            :        +- * Sort (23)
            :           +- Exchange (22)
            :              +- * Filter (21)
            :                 +- * ColumnarToRow (20)
            :                    +- Scan parquet default.customer_address (19)
            +- ReusedExchange (27)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23), dynamicpruningexpression(ss_sold_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_addr_sk), Or(Or(And(GreaterThanOrEqual(ss_sales_price,100.00),LessThanOrEqual(ss_sales_price,150.00)),And(GreaterThanOrEqual(ss_sales_price,50.00),LessThanOrEqual(ss_sales_price,100.00))),And(GreaterThanOrEqual(ss_sales_price,150.00),LessThanOrEqual(ss_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ss_net_profit,0.00),LessThanOrEqual(ss_net_profit,2000.00)),And(GreaterThanOrEqual(ss_net_profit,150.00),LessThanOrEqual(ss_net_profit,3000.00))),And(GreaterThanOrEqual(ss_net_profit,50.00),LessThanOrEqual(ss_net_profit,25000.00)))]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 2]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : ((((isnotnull(ss_store_sk#7) AND isnotnull(ss_cdemo_sk#4)) AND isnotnull(ss_addr_sk#6)) AND ((((ss_sales_price#13 >= 100.00) AND (ss_sales_price#13 <= 150.00)) OR ((ss_sales_price#13 >= 50.00) AND (ss_sales_price#13 <= 100.00))) OR ((ss_sales_price#13 >= 150.00) AND (ss_sales_price#13 <= 200.00)))) AND ((((ss_net_profit#22 >= 0.00) AND (ss_net_profit#22 <= 2000.00)) OR ((ss_net_profit#22 >= 150.00) AND (ss_net_profit#22 <= 3000.00))) OR ((ss_net_profit#22 >= 50.00) AND (ss_net_profit#22 <= 25000.00))))

(4) Scan parquet default.store
Output [29]: [s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(5) ColumnarToRow [codegen id : 1]
Input [29]: [s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53]

(6) Filter [codegen id : 1]
Input [29]: [s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53]
Condition : isnotnull(s_store_sk#25)

(7) BroadcastExchange
Input [29]: [s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#54]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#25]
Join condition: None

(9) Exchange
Input [52]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53]
Arguments: hashpartitioning(ss_cdemo_sk#4, 5), ENSURE_REQUIREMENTS, [id=#55]

(10) Sort [codegen id : 3]
Input [52]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53]
Arguments: [ss_cdemo_sk#4 ASC NULLS FIRST], false, 0

(11) Scan parquet default.customer_demographics
Output [9]: [cd_demo_sk#56, cd_gender#57, cd_marital_status#58, cd_education_status#59, cd_purchase_estimate#60, cd_credit_rating#61, cd_dep_count#62, cd_dep_employed_count#63, cd_dep_college_count#64]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,4 yr Degree         )),And(EqualTo(cd_marital_status,D),EqualTo(cd_education_status,2 yr Degree         ))),And(EqualTo(cd_marital_status,S),EqualTo(cd_education_status,College             )))]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(12) ColumnarToRow [codegen id : 4]
Input [9]: [cd_demo_sk#56, cd_gender#57, cd_marital_status#58, cd_education_status#59, cd_purchase_estimate#60, cd_credit_rating#61, cd_dep_count#62, cd_dep_employed_count#63, cd_dep_college_count#64]

(13) Filter [codegen id : 4]
Input [9]: [cd_demo_sk#56, cd_gender#57, cd_marital_status#58, cd_education_status#59, cd_purchase_estimate#60, cd_credit_rating#61, cd_dep_count#62, cd_dep_employed_count#63, cd_dep_college_count#64]
Condition : (isnotnull(cd_demo_sk#56) AND ((((cd_marital_status#58 = M) AND (cd_education_status#59 = 4 yr Degree         )) OR ((cd_marital_status#58 = D) AND (cd_education_status#59 = 2 yr Degree         ))) OR ((cd_marital_status#58 = S) AND (cd_education_status#59 = College             ))))

(14) Exchange
Input [9]: [cd_demo_sk#56, cd_gender#57, cd_marital_status#58, cd_education_status#59, cd_purchase_estimate#60, cd_credit_rating#61, cd_dep_count#62, cd_dep_employed_count#63, cd_dep_college_count#64]
Arguments: hashpartitioning(cd_demo_sk#56, 5), ENSURE_REQUIREMENTS, [id=#65]

(15) Sort [codegen id : 5]
Input [9]: [cd_demo_sk#56, cd_gender#57, cd_marital_status#58, cd_education_status#59, cd_purchase_estimate#60, cd_credit_rating#61, cd_dep_count#62, cd_dep_employed_count#63, cd_dep_college_count#64]
Arguments: [cd_demo_sk#56 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#56]
Join condition: ((((((cd_marital_status#58 = M) AND (cd_education_status#59 = 4 yr Degree         )) AND (ss_sales_price#13 >= 100.00)) AND (ss_sales_price#13 <= 150.00)) OR ((((cd_marital_status#58 = D) AND (cd_education_status#59 = 2 yr Degree         )) AND (ss_sales_price#13 >= 50.00)) AND (ss_sales_price#13 <= 100.00))) OR ((((cd_marital_status#58 = S) AND (cd_education_status#59 = College             )) AND (ss_sales_price#13 >= 150.00)) AND (ss_sales_price#13 <= 200.00)))

(17) Exchange
Input [61]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53, cd_demo_sk#56, cd_gender#57, cd_marital_status#58, cd_education_status#59, cd_purchase_estimate#60, cd_credit_rating#61, cd_dep_count#62, cd_dep_employed_count#63, cd_dep_college_count#64]
Arguments: hashpartitioning(ss_addr_sk#6, 5), ENSURE_REQUIREMENTS, [id=#66]

(18) Sort [codegen id : 7]
Input [61]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53, cd_demo_sk#56, cd_gender#57, cd_marital_status#58, cd_education_status#59, cd_purchase_estimate#60, cd_credit_rating#61, cd_dep_count#62, cd_dep_employed_count#63, cd_dep_college_count#64]
Arguments: [ss_addr_sk#6 ASC NULLS FIRST], false, 0

(19) Scan parquet default.customer_address
Output [13]: [ca_address_sk#67, ca_address_id#68, ca_street_number#69, ca_street_name#70, ca_street_type#71, ca_suite_number#72, ca_city#73, ca_county#74, ca_state#75, ca_zip#76, ca_country#77, ca_gmt_offset#78, ca_location_type#79]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_state, [CO,OH,TX]),In(ca_state, [KY,MN,OR])),In(ca_state, [CA,MS,VA]))]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(20) ColumnarToRow [codegen id : 8]
Input [13]: [ca_address_sk#67, ca_address_id#68, ca_street_number#69, ca_street_name#70, ca_street_type#71, ca_suite_number#72, ca_city#73, ca_county#74, ca_state#75, ca_zip#76, ca_country#77, ca_gmt_offset#78, ca_location_type#79]

(21) Filter [codegen id : 8]
Input [13]: [ca_address_sk#67, ca_address_id#68, ca_street_number#69, ca_street_name#70, ca_street_type#71, ca_suite_number#72, ca_city#73, ca_county#74, ca_state#75, ca_zip#76, ca_country#77, ca_gmt_offset#78, ca_location_type#79]
Condition : (((isnotnull(ca_country#77) AND (ca_country#77 = United States)) AND isnotnull(ca_address_sk#67)) AND ((ca_state#75 IN (CO,OH,TX) OR ca_state#75 IN (OR,MN,KY)) OR ca_state#75 IN (VA,CA,MS)))

(22) Exchange
Input [13]: [ca_address_sk#67, ca_address_id#68, ca_street_number#69, ca_street_name#70, ca_street_type#71, ca_suite_number#72, ca_city#73, ca_county#74, ca_state#75, ca_zip#76, ca_country#77, ca_gmt_offset#78, ca_location_type#79]
Arguments: hashpartitioning(ca_address_sk#67, 5), ENSURE_REQUIREMENTS, [id=#80]

(23) Sort [codegen id : 9]
Input [13]: [ca_address_sk#67, ca_address_id#68, ca_street_number#69, ca_street_name#70, ca_street_type#71, ca_suite_number#72, ca_city#73, ca_county#74, ca_state#75, ca_zip#76, ca_country#77, ca_gmt_offset#78, ca_location_type#79]
Arguments: [ca_address_sk#67 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 11]
Left keys [1]: [ss_addr_sk#6]
Right keys [1]: [ca_address_sk#67]
Join condition: ((((ca_state#75 IN (CO,OH,TX) AND (ss_net_profit#22 >= 0.00)) AND (ss_net_profit#22 <= 2000.00)) OR ((ca_state#75 IN (OR,MN,KY) AND (ss_net_profit#22 >= 150.00)) AND (ss_net_profit#22 <= 3000.00))) OR ((ca_state#75 IN (VA,CA,MS) AND (ss_net_profit#22 >= 50.00)) AND (ss_net_profit#22 <= 25000.00)))

(25) HashAggregate [codegen id : 11]
Input [74]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53, cd_demo_sk#56, cd_gender#57, cd_marital_status#58, cd_education_status#59, cd_purchase_estimate#60, cd_credit_rating#61, cd_dep_count#62, cd_dep_employed_count#63, cd_dep_college_count#64, ca_address_sk#67, ca_address_id#68, ca_street_number#69, ca_street_name#70, ca_street_type#71, ca_suite_number#72, ca_city#73, ca_county#74, ca_state#75, ca_zip#76, ca_country#77, ca_gmt_offset#78, ca_location_type#79]
Keys [1]: [ss_sold_date_sk#23]
Functions [1]: [partial_sum(ss_quantity#10)]
Aggregate Attributes [1]: [sum#81]
Results [2]: [ss_sold_date_sk#23, sum#82]

(26) Project [codegen id : 11]
Output [2]: [ss_sold_date_sk#23, sum#82 AS _pushedexpression#83]
Input [2]: [ss_sold_date_sk#23, sum#82]

(27) ReusedExchange [Reuses operator id: 37]
Output [1]: [d_date_sk#84]

(28) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#84]
Join condition: None

(29) Project [codegen id : 11]
Output [1]: [_pushedexpression#83]
Input [3]: [ss_sold_date_sk#23, _pushedexpression#83, d_date_sk#84]

(30) HashAggregate [codegen id : 11]
Input [1]: [_pushedexpression#83]
Keys: []
Functions [1]: [partial_sum(_pushedexpression#83)]
Aggregate Attributes [1]: [sum#85]
Results [1]: [sum#86]

(31) Exchange
Input [1]: [sum#86]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#87]

(32) HashAggregate [codegen id : 12]
Input [1]: [sum#86]
Keys: []
Functions [1]: [sum(_pushedexpression#83)]
Aggregate Attributes [1]: [sum(_pushedexpression#83)#88]
Results [1]: [sum(_pushedexpression#83)#88 AS sum(ss_quantity)#89]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#23 IN dynamicpruning#24
BroadcastExchange (37)
+- * HashAggregate (36)
   +- * Filter (35)
      +- * ColumnarToRow (34)
         +- Scan parquet default.date_dim (33)


(33) Scan parquet default.date_dim
Output [28]: [d_date_sk#84, d_date_id#90, d_date#91, d_month_seq#92, d_week_seq#93, d_quarter_seq#94, d_year#95, d_dow#96, d_moy#97, d_dom#98, d_qoy#99, d_fy_year#100, d_fy_quarter_seq#101, d_fy_week_seq#102, d_day_name#103, d_quarter_name#104, d_holiday#105, d_weekend#106, d_following_holiday#107, d_first_dom#108, d_last_dom#109, d_same_day_ly#110, d_same_day_lq#111, d_current_day#112, d_current_week#113, d_current_month#114, d_current_quarter#115, d_current_year#116]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(34) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#84, d_date_id#90, d_date#91, d_month_seq#92, d_week_seq#93, d_quarter_seq#94, d_year#95, d_dow#96, d_moy#97, d_dom#98, d_qoy#99, d_fy_year#100, d_fy_quarter_seq#101, d_fy_week_seq#102, d_day_name#103, d_quarter_name#104, d_holiday#105, d_weekend#106, d_following_holiday#107, d_first_dom#108, d_last_dom#109, d_same_day_ly#110, d_same_day_lq#111, d_current_day#112, d_current_week#113, d_current_month#114, d_current_quarter#115, d_current_year#116]

(35) Filter [codegen id : 1]
Input [28]: [d_date_sk#84, d_date_id#90, d_date#91, d_month_seq#92, d_week_seq#93, d_quarter_seq#94, d_year#95, d_dow#96, d_moy#97, d_dom#98, d_qoy#99, d_fy_year#100, d_fy_quarter_seq#101, d_fy_week_seq#102, d_day_name#103, d_quarter_name#104, d_holiday#105, d_weekend#106, d_following_holiday#107, d_first_dom#108, d_last_dom#109, d_same_day_ly#110, d_same_day_lq#111, d_current_day#112, d_current_week#113, d_current_month#114, d_current_quarter#115, d_current_year#116]
Condition : ((isnotnull(d_year#95) AND (d_year#95 = 2001)) AND isnotnull(d_date_sk#84))

(36) HashAggregate [codegen id : 1]
Input [28]: [d_date_sk#84, d_date_id#90, d_date#91, d_month_seq#92, d_week_seq#93, d_quarter_seq#94, d_year#95, d_dow#96, d_moy#97, d_dom#98, d_qoy#99, d_fy_year#100, d_fy_quarter_seq#101, d_fy_week_seq#102, d_day_name#103, d_quarter_name#104, d_holiday#105, d_weekend#106, d_following_holiday#107, d_first_dom#108, d_last_dom#109, d_same_day_ly#110, d_same_day_lq#111, d_current_day#112, d_current_week#113, d_current_month#114, d_current_quarter#115, d_current_year#116]
Keys [1]: [d_date_sk#84]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#84]

(37) BroadcastExchange
Input [1]: [d_date_sk#84]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117]


