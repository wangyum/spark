== Physical Plan ==
TakeOrderedAndProject (82)
+- * Project (81)
   +- * SortMergeJoin Inner (80)
      :- * Project (58)
      :  +- * SortMergeJoin Inner (57)
      :     :- * Sort (35)
      :     :  +- * Filter (34)
      :     :     +- * HashAggregate (33)
      :     :        +- Exchange (32)
      :     :           +- * HashAggregate (31)
      :     :              +- * Project (30)
      :     :                 +- * SortMergeJoin Inner (29)
      :     :                    :- * Sort (15)
      :     :                    :  +- Exchange (14)
      :     :                    :     +- * Project (13)
      :     :                    :        +- * HashAggregate (12)
      :     :                    :           +- * SortMergeJoin Inner (11)
      :     :                    :              :- * Sort (5)
      :     :                    :              :  +- Exchange (4)
      :     :                    :              :     +- * Filter (3)
      :     :                    :              :        +- * ColumnarToRow (2)
      :     :                    :              :           +- Scan parquet default.store_sales (1)
      :     :                    :              +- * Sort (10)
      :     :                    :                 +- Exchange (9)
      :     :                    :                    +- * Filter (8)
      :     :                    :                       +- * ColumnarToRow (7)
      :     :                    :                          +- Scan parquet default.item (6)
      :     :                    +- * Sort (28)
      :     :                       +- Exchange (27)
      :     :                          +- * HashAggregate (26)
      :     :                             +- * BroadcastHashJoin LeftSemi BuildRight (25)
      :     :                                :- * Filter (18)
      :     :                                :  +- * ColumnarToRow (17)
      :     :                                :     +- Scan parquet default.date_dim (16)
      :     :                                +- BroadcastExchange (24)
      :     :                                   +- * HashAggregate (23)
      :     :                                      +- * Project (22)
      :     :                                         +- * Filter (21)
      :     :                                            +- * ColumnarToRow (20)
      :     :                                               +- Scan parquet default.date_dim (19)
      :     +- * Sort (56)
      :        +- * Filter (55)
      :           +- * HashAggregate (54)
      :              +- Exchange (53)
      :                 +- * HashAggregate (52)
      :                    +- * Project (51)
      :                       +- * SortMergeJoin Inner (50)
      :                          :- * Sort (47)
      :                          :  +- Exchange (46)
      :                          :     +- * Project (45)
      :                          :        +- * HashAggregate (44)
      :                          :           +- * SortMergeJoin Inner (43)
      :                          :              :- * Sort (40)
      :                          :              :  +- Exchange (39)
      :                          :              :     +- * Filter (38)
      :                          :              :        +- * ColumnarToRow (37)
      :                          :              :           +- Scan parquet default.catalog_sales (36)
      :                          :              +- * Sort (42)
      :                          :                 +- ReusedExchange (41)
      :                          +- * Sort (49)
      :                             +- ReusedExchange (48)
      +- * Sort (79)
         +- * Filter (78)
            +- * HashAggregate (77)
               +- Exchange (76)
                  +- * HashAggregate (75)
                     +- * Project (74)
                        +- * SortMergeJoin Inner (73)
                           :- * Sort (70)
                           :  +- Exchange (69)
                           :     +- * Project (68)
                           :        +- * HashAggregate (67)
                           :           +- * SortMergeJoin Inner (66)
                           :              :- * Sort (63)
                           :              :  +- Exchange (62)
                           :              :     +- * Filter (61)
                           :              :        +- * ColumnarToRow (60)
                           :              :           +- Scan parquet default.web_sales (59)
                           :              +- * Sort (65)
                           :                 +- ReusedExchange (64)
                           +- * Sort (72)
                              +- ReusedExchange (71)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 1]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : isnotnull(ss_item_sk#2)

(4) Exchange
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#24]

(5) Sort [codegen id : 2]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(7) ColumnarToRow [codegen id : 3]
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]

(8) Filter [codegen id : 3]
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Condition : (isnotnull(i_item_sk#25) AND isnotnull(i_item_id#26))

(9) Exchange
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Arguments: hashpartitioning(i_item_sk#25, 5), ENSURE_REQUIREMENTS, [id=#47]

(10) Sort [codegen id : 4]
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Arguments: [i_item_sk#25 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#25]
Join condition: None

(12) HashAggregate [codegen id : 5]
Input [45]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Keys [2]: [ss_sold_date_sk#23, i_item_id#26]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#15))]
Aggregate Attributes [1]: [sum#48]
Results [3]: [ss_sold_date_sk#23, i_item_id#26, sum#49]

(13) Project [codegen id : 5]
Output [3]: [ss_sold_date_sk#23, i_item_id#26, sum#49 AS _pushedexpression#50]
Input [3]: [ss_sold_date_sk#23, i_item_id#26, sum#49]

(14) Exchange
Input [3]: [ss_sold_date_sk#23, i_item_id#26, _pushedexpression#50]
Arguments: hashpartitioning(ss_sold_date_sk#23, 5), ENSURE_REQUIREMENTS, [id=#51]

(15) Sort [codegen id : 6]
Input [3]: [ss_sold_date_sk#23, i_item_id#26, _pushedexpression#50]
Arguments: [ss_sold_date_sk#23 ASC NULLS FIRST], false, 0

(16) Scan parquet default.date_dim
Output [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(17) ColumnarToRow [codegen id : 8]
Input [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]

(18) Filter [codegen id : 8]
Input [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]
Condition : isnotnull(d_date_sk#52)

(19) Scan parquet default.date_dim
Output [2]: [d_date#80, d_week_seq#81]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(20) ColumnarToRow [codegen id : 7]
Input [2]: [d_date#80, d_week_seq#81]

(21) Filter [codegen id : 7]
Input [2]: [d_date#80, d_week_seq#81]
Condition : (isnotnull(d_week_seq#81) AND (d_week_seq#81 = Subquery scalar-subquery#82, [id=#83]))

(22) Project [codegen id : 7]
Output [1]: [d_date#80]
Input [2]: [d_date#80, d_week_seq#81]

(23) HashAggregate [codegen id : 7]
Input [1]: [d_date#80]
Keys [1]: [d_date#80]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date#80]

(24) BroadcastExchange
Input [1]: [d_date#80]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#84]

(25) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [d_date#54]
Right keys [1]: [d_date#80]
Join condition: None

(26) HashAggregate [codegen id : 8]
Input [28]: [d_date_sk#52, d_date_id#53, d_date#54, d_month_seq#55, d_week_seq#56, d_quarter_seq#57, d_year#58, d_dow#59, d_moy#60, d_dom#61, d_qoy#62, d_fy_year#63, d_fy_quarter_seq#64, d_fy_week_seq#65, d_day_name#66, d_quarter_name#67, d_holiday#68, d_weekend#69, d_following_holiday#70, d_first_dom#71, d_last_dom#72, d_same_day_ly#73, d_same_day_lq#74, d_current_day#75, d_current_week#76, d_current_month#77, d_current_quarter#78, d_current_year#79]
Keys [1]: [d_date_sk#52]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#52]

(27) Exchange
Input [1]: [d_date_sk#52]
Arguments: hashpartitioning(d_date_sk#52, 5), ENSURE_REQUIREMENTS, [id=#85]

(28) Sort [codegen id : 9]
Input [1]: [d_date_sk#52]
Arguments: [d_date_sk#52 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#52]
Join condition: None

(30) Project [codegen id : 10]
Output [2]: [i_item_id#26, _pushedexpression#86]
Input [4]: [ss_sold_date_sk#23, i_item_id#26, _pushedexpression#50, d_date_sk#52]

(31) HashAggregate [codegen id : 10]
Input [2]: [i_item_id#26, _pushedexpression#86]
Keys [1]: [i_item_id#26]
Functions [1]: [partial_sum(_pushedexpression#86)]
Aggregate Attributes [2]: [sum#87, isEmpty#88]
Results [3]: [i_item_id#26, sum#89, isEmpty#90]

(32) Exchange
Input [3]: [i_item_id#26, sum#89, isEmpty#90]
Arguments: hashpartitioning(i_item_id#26, 5), ENSURE_REQUIREMENTS, [id=#91]

(33) HashAggregate [codegen id : 11]
Input [3]: [i_item_id#26, sum#89, isEmpty#90]
Keys [1]: [i_item_id#26]
Functions [1]: [sum(_pushedexpression#86)]
Aggregate Attributes [1]: [sum(_pushedexpression#86)#92]
Results [2]: [i_item_id#26 AS item_id#93, cast(sum(_pushedexpression#86)#92 as decimal(17,2)) AS ss_item_rev#94]

(34) Filter [codegen id : 11]
Input [2]: [item_id#93, ss_item_rev#94]
Condition : isnotnull(ss_item_rev#94)

(35) Sort [codegen id : 11]
Input [2]: [item_id#93, ss_item_rev#94]
Arguments: [item_id#93 ASC NULLS FIRST], false, 0

(36) Scan parquet default.catalog_sales
Output [34]: [cs_sold_time_sk#95, cs_ship_date_sk#96, cs_bill_customer_sk#97, cs_bill_cdemo_sk#98, cs_bill_hdemo_sk#99, cs_bill_addr_sk#100, cs_ship_customer_sk#101, cs_ship_cdemo_sk#102, cs_ship_hdemo_sk#103, cs_ship_addr_sk#104, cs_call_center_sk#105, cs_catalog_page_sk#106, cs_ship_mode_sk#107, cs_warehouse_sk#108, cs_item_sk#109, cs_promo_sk#110, cs_order_number#111, cs_quantity#112, cs_wholesale_cost#113, cs_list_price#114, cs_sales_price#115, cs_ext_discount_amt#116, cs_ext_sales_price#117, cs_ext_wholesale_cost#118, cs_ext_list_price#119, cs_ext_tax#120, cs_coupon_amt#121, cs_ext_ship_cost#122, cs_net_paid#123, cs_net_paid_inc_tax#124, cs_net_paid_inc_ship#125, cs_net_paid_inc_ship_tax#126, cs_net_profit#127, cs_sold_date_sk#128]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#128), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_time_sk:int,cs_ship_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_bill_addr_sk:int,cs_ship_customer_sk:int,cs_ship_cdemo_sk:int,cs_ship_hdemo_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_catalog_page_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2),cs_ext_tax:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_ext_ship_cost:decimal(7,2),cs_net_paid:decimal(7,2),cs_net_paid_inc_tax:decimal(7,2),cs_net_paid_inc_ship:decimal(7,2),cs_net_paid_inc_ship_tax:decimal(7,2),cs_net_profit:decimal(7,2)>

(37) ColumnarToRow [codegen id : 12]
Input [34]: [cs_sold_time_sk#95, cs_ship_date_sk#96, cs_bill_customer_sk#97, cs_bill_cdemo_sk#98, cs_bill_hdemo_sk#99, cs_bill_addr_sk#100, cs_ship_customer_sk#101, cs_ship_cdemo_sk#102, cs_ship_hdemo_sk#103, cs_ship_addr_sk#104, cs_call_center_sk#105, cs_catalog_page_sk#106, cs_ship_mode_sk#107, cs_warehouse_sk#108, cs_item_sk#109, cs_promo_sk#110, cs_order_number#111, cs_quantity#112, cs_wholesale_cost#113, cs_list_price#114, cs_sales_price#115, cs_ext_discount_amt#116, cs_ext_sales_price#117, cs_ext_wholesale_cost#118, cs_ext_list_price#119, cs_ext_tax#120, cs_coupon_amt#121, cs_ext_ship_cost#122, cs_net_paid#123, cs_net_paid_inc_tax#124, cs_net_paid_inc_ship#125, cs_net_paid_inc_ship_tax#126, cs_net_profit#127, cs_sold_date_sk#128]

(38) Filter [codegen id : 12]
Input [34]: [cs_sold_time_sk#95, cs_ship_date_sk#96, cs_bill_customer_sk#97, cs_bill_cdemo_sk#98, cs_bill_hdemo_sk#99, cs_bill_addr_sk#100, cs_ship_customer_sk#101, cs_ship_cdemo_sk#102, cs_ship_hdemo_sk#103, cs_ship_addr_sk#104, cs_call_center_sk#105, cs_catalog_page_sk#106, cs_ship_mode_sk#107, cs_warehouse_sk#108, cs_item_sk#109, cs_promo_sk#110, cs_order_number#111, cs_quantity#112, cs_wholesale_cost#113, cs_list_price#114, cs_sales_price#115, cs_ext_discount_amt#116, cs_ext_sales_price#117, cs_ext_wholesale_cost#118, cs_ext_list_price#119, cs_ext_tax#120, cs_coupon_amt#121, cs_ext_ship_cost#122, cs_net_paid#123, cs_net_paid_inc_tax#124, cs_net_paid_inc_ship#125, cs_net_paid_inc_ship_tax#126, cs_net_profit#127, cs_sold_date_sk#128]
Condition : isnotnull(cs_item_sk#109)

(39) Exchange
Input [34]: [cs_sold_time_sk#95, cs_ship_date_sk#96, cs_bill_customer_sk#97, cs_bill_cdemo_sk#98, cs_bill_hdemo_sk#99, cs_bill_addr_sk#100, cs_ship_customer_sk#101, cs_ship_cdemo_sk#102, cs_ship_hdemo_sk#103, cs_ship_addr_sk#104, cs_call_center_sk#105, cs_catalog_page_sk#106, cs_ship_mode_sk#107, cs_warehouse_sk#108, cs_item_sk#109, cs_promo_sk#110, cs_order_number#111, cs_quantity#112, cs_wholesale_cost#113, cs_list_price#114, cs_sales_price#115, cs_ext_discount_amt#116, cs_ext_sales_price#117, cs_ext_wholesale_cost#118, cs_ext_list_price#119, cs_ext_tax#120, cs_coupon_amt#121, cs_ext_ship_cost#122, cs_net_paid#123, cs_net_paid_inc_tax#124, cs_net_paid_inc_ship#125, cs_net_paid_inc_ship_tax#126, cs_net_profit#127, cs_sold_date_sk#128]
Arguments: hashpartitioning(cs_item_sk#109, 5), ENSURE_REQUIREMENTS, [id=#129]

(40) Sort [codegen id : 13]
Input [34]: [cs_sold_time_sk#95, cs_ship_date_sk#96, cs_bill_customer_sk#97, cs_bill_cdemo_sk#98, cs_bill_hdemo_sk#99, cs_bill_addr_sk#100, cs_ship_customer_sk#101, cs_ship_cdemo_sk#102, cs_ship_hdemo_sk#103, cs_ship_addr_sk#104, cs_call_center_sk#105, cs_catalog_page_sk#106, cs_ship_mode_sk#107, cs_warehouse_sk#108, cs_item_sk#109, cs_promo_sk#110, cs_order_number#111, cs_quantity#112, cs_wholesale_cost#113, cs_list_price#114, cs_sales_price#115, cs_ext_discount_amt#116, cs_ext_sales_price#117, cs_ext_wholesale_cost#118, cs_ext_list_price#119, cs_ext_tax#120, cs_coupon_amt#121, cs_ext_ship_cost#122, cs_net_paid#123, cs_net_paid_inc_tax#124, cs_net_paid_inc_ship#125, cs_net_paid_inc_ship_tax#126, cs_net_profit#127, cs_sold_date_sk#128]
Arguments: [cs_item_sk#109 ASC NULLS FIRST], false, 0

(41) ReusedExchange [Reuses operator id: 9]
Output [22]: [i_item_sk#130, i_item_id#131, i_rec_start_date#132, i_rec_end_date#133, i_item_desc#134, i_current_price#135, i_wholesale_cost#136, i_brand_id#137, i_brand#138, i_class_id#139, i_class#140, i_category_id#141, i_category#142, i_manufact_id#143, i_manufact#144, i_size#145, i_formulation#146, i_color#147, i_units#148, i_container#149, i_manager_id#150, i_product_name#151]

(42) Sort [codegen id : 15]
Input [22]: [i_item_sk#130, i_item_id#131, i_rec_start_date#132, i_rec_end_date#133, i_item_desc#134, i_current_price#135, i_wholesale_cost#136, i_brand_id#137, i_brand#138, i_class_id#139, i_class#140, i_category_id#141, i_category#142, i_manufact_id#143, i_manufact#144, i_size#145, i_formulation#146, i_color#147, i_units#148, i_container#149, i_manager_id#150, i_product_name#151]
Arguments: [i_item_sk#130 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 16]
Left keys [1]: [cs_item_sk#109]
Right keys [1]: [i_item_sk#130]
Join condition: None

(44) HashAggregate [codegen id : 16]
Input [56]: [cs_sold_time_sk#95, cs_ship_date_sk#96, cs_bill_customer_sk#97, cs_bill_cdemo_sk#98, cs_bill_hdemo_sk#99, cs_bill_addr_sk#100, cs_ship_customer_sk#101, cs_ship_cdemo_sk#102, cs_ship_hdemo_sk#103, cs_ship_addr_sk#104, cs_call_center_sk#105, cs_catalog_page_sk#106, cs_ship_mode_sk#107, cs_warehouse_sk#108, cs_item_sk#109, cs_promo_sk#110, cs_order_number#111, cs_quantity#112, cs_wholesale_cost#113, cs_list_price#114, cs_sales_price#115, cs_ext_discount_amt#116, cs_ext_sales_price#117, cs_ext_wholesale_cost#118, cs_ext_list_price#119, cs_ext_tax#120, cs_coupon_amt#121, cs_ext_ship_cost#122, cs_net_paid#123, cs_net_paid_inc_tax#124, cs_net_paid_inc_ship#125, cs_net_paid_inc_ship_tax#126, cs_net_profit#127, cs_sold_date_sk#128, i_item_sk#130, i_item_id#131, i_rec_start_date#132, i_rec_end_date#133, i_item_desc#134, i_current_price#135, i_wholesale_cost#136, i_brand_id#137, i_brand#138, i_class_id#139, i_class#140, i_category_id#141, i_category#142, i_manufact_id#143, i_manufact#144, i_size#145, i_formulation#146, i_color#147, i_units#148, i_container#149, i_manager_id#150, i_product_name#151]
Keys [2]: [cs_sold_date_sk#128, i_item_id#131]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#117))]
Aggregate Attributes [1]: [sum#152]
Results [3]: [cs_sold_date_sk#128, i_item_id#131, sum#153]

(45) Project [codegen id : 16]
Output [3]: [cs_sold_date_sk#128, i_item_id#131, sum#153 AS _pushedexpression#154]
Input [3]: [cs_sold_date_sk#128, i_item_id#131, sum#153]

(46) Exchange
Input [3]: [cs_sold_date_sk#128, i_item_id#131, _pushedexpression#154]
Arguments: hashpartitioning(cs_sold_date_sk#128, 5), ENSURE_REQUIREMENTS, [id=#155]

(47) Sort [codegen id : 17]
Input [3]: [cs_sold_date_sk#128, i_item_id#131, _pushedexpression#154]
Arguments: [cs_sold_date_sk#128 ASC NULLS FIRST], false, 0

(48) ReusedExchange [Reuses operator id: 27]
Output [1]: [d_date_sk#156]

(49) Sort [codegen id : 20]
Input [1]: [d_date_sk#156]
Arguments: [d_date_sk#156 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 21]
Left keys [1]: [cs_sold_date_sk#128]
Right keys [1]: [d_date_sk#156]
Join condition: None

(51) Project [codegen id : 21]
Output [2]: [i_item_id#131, _pushedexpression#157]
Input [4]: [cs_sold_date_sk#128, i_item_id#131, _pushedexpression#154, d_date_sk#156]

(52) HashAggregate [codegen id : 21]
Input [2]: [i_item_id#131, _pushedexpression#157]
Keys [1]: [i_item_id#131]
Functions [1]: [partial_sum(_pushedexpression#157)]
Aggregate Attributes [2]: [sum#158, isEmpty#159]
Results [3]: [i_item_id#131, sum#160, isEmpty#161]

(53) Exchange
Input [3]: [i_item_id#131, sum#160, isEmpty#161]
Arguments: hashpartitioning(i_item_id#131, 5), ENSURE_REQUIREMENTS, [id=#162]

(54) HashAggregate [codegen id : 22]
Input [3]: [i_item_id#131, sum#160, isEmpty#161]
Keys [1]: [i_item_id#131]
Functions [1]: [sum(_pushedexpression#157)]
Aggregate Attributes [1]: [sum(_pushedexpression#157)#163]
Results [2]: [i_item_id#131 AS item_id#164, cast(sum(_pushedexpression#157)#163 as decimal(17,2)) AS cs_item_rev#165]

(55) Filter [codegen id : 22]
Input [2]: [item_id#164, cs_item_rev#165]
Condition : isnotnull(cs_item_rev#165)

(56) Sort [codegen id : 22]
Input [2]: [item_id#164, cs_item_rev#165]
Arguments: [item_id#164 ASC NULLS FIRST], false, 0

(57) SortMergeJoin [codegen id : 23]
Left keys [1]: [item_id#93]
Right keys [1]: [item_id#164]
Join condition: ((((cast(ss_item_rev#94 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#165)), DecimalType(19,3))) AND (cast(ss_item_rev#94 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#165)), DecimalType(20,3)))) AND (cast(cs_item_rev#165 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#94)), DecimalType(19,3)))) AND (cast(cs_item_rev#165 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#94)), DecimalType(20,3))))

(58) Project [codegen id : 23]
Output [3]: [item_id#93, ss_item_rev#94, cs_item_rev#165]
Input [4]: [item_id#93, ss_item_rev#94, item_id#164, cs_item_rev#165]

(59) Scan parquet default.web_sales
Output [34]: [ws_sold_time_sk#166, ws_ship_date_sk#167, ws_item_sk#168, ws_bill_customer_sk#169, ws_bill_cdemo_sk#170, ws_bill_hdemo_sk#171, ws_bill_addr_sk#172, ws_ship_customer_sk#173, ws_ship_cdemo_sk#174, ws_ship_hdemo_sk#175, ws_ship_addr_sk#176, ws_web_page_sk#177, ws_web_site_sk#178, ws_ship_mode_sk#179, ws_warehouse_sk#180, ws_promo_sk#181, ws_order_number#182, ws_quantity#183, ws_wholesale_cost#184, ws_list_price#185, ws_sales_price#186, ws_ext_discount_amt#187, ws_ext_sales_price#188, ws_ext_wholesale_cost#189, ws_ext_list_price#190, ws_ext_tax#191, ws_coupon_amt#192, ws_ext_ship_cost#193, ws_net_paid#194, ws_net_paid_inc_tax#195, ws_net_paid_inc_ship#196, ws_net_paid_inc_ship_tax#197, ws_net_profit#198, ws_sold_date_sk#199]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#199), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_sold_time_sk:int,ws_ship_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_bill_cdemo_sk:int,ws_bill_hdemo_sk:int,ws_bill_addr_sk:int,ws_ship_customer_sk:int,ws_ship_cdemo_sk:int,ws_ship_hdemo_sk:int,ws_ship_addr_sk:int,ws_web_page_sk:int,ws_web_site_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_promo_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_list_price:decimal(7,2),ws_sales_price:decimal(7,2),ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2),ws_ext_tax:decimal(7,2),ws_coupon_amt:decimal(7,2),ws_ext_ship_cost:decimal(7,2),ws_net_paid:decimal(7,2),ws_net_paid_inc_tax:decimal(7,2),ws_net_paid_inc_ship:decimal(7,2),ws_net_paid_inc_ship_tax:decimal(7,2),ws_net_profit:decimal(7,2)>

(60) ColumnarToRow [codegen id : 24]
Input [34]: [ws_sold_time_sk#166, ws_ship_date_sk#167, ws_item_sk#168, ws_bill_customer_sk#169, ws_bill_cdemo_sk#170, ws_bill_hdemo_sk#171, ws_bill_addr_sk#172, ws_ship_customer_sk#173, ws_ship_cdemo_sk#174, ws_ship_hdemo_sk#175, ws_ship_addr_sk#176, ws_web_page_sk#177, ws_web_site_sk#178, ws_ship_mode_sk#179, ws_warehouse_sk#180, ws_promo_sk#181, ws_order_number#182, ws_quantity#183, ws_wholesale_cost#184, ws_list_price#185, ws_sales_price#186, ws_ext_discount_amt#187, ws_ext_sales_price#188, ws_ext_wholesale_cost#189, ws_ext_list_price#190, ws_ext_tax#191, ws_coupon_amt#192, ws_ext_ship_cost#193, ws_net_paid#194, ws_net_paid_inc_tax#195, ws_net_paid_inc_ship#196, ws_net_paid_inc_ship_tax#197, ws_net_profit#198, ws_sold_date_sk#199]

(61) Filter [codegen id : 24]
Input [34]: [ws_sold_time_sk#166, ws_ship_date_sk#167, ws_item_sk#168, ws_bill_customer_sk#169, ws_bill_cdemo_sk#170, ws_bill_hdemo_sk#171, ws_bill_addr_sk#172, ws_ship_customer_sk#173, ws_ship_cdemo_sk#174, ws_ship_hdemo_sk#175, ws_ship_addr_sk#176, ws_web_page_sk#177, ws_web_site_sk#178, ws_ship_mode_sk#179, ws_warehouse_sk#180, ws_promo_sk#181, ws_order_number#182, ws_quantity#183, ws_wholesale_cost#184, ws_list_price#185, ws_sales_price#186, ws_ext_discount_amt#187, ws_ext_sales_price#188, ws_ext_wholesale_cost#189, ws_ext_list_price#190, ws_ext_tax#191, ws_coupon_amt#192, ws_ext_ship_cost#193, ws_net_paid#194, ws_net_paid_inc_tax#195, ws_net_paid_inc_ship#196, ws_net_paid_inc_ship_tax#197, ws_net_profit#198, ws_sold_date_sk#199]
Condition : isnotnull(ws_item_sk#168)

(62) Exchange
Input [34]: [ws_sold_time_sk#166, ws_ship_date_sk#167, ws_item_sk#168, ws_bill_customer_sk#169, ws_bill_cdemo_sk#170, ws_bill_hdemo_sk#171, ws_bill_addr_sk#172, ws_ship_customer_sk#173, ws_ship_cdemo_sk#174, ws_ship_hdemo_sk#175, ws_ship_addr_sk#176, ws_web_page_sk#177, ws_web_site_sk#178, ws_ship_mode_sk#179, ws_warehouse_sk#180, ws_promo_sk#181, ws_order_number#182, ws_quantity#183, ws_wholesale_cost#184, ws_list_price#185, ws_sales_price#186, ws_ext_discount_amt#187, ws_ext_sales_price#188, ws_ext_wholesale_cost#189, ws_ext_list_price#190, ws_ext_tax#191, ws_coupon_amt#192, ws_ext_ship_cost#193, ws_net_paid#194, ws_net_paid_inc_tax#195, ws_net_paid_inc_ship#196, ws_net_paid_inc_ship_tax#197, ws_net_profit#198, ws_sold_date_sk#199]
Arguments: hashpartitioning(ws_item_sk#168, 5), ENSURE_REQUIREMENTS, [id=#200]

(63) Sort [codegen id : 25]
Input [34]: [ws_sold_time_sk#166, ws_ship_date_sk#167, ws_item_sk#168, ws_bill_customer_sk#169, ws_bill_cdemo_sk#170, ws_bill_hdemo_sk#171, ws_bill_addr_sk#172, ws_ship_customer_sk#173, ws_ship_cdemo_sk#174, ws_ship_hdemo_sk#175, ws_ship_addr_sk#176, ws_web_page_sk#177, ws_web_site_sk#178, ws_ship_mode_sk#179, ws_warehouse_sk#180, ws_promo_sk#181, ws_order_number#182, ws_quantity#183, ws_wholesale_cost#184, ws_list_price#185, ws_sales_price#186, ws_ext_discount_amt#187, ws_ext_sales_price#188, ws_ext_wholesale_cost#189, ws_ext_list_price#190, ws_ext_tax#191, ws_coupon_amt#192, ws_ext_ship_cost#193, ws_net_paid#194, ws_net_paid_inc_tax#195, ws_net_paid_inc_ship#196, ws_net_paid_inc_ship_tax#197, ws_net_profit#198, ws_sold_date_sk#199]
Arguments: [ws_item_sk#168 ASC NULLS FIRST], false, 0

(64) ReusedExchange [Reuses operator id: 9]
Output [22]: [i_item_sk#201, i_item_id#202, i_rec_start_date#203, i_rec_end_date#204, i_item_desc#205, i_current_price#206, i_wholesale_cost#207, i_brand_id#208, i_brand#209, i_class_id#210, i_class#211, i_category_id#212, i_category#213, i_manufact_id#214, i_manufact#215, i_size#216, i_formulation#217, i_color#218, i_units#219, i_container#220, i_manager_id#221, i_product_name#222]

(65) Sort [codegen id : 27]
Input [22]: [i_item_sk#201, i_item_id#202, i_rec_start_date#203, i_rec_end_date#204, i_item_desc#205, i_current_price#206, i_wholesale_cost#207, i_brand_id#208, i_brand#209, i_class_id#210, i_class#211, i_category_id#212, i_category#213, i_manufact_id#214, i_manufact#215, i_size#216, i_formulation#217, i_color#218, i_units#219, i_container#220, i_manager_id#221, i_product_name#222]
Arguments: [i_item_sk#201 ASC NULLS FIRST], false, 0

(66) SortMergeJoin [codegen id : 28]
Left keys [1]: [ws_item_sk#168]
Right keys [1]: [i_item_sk#201]
Join condition: None

(67) HashAggregate [codegen id : 28]
Input [56]: [ws_sold_time_sk#166, ws_ship_date_sk#167, ws_item_sk#168, ws_bill_customer_sk#169, ws_bill_cdemo_sk#170, ws_bill_hdemo_sk#171, ws_bill_addr_sk#172, ws_ship_customer_sk#173, ws_ship_cdemo_sk#174, ws_ship_hdemo_sk#175, ws_ship_addr_sk#176, ws_web_page_sk#177, ws_web_site_sk#178, ws_ship_mode_sk#179, ws_warehouse_sk#180, ws_promo_sk#181, ws_order_number#182, ws_quantity#183, ws_wholesale_cost#184, ws_list_price#185, ws_sales_price#186, ws_ext_discount_amt#187, ws_ext_sales_price#188, ws_ext_wholesale_cost#189, ws_ext_list_price#190, ws_ext_tax#191, ws_coupon_amt#192, ws_ext_ship_cost#193, ws_net_paid#194, ws_net_paid_inc_tax#195, ws_net_paid_inc_ship#196, ws_net_paid_inc_ship_tax#197, ws_net_profit#198, ws_sold_date_sk#199, i_item_sk#201, i_item_id#202, i_rec_start_date#203, i_rec_end_date#204, i_item_desc#205, i_current_price#206, i_wholesale_cost#207, i_brand_id#208, i_brand#209, i_class_id#210, i_class#211, i_category_id#212, i_category#213, i_manufact_id#214, i_manufact#215, i_size#216, i_formulation#217, i_color#218, i_units#219, i_container#220, i_manager_id#221, i_product_name#222]
Keys [2]: [ws_sold_date_sk#199, i_item_id#202]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#188))]
Aggregate Attributes [1]: [sum#223]
Results [3]: [ws_sold_date_sk#199, i_item_id#202, sum#224]

(68) Project [codegen id : 28]
Output [3]: [ws_sold_date_sk#199, i_item_id#202, sum#224 AS _pushedexpression#225]
Input [3]: [ws_sold_date_sk#199, i_item_id#202, sum#224]

(69) Exchange
Input [3]: [ws_sold_date_sk#199, i_item_id#202, _pushedexpression#225]
Arguments: hashpartitioning(ws_sold_date_sk#199, 5), ENSURE_REQUIREMENTS, [id=#226]

(70) Sort [codegen id : 29]
Input [3]: [ws_sold_date_sk#199, i_item_id#202, _pushedexpression#225]
Arguments: [ws_sold_date_sk#199 ASC NULLS FIRST], false, 0

(71) ReusedExchange [Reuses operator id: 27]
Output [1]: [d_date_sk#227]

(72) Sort [codegen id : 32]
Input [1]: [d_date_sk#227]
Arguments: [d_date_sk#227 ASC NULLS FIRST], false, 0

(73) SortMergeJoin [codegen id : 33]
Left keys [1]: [ws_sold_date_sk#199]
Right keys [1]: [d_date_sk#227]
Join condition: None

(74) Project [codegen id : 33]
Output [2]: [i_item_id#202, _pushedexpression#228]
Input [4]: [ws_sold_date_sk#199, i_item_id#202, _pushedexpression#225, d_date_sk#227]

(75) HashAggregate [codegen id : 33]
Input [2]: [i_item_id#202, _pushedexpression#228]
Keys [1]: [i_item_id#202]
Functions [1]: [partial_sum(_pushedexpression#228)]
Aggregate Attributes [2]: [sum#229, isEmpty#230]
Results [3]: [i_item_id#202, sum#231, isEmpty#232]

(76) Exchange
Input [3]: [i_item_id#202, sum#231, isEmpty#232]
Arguments: hashpartitioning(i_item_id#202, 5), ENSURE_REQUIREMENTS, [id=#233]

(77) HashAggregate [codegen id : 34]
Input [3]: [i_item_id#202, sum#231, isEmpty#232]
Keys [1]: [i_item_id#202]
Functions [1]: [sum(_pushedexpression#228)]
Aggregate Attributes [1]: [sum(_pushedexpression#228)#234]
Results [2]: [i_item_id#202 AS item_id#235, cast(sum(_pushedexpression#228)#234 as decimal(17,2)) AS ws_item_rev#236]

(78) Filter [codegen id : 34]
Input [2]: [item_id#235, ws_item_rev#236]
Condition : isnotnull(ws_item_rev#236)

(79) Sort [codegen id : 34]
Input [2]: [item_id#235, ws_item_rev#236]
Arguments: [item_id#235 ASC NULLS FIRST], false, 0

(80) SortMergeJoin [codegen id : 35]
Left keys [1]: [item_id#93]
Right keys [1]: [item_id#235]
Join condition: ((((((((cast(ss_item_rev#94 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#236)), DecimalType(19,3))) AND (cast(ss_item_rev#94 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#236)), DecimalType(20,3)))) AND (cast(cs_item_rev#165 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#236)), DecimalType(19,3)))) AND (cast(cs_item_rev#165 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#236)), DecimalType(20,3)))) AND (cast(ws_item_rev#236 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#94)), DecimalType(19,3)))) AND (cast(ws_item_rev#236 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#94)), DecimalType(20,3)))) AND (cast(ws_item_rev#236 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#165)), DecimalType(19,3)))) AND (cast(ws_item_rev#236 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#165)), DecimalType(20,3))))

(81) Project [codegen id : 35]
Output [8]: [item_id#93, ss_item_rev#94, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#94 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#94 as decimal(18,2))) + promote_precision(cast(cs_item_rev#165 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#236 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS ss_dev#237, cs_item_rev#165, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#165 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#94 as decimal(18,2))) + promote_precision(cast(cs_item_rev#165 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#236 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS cs_dev#238, ws_item_rev#236, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#236 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#94 as decimal(18,2))) + promote_precision(cast(cs_item_rev#165 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#236 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS ws_dev#239, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#94 as decimal(18,2))) + promote_precision(cast(cs_item_rev#165 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#236 as decimal(19,2)))), DecimalType(19,2))) / 3.00), DecimalType(23,6)) AS average#240]
Input [5]: [item_id#93, ss_item_rev#94, cs_item_rev#165, item_id#235, ws_item_rev#236]

(82) TakeOrderedAndProject
Input [8]: [item_id#93, ss_item_rev#94, ss_dev#237, cs_item_rev#165, cs_dev#238, ws_item_rev#236, ws_dev#239, average#240]
Arguments: 100, [item_id#93 ASC NULLS FIRST, ss_item_rev#94 ASC NULLS FIRST], [item_id#93, ss_item_rev#94, ss_dev#237, cs_item_rev#165, cs_dev#238, ws_item_rev#236, ws_dev#239, average#240]

===== Subqueries =====

Subquery:1 Hosting operator id = 21 Hosting Expression = Subquery scalar-subquery#82, [id=#83]
* Project (86)
+- * Filter (85)
   +- * ColumnarToRow (84)
      +- Scan parquet default.date_dim (83)


(83) Scan parquet default.date_dim
Output [2]: [d_date#241, d_week_seq#242]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(84) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#241, d_week_seq#242]

(85) Filter [codegen id : 1]
Input [2]: [d_date#241, d_week_seq#242]
Condition : (isnotnull(d_date#241) AND (d_date#241 = 2000-01-03))

(86) Project [codegen id : 1]
Output [1]: [d_week_seq#242]
Input [2]: [d_date#241, d_week_seq#242]


