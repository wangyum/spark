== Physical Plan ==
TakeOrderedAndProject (52)
+- * Project (51)
   +- * BroadcastHashJoin Inner BuildRight (50)
      :- * Project (44)
      :  +- * BroadcastHashJoin Inner BuildRight (43)
      :     :- * Project (38)
      :     :  +- * BroadcastHashJoin Inner BuildRight (37)
      :     :     :- * Filter (18)
      :     :     :  +- * HashAggregate (17)
      :     :     :     +- Exchange (16)
      :     :     :        +- * HashAggregate (15)
      :     :     :           +- * Project (14)
      :     :     :              +- * BroadcastHashJoin Inner BuildRight (13)
      :     :     :                 :- * Project (7)
      :     :     :                 :  +- * HashAggregate (6)
      :     :     :                 :     +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :                 :        :- * Filter (3)
      :     :     :                 :        :  +- * ColumnarToRow (2)
      :     :     :                 :        :     +- Scan parquet default.web_returns (1)
      :     :     :                 :        +- ReusedExchange (4)
      :     :     :                 +- BroadcastExchange (12)
      :     :     :                    +- * HashAggregate (11)
      :     :     :                       +- * Filter (10)
      :     :     :                          +- * ColumnarToRow (9)
      :     :     :                             +- Scan parquet default.customer_address (8)
      :     :     +- BroadcastExchange (36)
      :     :        +- * Filter (35)
      :     :           +- * HashAggregate (34)
      :     :              +- Exchange (33)
      :     :                 +- * HashAggregate (32)
      :     :                    +- * HashAggregate (31)
      :     :                       +- Exchange (30)
      :     :                          +- * HashAggregate (29)
      :     :                             +- * Project (28)
      :     :                                +- * BroadcastHashJoin Inner BuildRight (27)
      :     :                                   :- * Project (25)
      :     :                                   :  +- * HashAggregate (24)
      :     :                                   :     +- * BroadcastHashJoin Inner BuildRight (23)
      :     :                                   :        :- * Filter (21)
      :     :                                   :        :  +- * ColumnarToRow (20)
      :     :                                   :        :     +- Scan parquet default.web_returns (19)
      :     :                                   :        +- ReusedExchange (22)
      :     :                                   +- ReusedExchange (26)
      :     +- BroadcastExchange (42)
      :        +- * Filter (41)
      :           +- * ColumnarToRow (40)
      :              +- Scan parquet default.customer (39)
      +- BroadcastExchange (49)
         +- * Project (48)
            +- * Filter (47)
               +- * ColumnarToRow (46)
                  +- Scan parquet default.customer_address (45)


(1) Scan parquet default.web_returns
Output [24]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#24), dynamicpruningexpression(wr_returned_date_sk#24 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(wr_returning_addr_sk), IsNotNull(wr_returning_customer_sk)]
ReadSchema: struct<wr_returned_time_sk:int,wr_item_sk:int,wr_refunded_customer_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_hdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_customer_sk:int,wr_returning_cdemo_sk:int,wr_returning_hdemo_sk:int,wr_returning_addr_sk:int,wr_web_page_sk:int,wr_reason_sk:int,wr_order_number:int,wr_return_quantity:int,wr_return_amt:decimal(7,2),wr_return_tax:decimal(7,2),wr_return_amt_inc_tax:decimal(7,2),wr_fee:decimal(7,2),wr_return_ship_cost:decimal(7,2),wr_refunded_cash:decimal(7,2),wr_reversed_charge:decimal(7,2),wr_account_credit:decimal(7,2),wr_net_loss:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [24]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24]

(3) Filter [codegen id : 3]
Input [24]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24]
Condition : (isnotnull(wr_returning_addr_sk#10) AND isnotnull(wr_returning_customer_sk#7))

(4) ReusedExchange [Reuses operator id: 56]
Output [28]: [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [wr_returned_date_sk#24]
Right keys [1]: [d_date_sk#26]
Join condition: None

(6) HashAggregate [codegen id : 3]
Input [52]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24, d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]
Keys [2]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#15))]
Aggregate Attributes [1]: [sum#54]
Results [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, sum#55]

(7) Project [codegen id : 3]
Output [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, sum#55 AS _pushedexpression#56]
Input [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, sum#55]

(8) Scan parquet default.customer_address
Output [13]: [ca_address_sk#57, ca_address_id#58, ca_street_number#59, ca_street_name#60, ca_street_type#61, ca_suite_number#62, ca_city#63, ca_county#64, ca_state#65, ca_zip#66, ca_country#67, ca_gmt_offset#68, ca_location_type#69]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(9) ColumnarToRow [codegen id : 2]
Input [13]: [ca_address_sk#57, ca_address_id#58, ca_street_number#59, ca_street_name#60, ca_street_type#61, ca_suite_number#62, ca_city#63, ca_county#64, ca_state#65, ca_zip#66, ca_country#67, ca_gmt_offset#68, ca_location_type#69]

(10) Filter [codegen id : 2]
Input [13]: [ca_address_sk#57, ca_address_id#58, ca_street_number#59, ca_street_name#60, ca_street_type#61, ca_suite_number#62, ca_city#63, ca_county#64, ca_state#65, ca_zip#66, ca_country#67, ca_gmt_offset#68, ca_location_type#69]
Condition : (isnotnull(ca_address_sk#57) AND isnotnull(ca_state#65))

(11) HashAggregate [codegen id : 2]
Input [13]: [ca_address_sk#57, ca_address_id#58, ca_street_number#59, ca_street_name#60, ca_street_type#61, ca_suite_number#62, ca_city#63, ca_county#64, ca_state#65, ca_zip#66, ca_country#67, ca_gmt_offset#68, ca_location_type#69]
Keys [2]: [ca_address_sk#57, ca_state#65]
Functions: []
Aggregate Attributes: []
Results [2]: [ca_address_sk#57, ca_state#65]

(12) BroadcastExchange
Input [2]: [ca_address_sk#57, ca_state#65]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#70]

(13) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [wr_returning_addr_sk#10]
Right keys [1]: [ca_address_sk#57]
Join condition: None

(14) Project [codegen id : 3]
Output [3]: [wr_returning_customer_sk#7, _pushedexpression#71, ca_state#65]
Input [5]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, _pushedexpression#56, ca_address_sk#57, ca_state#65]

(15) HashAggregate [codegen id : 3]
Input [3]: [wr_returning_customer_sk#7, _pushedexpression#71, ca_state#65]
Keys [2]: [wr_returning_customer_sk#7, ca_state#65]
Functions [1]: [partial_sum(_pushedexpression#71)]
Aggregate Attributes [2]: [sum#72, isEmpty#73]
Results [4]: [wr_returning_customer_sk#7, ca_state#65, sum#74, isEmpty#75]

(16) Exchange
Input [4]: [wr_returning_customer_sk#7, ca_state#65, sum#74, isEmpty#75]
Arguments: hashpartitioning(wr_returning_customer_sk#7, ca_state#65, 5), ENSURE_REQUIREMENTS, [id=#76]

(17) HashAggregate [codegen id : 11]
Input [4]: [wr_returning_customer_sk#7, ca_state#65, sum#74, isEmpty#75]
Keys [2]: [wr_returning_customer_sk#7, ca_state#65]
Functions [1]: [sum(_pushedexpression#71)]
Aggregate Attributes [1]: [sum(_pushedexpression#71)#77]
Results [3]: [wr_returning_customer_sk#7 AS ctr_customer_sk#78, ca_state#65 AS ctr_state#79, cast(sum(_pushedexpression#71)#77 as decimal(17,2)) AS ctr_total_return#80]

(18) Filter [codegen id : 11]
Input [3]: [ctr_customer_sk#78, ctr_state#79, ctr_total_return#80]
Condition : isnotnull(ctr_total_return#80)

(19) Scan parquet default.web_returns
Output [24]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#24), dynamicpruningexpression(wr_returned_date_sk#24 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(wr_returning_addr_sk)]
ReadSchema: struct<wr_returned_time_sk:int,wr_item_sk:int,wr_refunded_customer_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_hdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_customer_sk:int,wr_returning_cdemo_sk:int,wr_returning_hdemo_sk:int,wr_returning_addr_sk:int,wr_web_page_sk:int,wr_reason_sk:int,wr_order_number:int,wr_return_quantity:int,wr_return_amt:decimal(7,2),wr_return_tax:decimal(7,2),wr_return_amt_inc_tax:decimal(7,2),wr_fee:decimal(7,2),wr_return_ship_cost:decimal(7,2),wr_refunded_cash:decimal(7,2),wr_reversed_charge:decimal(7,2),wr_account_credit:decimal(7,2),wr_net_loss:decimal(7,2)>

(20) ColumnarToRow [codegen id : 6]
Input [24]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24]

(21) Filter [codegen id : 6]
Input [24]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24]
Condition : isnotnull(wr_returning_addr_sk#10)

(22) ReusedExchange [Reuses operator id: 56]
Output [28]: [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_returned_date_sk#24]
Right keys [1]: [d_date_sk#26]
Join condition: None

(24) HashAggregate [codegen id : 6]
Input [52]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24, d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]
Keys [2]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#15))]
Aggregate Attributes [1]: [sum#81]
Results [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, sum#82]

(25) Project [codegen id : 6]
Output [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, sum#82 AS _pushedexpression#83]
Input [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, sum#82]

(26) ReusedExchange [Reuses operator id: 12]
Output [2]: [ca_address_sk#57, ca_state#65]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_returning_addr_sk#10]
Right keys [1]: [ca_address_sk#57]
Join condition: None

(28) Project [codegen id : 6]
Output [3]: [wr_returning_customer_sk#7, _pushedexpression#84, ca_state#65]
Input [5]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, _pushedexpression#83, ca_address_sk#57, ca_state#65]

(29) HashAggregate [codegen id : 6]
Input [3]: [wr_returning_customer_sk#7, _pushedexpression#84, ca_state#65]
Keys [2]: [wr_returning_customer_sk#7, ca_state#65]
Functions [1]: [partial_sum(_pushedexpression#84)]
Aggregate Attributes [2]: [sum#85, isEmpty#86]
Results [4]: [wr_returning_customer_sk#7, ca_state#65, sum#87, isEmpty#88]

(30) Exchange
Input [4]: [wr_returning_customer_sk#7, ca_state#65, sum#87, isEmpty#88]
Arguments: hashpartitioning(wr_returning_customer_sk#7, ca_state#65, 5), ENSURE_REQUIREMENTS, [id=#89]

(31) HashAggregate [codegen id : 7]
Input [4]: [wr_returning_customer_sk#7, ca_state#65, sum#87, isEmpty#88]
Keys [2]: [wr_returning_customer_sk#7, ca_state#65]
Functions [1]: [sum(_pushedexpression#84)]
Aggregate Attributes [1]: [sum(_pushedexpression#84)#77]
Results [2]: [ca_state#65 AS ctr_state#79, cast(sum(_pushedexpression#84)#77 as decimal(17,2)) AS ctr_total_return#80]

(32) HashAggregate [codegen id : 7]
Input [2]: [ctr_state#79, ctr_total_return#80]
Keys [1]: [ctr_state#79]
Functions [1]: [partial_avg(ctr_total_return#80)]
Aggregate Attributes [2]: [sum#90, count#91]
Results [3]: [ctr_state#79, sum#92, count#93]

(33) Exchange
Input [3]: [ctr_state#79, sum#92, count#93]
Arguments: hashpartitioning(ctr_state#79, 5), ENSURE_REQUIREMENTS, [id=#94]

(34) HashAggregate [codegen id : 8]
Input [3]: [ctr_state#79, sum#92, count#93]
Keys [1]: [ctr_state#79]
Functions [1]: [avg(ctr_total_return#80)]
Aggregate Attributes [1]: [avg(ctr_total_return#80)#95]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#80)#95) * 1.200000), DecimalType(24,7)) AS (avg(ctr_total_return) * 1.2)#96, ctr_state#79 AS ctr_state#79#97]

(35) Filter [codegen id : 8]
Input [2]: [(avg(ctr_total_return) * 1.2)#96, ctr_state#79#97]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#96)

(36) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#96, ctr_state#79#97]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#98]

(37) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_state#79]
Right keys [1]: [ctr_state#79#97]
Join condition: (cast(ctr_total_return#80 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#96)

(38) Project [codegen id : 11]
Output [2]: [ctr_customer_sk#78, ctr_total_return#80]
Input [5]: [ctr_customer_sk#78, ctr_state#79, ctr_total_return#80, (avg(ctr_total_return) * 1.2)#96, ctr_state#79#97]

(39) Scan parquet default.customer
Output [14]: [c_customer_sk#99, c_customer_id#100, c_current_addr_sk#101, c_salutation#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_day#106, c_birth_month#107, c_birth_year#108, c_birth_country#109, c_login#110, c_email_address#111, c_last_review_date#112]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(40) ColumnarToRow [codegen id : 9]
Input [14]: [c_customer_sk#99, c_customer_id#100, c_current_addr_sk#101, c_salutation#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_day#106, c_birth_month#107, c_birth_year#108, c_birth_country#109, c_login#110, c_email_address#111, c_last_review_date#112]

(41) Filter [codegen id : 9]
Input [14]: [c_customer_sk#99, c_customer_id#100, c_current_addr_sk#101, c_salutation#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_day#106, c_birth_month#107, c_birth_year#108, c_birth_country#109, c_login#110, c_email_address#111, c_last_review_date#112]
Condition : (isnotnull(c_customer_sk#99) AND isnotnull(c_current_addr_sk#101))

(42) BroadcastExchange
Input [14]: [c_customer_sk#99, c_customer_id#100, c_current_addr_sk#101, c_salutation#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_day#106, c_birth_month#107, c_birth_year#108, c_birth_country#109, c_login#110, c_email_address#111, c_last_review_date#112]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#113]

(43) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_customer_sk#78]
Right keys [1]: [c_customer_sk#99]
Join condition: None

(44) Project [codegen id : 11]
Output [14]: [ctr_total_return#80, c_customer_id#100, c_current_addr_sk#101, c_salutation#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_day#106, c_birth_month#107, c_birth_year#108, c_birth_country#109, c_login#110, c_email_address#111, c_last_review_date#112]
Input [16]: [ctr_customer_sk#78, ctr_total_return#80, c_customer_sk#99, c_customer_id#100, c_current_addr_sk#101, c_salutation#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_day#106, c_birth_month#107, c_birth_year#108, c_birth_country#109, c_login#110, c_email_address#111, c_last_review_date#112]

(45) Scan parquet default.customer_address
Output [2]: [ca_address_sk#114, ca_state#115]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(46) ColumnarToRow [codegen id : 10]
Input [2]: [ca_address_sk#114, ca_state#115]

(47) Filter [codegen id : 10]
Input [2]: [ca_address_sk#114, ca_state#115]
Condition : ((isnotnull(ca_state#115) AND (ca_state#115 = GA)) AND isnotnull(ca_address_sk#114))

(48) Project [codegen id : 10]
Output [1]: [ca_address_sk#114]
Input [2]: [ca_address_sk#114, ca_state#115]

(49) BroadcastExchange
Input [1]: [ca_address_sk#114]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#116]

(50) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#101]
Right keys [1]: [ca_address_sk#114]
Join condition: None

(51) Project [codegen id : 11]
Output [13]: [c_customer_id#100, c_salutation#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_day#106, c_birth_month#107, c_birth_year#108, c_birth_country#109, c_login#110, c_email_address#111, c_last_review_date#112, ctr_total_return#80]
Input [15]: [ctr_total_return#80, c_customer_id#100, c_current_addr_sk#101, c_salutation#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_day#106, c_birth_month#107, c_birth_year#108, c_birth_country#109, c_login#110, c_email_address#111, c_last_review_date#112, ca_address_sk#114]

(52) TakeOrderedAndProject
Input [13]: [c_customer_id#100, c_salutation#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_day#106, c_birth_month#107, c_birth_year#108, c_birth_country#109, c_login#110, c_email_address#111, c_last_review_date#112, ctr_total_return#80]
Arguments: 100, [c_customer_id#100 ASC NULLS FIRST, c_salutation#102 ASC NULLS FIRST, c_first_name#103 ASC NULLS FIRST, c_last_name#104 ASC NULLS FIRST, c_preferred_cust_flag#105 ASC NULLS FIRST, c_birth_day#106 ASC NULLS FIRST, c_birth_month#107 ASC NULLS FIRST, c_birth_year#108 ASC NULLS FIRST, c_birth_country#109 ASC NULLS FIRST, c_login#110 ASC NULLS FIRST, c_email_address#111 ASC NULLS FIRST, c_last_review_date#112 ASC NULLS FIRST, ctr_total_return#80 ASC NULLS FIRST], [c_customer_id#100, c_salutation#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_day#106, c_birth_month#107, c_birth_year#108, c_birth_country#109, c_login#110, c_email_address#111, c_last_review_date#112, ctr_total_return#80]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = wr_returned_date_sk#24 IN dynamicpruning#25
BroadcastExchange (56)
+- * Filter (55)
   +- * ColumnarToRow (54)
      +- Scan parquet default.date_dim (53)


(53) Scan parquet default.date_dim
Output [28]: [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(54) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]

(55) Filter [codegen id : 1]
Input [28]: [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]
Condition : ((isnotnull(d_year#32) AND (d_year#32 = 2002)) AND isnotnull(d_date_sk#26))

(56) BroadcastExchange
Input [28]: [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#117]

Subquery:2 Hosting operator id = 19 Hosting Expression = wr_returned_date_sk#24 IN dynamicpruning#25


