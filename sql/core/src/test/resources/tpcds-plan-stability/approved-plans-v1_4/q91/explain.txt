== Physical Plan ==
* Sort (39)
+- Exchange (38)
   +- * HashAggregate (37)
      +- Exchange (36)
         +- * HashAggregate (35)
            +- * Project (34)
               +- * BroadcastHashJoin Inner BuildRight (33)
                  :- * Project (27)
                  :  +- HashAggregate (26)
                  :     +- BroadcastHashJoin Inner BuildRight (25)
                  :        :- BroadcastHashJoin Inner BuildRight (20)
                  :        :  :- BroadcastHashJoin Inner BuildRight (15)
                  :        :  :  :- * BroadcastHashJoin Inner BuildRight (10)
                  :        :  :  :  :- * BroadcastHashJoin Inner BuildRight (8)
                  :        :  :  :  :  :- * Filter (3)
                  :        :  :  :  :  :  +- * ColumnarToRow (2)
                  :        :  :  :  :  :     +- Scan parquet default.call_center (1)
                  :        :  :  :  :  +- BroadcastExchange (7)
                  :        :  :  :  :     +- * Filter (6)
                  :        :  :  :  :        +- * ColumnarToRow (5)
                  :        :  :  :  :           +- Scan parquet default.catalog_returns (4)
                  :        :  :  :  +- ReusedExchange (9)
                  :        :  :  +- BroadcastExchange (14)
                  :        :  :     +- * Filter (13)
                  :        :  :        +- * ColumnarToRow (12)
                  :        :  :           +- Scan parquet default.customer (11)
                  :        :  +- BroadcastExchange (19)
                  :        :     +- * Filter (18)
                  :        :        +- * ColumnarToRow (17)
                  :        :           +- Scan parquet default.customer_address (16)
                  :        +- BroadcastExchange (24)
                  :           +- * Filter (23)
                  :              +- * ColumnarToRow (22)
                  :                 +- Scan parquet default.customer_demographics (21)
                  +- BroadcastExchange (32)
                     +- * HashAggregate (31)
                        +- * Filter (30)
                           +- * ColumnarToRow (29)
                              +- Scan parquet default.household_demographics (28)


(1) Scan parquet default.call_center
Output [31]: [cc_call_center_sk#1, cc_call_center_id#2, cc_rec_start_date#3, cc_rec_end_date#4, cc_closed_date_sk#5, cc_open_date_sk#6, cc_name#7, cc_class#8, cc_employees#9, cc_sq_ft#10, cc_hours#11, cc_manager#12, cc_mkt_id#13, cc_mkt_class#14, cc_mkt_desc#15, cc_market_manager#16, cc_division#17, cc_division_name#18, cc_company#19, cc_company_name#20, cc_street_number#21, cc_street_name#22, cc_street_type#23, cc_suite_number#24, cc_city#25, cc_county#26, cc_state#27, cc_zip#28, cc_country#29, cc_gmt_offset#30, cc_tax_percentage#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_call_center_id:string,cc_rec_start_date:date,cc_rec_end_date:date,cc_closed_date_sk:int,cc_open_date_sk:int,cc_name:string,cc_class:string,cc_employees:int,cc_sq_ft:int,cc_hours:string,cc_manager:string,cc_mkt_id:int,cc_mkt_class:string,cc_mkt_desc:string,cc_market_manager:string,cc_division:int,cc_division_name:string,cc_company:int,cc_company_name:string,cc_street_number:string,cc_street_name:string,cc_street_type:string,cc_suite_number:string,cc_city:string,cc_county:string,cc_state:string,cc_zip:string,cc_country:string,cc_gmt_offset:decimal(5,2),cc_tax_percentage:decimal(5,2)>

(2) ColumnarToRow [codegen id : 3]
Input [31]: [cc_call_center_sk#1, cc_call_center_id#2, cc_rec_start_date#3, cc_rec_end_date#4, cc_closed_date_sk#5, cc_open_date_sk#6, cc_name#7, cc_class#8, cc_employees#9, cc_sq_ft#10, cc_hours#11, cc_manager#12, cc_mkt_id#13, cc_mkt_class#14, cc_mkt_desc#15, cc_market_manager#16, cc_division#17, cc_division_name#18, cc_company#19, cc_company_name#20, cc_street_number#21, cc_street_name#22, cc_street_type#23, cc_suite_number#24, cc_city#25, cc_county#26, cc_state#27, cc_zip#28, cc_country#29, cc_gmt_offset#30, cc_tax_percentage#31]

(3) Filter [codegen id : 3]
Input [31]: [cc_call_center_sk#1, cc_call_center_id#2, cc_rec_start_date#3, cc_rec_end_date#4, cc_closed_date_sk#5, cc_open_date_sk#6, cc_name#7, cc_class#8, cc_employees#9, cc_sq_ft#10, cc_hours#11, cc_manager#12, cc_mkt_id#13, cc_mkt_class#14, cc_mkt_desc#15, cc_market_manager#16, cc_division#17, cc_division_name#18, cc_company#19, cc_company_name#20, cc_street_number#21, cc_street_name#22, cc_street_type#23, cc_suite_number#24, cc_city#25, cc_county#26, cc_state#27, cc_zip#28, cc_country#29, cc_gmt_offset#30, cc_tax_percentage#31]
Condition : isnotnull(cc_call_center_sk#1)

(4) Scan parquet default.catalog_returns
Output [27]: [cr_returned_time_sk#32, cr_item_sk#33, cr_refunded_customer_sk#34, cr_refunded_cdemo_sk#35, cr_refunded_hdemo_sk#36, cr_refunded_addr_sk#37, cr_returning_customer_sk#38, cr_returning_cdemo_sk#39, cr_returning_hdemo_sk#40, cr_returning_addr_sk#41, cr_call_center_sk#42, cr_catalog_page_sk#43, cr_ship_mode_sk#44, cr_warehouse_sk#45, cr_reason_sk#46, cr_order_number#47, cr_return_quantity#48, cr_return_amount#49, cr_return_tax#50, cr_return_amt_inc_tax#51, cr_fee#52, cr_return_ship_cost#53, cr_refunded_cash#54, cr_reversed_charge#55, cr_store_credit#56, cr_net_loss#57, cr_returned_date_sk#58]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#58), dynamicpruningexpression(cr_returned_date_sk#58 IN dynamicpruning#59)]
PushedFilters: [IsNotNull(cr_call_center_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returned_time_sk:int,cr_item_sk:int,cr_refunded_customer_sk:int,cr_refunded_cdemo_sk:int,cr_refunded_hdemo_sk:int,cr_refunded_addr_sk:int,cr_returning_customer_sk:int,cr_returning_cdemo_sk:int,cr_returning_hdemo_sk:int,cr_returning_addr_sk:int,cr_call_center_sk:int,cr_catalog_page_sk:int,cr_ship_mode_sk:int,cr_warehouse_sk:int,cr_reason_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2),cr_return_tax:decimal(7,2),cr_return_amt_inc_tax:decimal(7,2),cr_fee:decimal(7,2),cr_return_ship_cost:decimal(7,2),cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2),cr_net_loss:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [27]: [cr_returned_time_sk#32, cr_item_sk#33, cr_refunded_customer_sk#34, cr_refunded_cdemo_sk#35, cr_refunded_hdemo_sk#36, cr_refunded_addr_sk#37, cr_returning_customer_sk#38, cr_returning_cdemo_sk#39, cr_returning_hdemo_sk#40, cr_returning_addr_sk#41, cr_call_center_sk#42, cr_catalog_page_sk#43, cr_ship_mode_sk#44, cr_warehouse_sk#45, cr_reason_sk#46, cr_order_number#47, cr_return_quantity#48, cr_return_amount#49, cr_return_tax#50, cr_return_amt_inc_tax#51, cr_fee#52, cr_return_ship_cost#53, cr_refunded_cash#54, cr_reversed_charge#55, cr_store_credit#56, cr_net_loss#57, cr_returned_date_sk#58]

(6) Filter [codegen id : 1]
Input [27]: [cr_returned_time_sk#32, cr_item_sk#33, cr_refunded_customer_sk#34, cr_refunded_cdemo_sk#35, cr_refunded_hdemo_sk#36, cr_refunded_addr_sk#37, cr_returning_customer_sk#38, cr_returning_cdemo_sk#39, cr_returning_hdemo_sk#40, cr_returning_addr_sk#41, cr_call_center_sk#42, cr_catalog_page_sk#43, cr_ship_mode_sk#44, cr_warehouse_sk#45, cr_reason_sk#46, cr_order_number#47, cr_return_quantity#48, cr_return_amount#49, cr_return_tax#50, cr_return_amt_inc_tax#51, cr_fee#52, cr_return_ship_cost#53, cr_refunded_cash#54, cr_reversed_charge#55, cr_store_credit#56, cr_net_loss#57, cr_returned_date_sk#58]
Condition : (isnotnull(cr_call_center_sk#42) AND isnotnull(cr_returning_customer_sk#38))

(7) BroadcastExchange
Input [27]: [cr_returned_time_sk#32, cr_item_sk#33, cr_refunded_customer_sk#34, cr_refunded_cdemo_sk#35, cr_refunded_hdemo_sk#36, cr_refunded_addr_sk#37, cr_returning_customer_sk#38, cr_returning_cdemo_sk#39, cr_returning_hdemo_sk#40, cr_returning_addr_sk#41, cr_call_center_sk#42, cr_catalog_page_sk#43, cr_ship_mode_sk#44, cr_warehouse_sk#45, cr_reason_sk#46, cr_order_number#47, cr_return_quantity#48, cr_return_amount#49, cr_return_tax#50, cr_return_amt_inc_tax#51, cr_fee#52, cr_return_ship_cost#53, cr_refunded_cash#54, cr_reversed_charge#55, cr_store_credit#56, cr_net_loss#57, cr_returned_date_sk#58]
Arguments: HashedRelationBroadcastMode(List(cast(input[10, int, false] as bigint)),false), [id=#60]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cc_call_center_sk#1]
Right keys [1]: [cr_call_center_sk#42]
Join condition: None

(9) ReusedExchange [Reuses operator id: 43]
Output [28]: [d_date_sk#61, d_date_id#62, d_date#63, d_month_seq#64, d_week_seq#65, d_quarter_seq#66, d_year#67, d_dow#68, d_moy#69, d_dom#70, d_qoy#71, d_fy_year#72, d_fy_quarter_seq#73, d_fy_week_seq#74, d_day_name#75, d_quarter_name#76, d_holiday#77, d_weekend#78, d_following_holiday#79, d_first_dom#80, d_last_dom#81, d_same_day_ly#82, d_same_day_lq#83, d_current_day#84, d_current_week#85, d_current_month#86, d_current_quarter#87, d_current_year#88]

(10) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cr_returned_date_sk#58]
Right keys [1]: [d_date_sk#61]
Join condition: None

(11) Scan parquet default.customer
Output [18]: [c_customer_sk#89, c_customer_id#90, c_current_cdemo_sk#91, c_current_hdemo_sk#92, c_current_addr_sk#93, c_first_shipto_date_sk#94, c_first_sales_date_sk#95, c_salutation#96, c_first_name#97, c_last_name#98, c_preferred_cust_flag#99, c_birth_day#100, c_birth_month#101, c_birth_year#102, c_birth_country#103, c_login#104, c_email_address#105, c_last_review_date#106]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_hdemo_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(12) ColumnarToRow [codegen id : 4]
Input [18]: [c_customer_sk#89, c_customer_id#90, c_current_cdemo_sk#91, c_current_hdemo_sk#92, c_current_addr_sk#93, c_first_shipto_date_sk#94, c_first_sales_date_sk#95, c_salutation#96, c_first_name#97, c_last_name#98, c_preferred_cust_flag#99, c_birth_day#100, c_birth_month#101, c_birth_year#102, c_birth_country#103, c_login#104, c_email_address#105, c_last_review_date#106]

(13) Filter [codegen id : 4]
Input [18]: [c_customer_sk#89, c_customer_id#90, c_current_cdemo_sk#91, c_current_hdemo_sk#92, c_current_addr_sk#93, c_first_shipto_date_sk#94, c_first_sales_date_sk#95, c_salutation#96, c_first_name#97, c_last_name#98, c_preferred_cust_flag#99, c_birth_day#100, c_birth_month#101, c_birth_year#102, c_birth_country#103, c_login#104, c_email_address#105, c_last_review_date#106]
Condition : (((isnotnull(c_customer_sk#89) AND isnotnull(c_current_hdemo_sk#92)) AND isnotnull(c_current_addr_sk#93)) AND isnotnull(c_current_cdemo_sk#91))

(14) BroadcastExchange
Input [18]: [c_customer_sk#89, c_customer_id#90, c_current_cdemo_sk#91, c_current_hdemo_sk#92, c_current_addr_sk#93, c_first_shipto_date_sk#94, c_first_sales_date_sk#95, c_salutation#96, c_first_name#97, c_last_name#98, c_preferred_cust_flag#99, c_birth_day#100, c_birth_month#101, c_birth_year#102, c_birth_country#103, c_login#104, c_email_address#105, c_last_review_date#106]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#107]

(15) BroadcastHashJoin
Left keys [1]: [cr_returning_customer_sk#38]
Right keys [1]: [c_customer_sk#89]
Join condition: None

(16) Scan parquet default.customer_address
Output [13]: [ca_address_sk#108, ca_address_id#109, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-7.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(17) ColumnarToRow [codegen id : 5]
Input [13]: [ca_address_sk#108, ca_address_id#109, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120]

(18) Filter [codegen id : 5]
Input [13]: [ca_address_sk#108, ca_address_id#109, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120]
Condition : ((isnotnull(ca_gmt_offset#119) AND (ca_gmt_offset#119 = -7.00)) AND isnotnull(ca_address_sk#108))

(19) BroadcastExchange
Input [13]: [ca_address_sk#108, ca_address_id#109, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#121]

(20) BroadcastHashJoin
Left keys [1]: [c_current_addr_sk#93]
Right keys [1]: [ca_address_sk#108]
Join condition: None

(21) Scan parquet default.customer_demographics
Output [9]: [cd_demo_sk#122, cd_gender#123, cd_marital_status#124, cd_education_status#125, cd_purchase_estimate#126, cd_credit_rating#127, cd_dep_count#128, cd_dep_employed_count#129, cd_dep_college_count#130]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Unknown             )),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,Advanced Degree     ))), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(22) ColumnarToRow [codegen id : 6]
Input [9]: [cd_demo_sk#122, cd_gender#123, cd_marital_status#124, cd_education_status#125, cd_purchase_estimate#126, cd_credit_rating#127, cd_dep_count#128, cd_dep_employed_count#129, cd_dep_college_count#130]

(23) Filter [codegen id : 6]
Input [9]: [cd_demo_sk#122, cd_gender#123, cd_marital_status#124, cd_education_status#125, cd_purchase_estimate#126, cd_credit_rating#127, cd_dep_count#128, cd_dep_employed_count#129, cd_dep_college_count#130]
Condition : ((((cd_marital_status#124 = M) AND (cd_education_status#125 = Unknown             )) OR ((cd_marital_status#124 = W) AND (cd_education_status#125 = Advanced Degree     ))) AND isnotnull(cd_demo_sk#122))

(24) BroadcastExchange
Input [9]: [cd_demo_sk#122, cd_gender#123, cd_marital_status#124, cd_education_status#125, cd_purchase_estimate#126, cd_credit_rating#127, cd_dep_count#128, cd_dep_employed_count#129, cd_dep_college_count#130]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#131]

(25) BroadcastHashJoin
Left keys [1]: [c_current_cdemo_sk#91]
Right keys [1]: [cd_demo_sk#122]
Join condition: None

(26) HashAggregate
Input [126]: [cc_call_center_sk#1, cc_call_center_id#2, cc_rec_start_date#3, cc_rec_end_date#4, cc_closed_date_sk#5, cc_open_date_sk#6, cc_name#7, cc_class#8, cc_employees#9, cc_sq_ft#10, cc_hours#11, cc_manager#12, cc_mkt_id#13, cc_mkt_class#14, cc_mkt_desc#15, cc_market_manager#16, cc_division#17, cc_division_name#18, cc_company#19, cc_company_name#20, cc_street_number#21, cc_street_name#22, cc_street_type#23, cc_suite_number#24, cc_city#25, cc_county#26, cc_state#27, cc_zip#28, cc_country#29, cc_gmt_offset#30, cc_tax_percentage#31, cr_returned_time_sk#32, cr_item_sk#33, cr_refunded_customer_sk#34, cr_refunded_cdemo_sk#35, cr_refunded_hdemo_sk#36, cr_refunded_addr_sk#37, cr_returning_customer_sk#38, cr_returning_cdemo_sk#39, cr_returning_hdemo_sk#40, cr_returning_addr_sk#41, cr_call_center_sk#42, cr_catalog_page_sk#43, cr_ship_mode_sk#44, cr_warehouse_sk#45, cr_reason_sk#46, cr_order_number#47, cr_return_quantity#48, cr_return_amount#49, cr_return_tax#50, cr_return_amt_inc_tax#51, cr_fee#52, cr_return_ship_cost#53, cr_refunded_cash#54, cr_reversed_charge#55, cr_store_credit#56, cr_net_loss#57, cr_returned_date_sk#58, d_date_sk#61, d_date_id#62, d_date#63, d_month_seq#64, d_week_seq#65, d_quarter_seq#66, d_year#67, d_dow#68, d_moy#69, d_dom#70, d_qoy#71, d_fy_year#72, d_fy_quarter_seq#73, d_fy_week_seq#74, d_day_name#75, d_quarter_name#76, d_holiday#77, d_weekend#78, d_following_holiday#79, d_first_dom#80, d_last_dom#81, d_same_day_ly#82, d_same_day_lq#83, d_current_day#84, d_current_week#85, d_current_month#86, d_current_quarter#87, d_current_year#88, c_customer_sk#89, c_customer_id#90, c_current_cdemo_sk#91, c_current_hdemo_sk#92, c_current_addr_sk#93, c_first_shipto_date_sk#94, c_first_sales_date_sk#95, c_salutation#96, c_first_name#97, c_last_name#98, c_preferred_cust_flag#99, c_birth_day#100, c_birth_month#101, c_birth_year#102, c_birth_country#103, c_login#104, c_email_address#105, c_last_review_date#106, ca_address_sk#108, ca_address_id#109, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120, cd_demo_sk#122, cd_gender#123, cd_marital_status#124, cd_education_status#125, cd_purchase_estimate#126, cd_credit_rating#127, cd_dep_count#128, cd_dep_employed_count#129, cd_dep_college_count#130]
Keys [6]: [c_current_hdemo_sk#92, cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125]
Functions [1]: [partial_sum(UnscaledValue(cr_net_loss#57))]
Aggregate Attributes [1]: [sum#132]
Results [7]: [c_current_hdemo_sk#92, cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125, sum#133]

(27) Project [codegen id : 8]
Output [7]: [c_current_hdemo_sk#92, cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125, sum#133 AS _pushedexpression#134]
Input [7]: [c_current_hdemo_sk#92, cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125, sum#133]

(28) Scan parquet default.household_demographics
Output [5]: [hd_demo_sk#135, hd_income_band_sk#136, hd_buy_potential#137, hd_dep_count#138, hd_vehicle_count#139]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), StringStartsWith(hd_buy_potential,Unknown), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int,hd_buy_potential:string,hd_dep_count:int,hd_vehicle_count:int>

(29) ColumnarToRow [codegen id : 7]
Input [5]: [hd_demo_sk#135, hd_income_band_sk#136, hd_buy_potential#137, hd_dep_count#138, hd_vehicle_count#139]

(30) Filter [codegen id : 7]
Input [5]: [hd_demo_sk#135, hd_income_band_sk#136, hd_buy_potential#137, hd_dep_count#138, hd_vehicle_count#139]
Condition : ((isnotnull(hd_buy_potential#137) AND StartsWith(hd_buy_potential#137, Unknown)) AND isnotnull(hd_demo_sk#135))

(31) HashAggregate [codegen id : 7]
Input [5]: [hd_demo_sk#135, hd_income_band_sk#136, hd_buy_potential#137, hd_dep_count#138, hd_vehicle_count#139]
Keys [1]: [hd_demo_sk#135]
Functions: []
Aggregate Attributes: []
Results [1]: [hd_demo_sk#135]

(32) BroadcastExchange
Input [1]: [hd_demo_sk#135]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#140]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_hdemo_sk#92]
Right keys [1]: [hd_demo_sk#135]
Join condition: None

(34) Project [codegen id : 8]
Output [6]: [cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125, _pushedexpression#141]
Input [8]: [c_current_hdemo_sk#92, cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125, _pushedexpression#134, hd_demo_sk#135]

(35) HashAggregate [codegen id : 8]
Input [6]: [cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125, _pushedexpression#141]
Keys [5]: [cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125]
Functions [1]: [partial_sum(_pushedexpression#141)]
Aggregate Attributes [2]: [sum#142, isEmpty#143]
Results [7]: [cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125, sum#144, isEmpty#145]

(36) Exchange
Input [7]: [cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125, sum#144, isEmpty#145]
Arguments: hashpartitioning(cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125, 5), ENSURE_REQUIREMENTS, [id=#146]

(37) HashAggregate [codegen id : 9]
Input [7]: [cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125, sum#144, isEmpty#145]
Keys [5]: [cc_call_center_id#2, cc_name#7, cc_manager#12, cd_marital_status#124, cd_education_status#125]
Functions [1]: [sum(_pushedexpression#141)]
Aggregate Attributes [1]: [sum(_pushedexpression#141)#147]
Results [4]: [cc_call_center_id#2 AS Call_Center#148, cc_name#7 AS Call_Center_Name#149, cc_manager#12 AS Manager#150, cast(sum(_pushedexpression#141)#147 as decimal(17,2)) AS Returns_Loss#151]

(38) Exchange
Input [4]: [Call_Center#148, Call_Center_Name#149, Manager#150, Returns_Loss#151]
Arguments: rangepartitioning(Returns_Loss#151 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, [id=#152]

(39) Sort [codegen id : 10]
Input [4]: [Call_Center#148, Call_Center_Name#149, Manager#150, Returns_Loss#151]
Arguments: [Returns_Loss#151 DESC NULLS LAST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = cr_returned_date_sk#58 IN dynamicpruning#59
BroadcastExchange (43)
+- * Filter (42)
   +- * ColumnarToRow (41)
      +- Scan parquet default.date_dim (40)


(40) Scan parquet default.date_dim
Output [28]: [d_date_sk#61, d_date_id#62, d_date#63, d_month_seq#64, d_week_seq#65, d_quarter_seq#66, d_year#67, d_dow#68, d_moy#69, d_dom#70, d_qoy#71, d_fy_year#72, d_fy_quarter_seq#73, d_fy_week_seq#74, d_day_name#75, d_quarter_name#76, d_holiday#77, d_weekend#78, d_following_holiday#79, d_first_dom#80, d_last_dom#81, d_same_day_ly#82, d_same_day_lq#83, d_current_day#84, d_current_week#85, d_current_month#86, d_current_quarter#87, d_current_year#88]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(41) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#61, d_date_id#62, d_date#63, d_month_seq#64, d_week_seq#65, d_quarter_seq#66, d_year#67, d_dow#68, d_moy#69, d_dom#70, d_qoy#71, d_fy_year#72, d_fy_quarter_seq#73, d_fy_week_seq#74, d_day_name#75, d_quarter_name#76, d_holiday#77, d_weekend#78, d_following_holiday#79, d_first_dom#80, d_last_dom#81, d_same_day_ly#82, d_same_day_lq#83, d_current_day#84, d_current_week#85, d_current_month#86, d_current_quarter#87, d_current_year#88]

(42) Filter [codegen id : 1]
Input [28]: [d_date_sk#61, d_date_id#62, d_date#63, d_month_seq#64, d_week_seq#65, d_quarter_seq#66, d_year#67, d_dow#68, d_moy#69, d_dom#70, d_qoy#71, d_fy_year#72, d_fy_quarter_seq#73, d_fy_week_seq#74, d_day_name#75, d_quarter_name#76, d_holiday#77, d_weekend#78, d_following_holiday#79, d_first_dom#80, d_last_dom#81, d_same_day_ly#82, d_same_day_lq#83, d_current_day#84, d_current_week#85, d_current_month#86, d_current_quarter#87, d_current_year#88]
Condition : ((((isnotnull(d_year#67) AND isnotnull(d_moy#69)) AND (d_year#67 = 1998)) AND (d_moy#69 = 11)) AND isnotnull(d_date_sk#61))

(43) BroadcastExchange
Input [28]: [d_date_sk#61, d_date_id#62, d_date#63, d_month_seq#64, d_week_seq#65, d_quarter_seq#66, d_year#67, d_dow#68, d_moy#69, d_dom#70, d_qoy#71, d_fy_year#72, d_fy_quarter_seq#73, d_fy_week_seq#74, d_day_name#75, d_quarter_name#76, d_holiday#77, d_weekend#78, d_following_holiday#79, d_first_dom#80, d_last_dom#81, d_same_day_ly#82, d_same_day_lq#83, d_current_day#84, d_current_week#85, d_current_month#86, d_current_quarter#87, d_current_year#88]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#153]


