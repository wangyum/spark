== Physical Plan ==
TakeOrderedAndProject (41)
+- * Filter (40)
   +- Window (39)
      +- * Sort (38)
         +- Exchange (37)
            +- * Project (36)
               +- * SortMergeJoin FullOuter (35)
                  :- * Sort (17)
                  :  +- Exchange (16)
                  :     +- * Project (15)
                  :        +- Window (14)
                  :           +- * Sort (13)
                  :              +- Exchange (12)
                  :                 +- * HashAggregate (11)
                  :                    +- Exchange (10)
                  :                       +- * HashAggregate (9)
                  :                          +- * Project (8)
                  :                             +- * BroadcastHashJoin Inner BuildRight (7)
                  :                                :- * Project (5)
                  :                                :  +- * HashAggregate (4)
                  :                                :     +- * Filter (3)
                  :                                :        +- * ColumnarToRow (2)
                  :                                :           +- Scan parquet default.web_sales (1)
                  :                                +- ReusedExchange (6)
                  +- * Sort (34)
                     +- Exchange (33)
                        +- * Project (32)
                           +- Window (31)
                              +- * Sort (30)
                                 +- Exchange (29)
                                    +- * HashAggregate (28)
                                       +- Exchange (27)
                                          +- * HashAggregate (26)
                                             +- * Project (25)
                                                +- * BroadcastHashJoin Inner BuildRight (24)
                                                   :- * Project (22)
                                                   :  +- * HashAggregate (21)
                                                   :     +- * Filter (20)
                                                   :        +- * ColumnarToRow (19)
                                                   :           +- Scan parquet default.store_sales (18)
                                                   +- ReusedExchange (23)


(1) Scan parquet default.web_sales
Output [34]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#34), dynamicpruningexpression(ws_sold_date_sk#34 IN dynamicpruning#35)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_sold_time_sk:int,ws_ship_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_bill_cdemo_sk:int,ws_bill_hdemo_sk:int,ws_bill_addr_sk:int,ws_ship_customer_sk:int,ws_ship_cdemo_sk:int,ws_ship_hdemo_sk:int,ws_ship_addr_sk:int,ws_web_page_sk:int,ws_web_site_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_promo_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_list_price:decimal(7,2),ws_sales_price:decimal(7,2),ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2),ws_ext_tax:decimal(7,2),ws_coupon_amt:decimal(7,2),ws_ext_ship_cost:decimal(7,2),ws_net_paid:decimal(7,2),ws_net_paid_inc_tax:decimal(7,2),ws_net_paid_inc_ship:decimal(7,2),ws_net_paid_inc_ship_tax:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [34]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34]

(3) Filter [codegen id : 2]
Input [34]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34]
Condition : isnotnull(ws_item_sk#3)

(4) HashAggregate [codegen id : 2]
Input [34]: [ws_sold_time_sk#1, ws_ship_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_bill_cdemo_sk#5, ws_bill_hdemo_sk#6, ws_bill_addr_sk#7, ws_ship_customer_sk#8, ws_ship_cdemo_sk#9, ws_ship_hdemo_sk#10, ws_ship_addr_sk#11, ws_web_page_sk#12, ws_web_site_sk#13, ws_ship_mode_sk#14, ws_warehouse_sk#15, ws_promo_sk#16, ws_order_number#17, ws_quantity#18, ws_wholesale_cost#19, ws_list_price#20, ws_sales_price#21, ws_ext_discount_amt#22, ws_ext_sales_price#23, ws_ext_wholesale_cost#24, ws_ext_list_price#25, ws_ext_tax#26, ws_coupon_amt#27, ws_ext_ship_cost#28, ws_net_paid#29, ws_net_paid_inc_tax#30, ws_net_paid_inc_ship#31, ws_net_paid_inc_ship_tax#32, ws_net_profit#33, ws_sold_date_sk#34]
Keys [2]: [ws_sold_date_sk#34, ws_item_sk#3]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#21))]
Aggregate Attributes [1]: [sum#36]
Results [3]: [ws_sold_date_sk#34, ws_item_sk#3, sum#37]

(5) Project [codegen id : 2]
Output [3]: [ws_sold_date_sk#34, ws_item_sk#3, sum#37 AS _pushedexpression#38]
Input [3]: [ws_sold_date_sk#34, ws_item_sk#3, sum#37]

(6) ReusedExchange [Reuses operator id: 46]
Output [2]: [d_date_sk#39, d_date#40]

(7) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#34]
Right keys [1]: [d_date_sk#39]
Join condition: None

(8) Project [codegen id : 2]
Output [3]: [ws_item_sk#3, _pushedexpression#41, d_date#40]
Input [5]: [ws_sold_date_sk#34, ws_item_sk#3, _pushedexpression#38, d_date_sk#39, d_date#40]

(9) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#3, _pushedexpression#41, d_date#40]
Keys [2]: [ws_item_sk#3, d_date#40]
Functions [1]: [partial_sum(_pushedexpression#41)]
Aggregate Attributes [2]: [sum#42, isEmpty#43]
Results [4]: [ws_item_sk#3, d_date#40, sum#44, isEmpty#45]

(10) Exchange
Input [4]: [ws_item_sk#3, d_date#40, sum#44, isEmpty#45]
Arguments: hashpartitioning(ws_item_sk#3, d_date#40, 5), ENSURE_REQUIREMENTS, [id=#46]

(11) HashAggregate [codegen id : 3]
Input [4]: [ws_item_sk#3, d_date#40, sum#44, isEmpty#45]
Keys [2]: [ws_item_sk#3, d_date#40]
Functions [1]: [sum(_pushedexpression#41)]
Aggregate Attributes [1]: [sum(_pushedexpression#41)#47]
Results [4]: [ws_item_sk#3 AS item_sk#48, d_date#40, cast(sum(_pushedexpression#41)#47 as decimal(17,2)) AS _w0#49, ws_item_sk#3]

(12) Exchange
Input [4]: [item_sk#48, d_date#40, _w0#49, ws_item_sk#3]
Arguments: hashpartitioning(ws_item_sk#3, 5), ENSURE_REQUIREMENTS, [id=#50]

(13) Sort [codegen id : 4]
Input [4]: [item_sk#48, d_date#40, _w0#49, ws_item_sk#3]
Arguments: [ws_item_sk#3 ASC NULLS FIRST, d_date#40 ASC NULLS FIRST], false, 0

(14) Window
Input [4]: [item_sk#48, d_date#40, _w0#49, ws_item_sk#3]
Arguments: [sum(_w0#49) windowspecdefinition(ws_item_sk#3, d_date#40 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#51], [ws_item_sk#3], [d_date#40 ASC NULLS FIRST]

(15) Project [codegen id : 5]
Output [3]: [item_sk#48, d_date#40, cume_sales#51]
Input [5]: [item_sk#48, d_date#40, _w0#49, ws_item_sk#3, cume_sales#51]

(16) Exchange
Input [3]: [item_sk#48, d_date#40, cume_sales#51]
Arguments: hashpartitioning(item_sk#48, d_date#40, 5), ENSURE_REQUIREMENTS, [id=#52]

(17) Sort [codegen id : 6]
Input [3]: [item_sk#48, d_date#40, cume_sales#51]
Arguments: [item_sk#48 ASC NULLS FIRST, d_date#40 ASC NULLS FIRST], false, 0

(18) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#53, ss_item_sk#54, ss_customer_sk#55, ss_cdemo_sk#56, ss_hdemo_sk#57, ss_addr_sk#58, ss_store_sk#59, ss_promo_sk#60, ss_ticket_number#61, ss_quantity#62, ss_wholesale_cost#63, ss_list_price#64, ss_sales_price#65, ss_ext_discount_amt#66, ss_ext_sales_price#67, ss_ext_wholesale_cost#68, ss_ext_list_price#69, ss_ext_tax#70, ss_coupon_amt#71, ss_net_paid#72, ss_net_paid_inc_tax#73, ss_net_profit#74, ss_sold_date_sk#75]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#75), dynamicpruningexpression(ss_sold_date_sk#75 IN dynamicpruning#35)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(19) ColumnarToRow [codegen id : 8]
Input [23]: [ss_sold_time_sk#53, ss_item_sk#54, ss_customer_sk#55, ss_cdemo_sk#56, ss_hdemo_sk#57, ss_addr_sk#58, ss_store_sk#59, ss_promo_sk#60, ss_ticket_number#61, ss_quantity#62, ss_wholesale_cost#63, ss_list_price#64, ss_sales_price#65, ss_ext_discount_amt#66, ss_ext_sales_price#67, ss_ext_wholesale_cost#68, ss_ext_list_price#69, ss_ext_tax#70, ss_coupon_amt#71, ss_net_paid#72, ss_net_paid_inc_tax#73, ss_net_profit#74, ss_sold_date_sk#75]

(20) Filter [codegen id : 8]
Input [23]: [ss_sold_time_sk#53, ss_item_sk#54, ss_customer_sk#55, ss_cdemo_sk#56, ss_hdemo_sk#57, ss_addr_sk#58, ss_store_sk#59, ss_promo_sk#60, ss_ticket_number#61, ss_quantity#62, ss_wholesale_cost#63, ss_list_price#64, ss_sales_price#65, ss_ext_discount_amt#66, ss_ext_sales_price#67, ss_ext_wholesale_cost#68, ss_ext_list_price#69, ss_ext_tax#70, ss_coupon_amt#71, ss_net_paid#72, ss_net_paid_inc_tax#73, ss_net_profit#74, ss_sold_date_sk#75]
Condition : isnotnull(ss_item_sk#54)

(21) HashAggregate [codegen id : 8]
Input [23]: [ss_sold_time_sk#53, ss_item_sk#54, ss_customer_sk#55, ss_cdemo_sk#56, ss_hdemo_sk#57, ss_addr_sk#58, ss_store_sk#59, ss_promo_sk#60, ss_ticket_number#61, ss_quantity#62, ss_wholesale_cost#63, ss_list_price#64, ss_sales_price#65, ss_ext_discount_amt#66, ss_ext_sales_price#67, ss_ext_wholesale_cost#68, ss_ext_list_price#69, ss_ext_tax#70, ss_coupon_amt#71, ss_net_paid#72, ss_net_paid_inc_tax#73, ss_net_profit#74, ss_sold_date_sk#75]
Keys [2]: [ss_sold_date_sk#75, ss_item_sk#54]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#65))]
Aggregate Attributes [1]: [sum#76]
Results [3]: [ss_sold_date_sk#75, ss_item_sk#54, sum#77]

(22) Project [codegen id : 8]
Output [3]: [ss_sold_date_sk#75, ss_item_sk#54, sum#77 AS _pushedexpression#78]
Input [3]: [ss_sold_date_sk#75, ss_item_sk#54, sum#77]

(23) ReusedExchange [Reuses operator id: 46]
Output [2]: [d_date_sk#79, d_date#80]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#75]
Right keys [1]: [d_date_sk#79]
Join condition: None

(25) Project [codegen id : 8]
Output [3]: [ss_item_sk#54, _pushedexpression#81, d_date#80]
Input [5]: [ss_sold_date_sk#75, ss_item_sk#54, _pushedexpression#78, d_date_sk#79, d_date#80]

(26) HashAggregate [codegen id : 8]
Input [3]: [ss_item_sk#54, _pushedexpression#81, d_date#80]
Keys [2]: [ss_item_sk#54, d_date#80]
Functions [1]: [partial_sum(_pushedexpression#81)]
Aggregate Attributes [2]: [sum#82, isEmpty#83]
Results [4]: [ss_item_sk#54, d_date#80, sum#84, isEmpty#85]

(27) Exchange
Input [4]: [ss_item_sk#54, d_date#80, sum#84, isEmpty#85]
Arguments: hashpartitioning(ss_item_sk#54, d_date#80, 5), ENSURE_REQUIREMENTS, [id=#86]

(28) HashAggregate [codegen id : 9]
Input [4]: [ss_item_sk#54, d_date#80, sum#84, isEmpty#85]
Keys [2]: [ss_item_sk#54, d_date#80]
Functions [1]: [sum(_pushedexpression#81)]
Aggregate Attributes [1]: [sum(_pushedexpression#81)#87]
Results [4]: [ss_item_sk#54 AS item_sk#88, d_date#80, cast(sum(_pushedexpression#81)#87 as decimal(17,2)) AS _w0#89, ss_item_sk#54]

(29) Exchange
Input [4]: [item_sk#88, d_date#80, _w0#89, ss_item_sk#54]
Arguments: hashpartitioning(ss_item_sk#54, 5), ENSURE_REQUIREMENTS, [id=#90]

(30) Sort [codegen id : 10]
Input [4]: [item_sk#88, d_date#80, _w0#89, ss_item_sk#54]
Arguments: [ss_item_sk#54 ASC NULLS FIRST, d_date#80 ASC NULLS FIRST], false, 0

(31) Window
Input [4]: [item_sk#88, d_date#80, _w0#89, ss_item_sk#54]
Arguments: [sum(_w0#89) windowspecdefinition(ss_item_sk#54, d_date#80 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#91], [ss_item_sk#54], [d_date#80 ASC NULLS FIRST]

(32) Project [codegen id : 11]
Output [3]: [item_sk#88, d_date#80, cume_sales#91]
Input [5]: [item_sk#88, d_date#80, _w0#89, ss_item_sk#54, cume_sales#91]

(33) Exchange
Input [3]: [item_sk#88, d_date#80, cume_sales#91]
Arguments: hashpartitioning(item_sk#88, d_date#80, 5), ENSURE_REQUIREMENTS, [id=#92]

(34) Sort [codegen id : 12]
Input [3]: [item_sk#88, d_date#80, cume_sales#91]
Arguments: [item_sk#88 ASC NULLS FIRST, d_date#80 ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 13]
Left keys [2]: [item_sk#48, d_date#40]
Right keys [2]: [item_sk#88, d_date#80]
Join condition: None

(36) Project [codegen id : 13]
Output [4]: [CASE WHEN isnotnull(item_sk#48) THEN item_sk#48 ELSE item_sk#88 END AS item_sk#93, CASE WHEN isnotnull(d_date#40) THEN d_date#40 ELSE d_date#80 END AS d_date#94, cume_sales#51 AS web_sales#95, cume_sales#91 AS store_sales#96]
Input [6]: [item_sk#48, d_date#40, cume_sales#51, item_sk#88, d_date#80, cume_sales#91]

(37) Exchange
Input [4]: [item_sk#93, d_date#94, web_sales#95, store_sales#96]
Arguments: hashpartitioning(item_sk#93, 5), ENSURE_REQUIREMENTS, [id=#97]

(38) Sort [codegen id : 14]
Input [4]: [item_sk#93, d_date#94, web_sales#95, store_sales#96]
Arguments: [item_sk#93 ASC NULLS FIRST, d_date#94 ASC NULLS FIRST], false, 0

(39) Window
Input [4]: [item_sk#93, d_date#94, web_sales#95, store_sales#96]
Arguments: [max(web_sales#95) windowspecdefinition(item_sk#93, d_date#94 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#98, max(store_sales#96) windowspecdefinition(item_sk#93, d_date#94 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#99], [item_sk#93], [d_date#94 ASC NULLS FIRST]

(40) Filter [codegen id : 15]
Input [6]: [item_sk#93, d_date#94, web_sales#95, store_sales#96, web_cumulative#98, store_cumulative#99]
Condition : ((isnotnull(web_cumulative#98) AND isnotnull(store_cumulative#99)) AND (web_cumulative#98 > store_cumulative#99))

(41) TakeOrderedAndProject
Input [6]: [item_sk#93, d_date#94, web_sales#95, store_sales#96, web_cumulative#98, store_cumulative#99]
Arguments: 100, [item_sk#93 ASC NULLS FIRST, d_date#94 ASC NULLS FIRST], [item_sk#93, d_date#94, web_sales#95, store_sales#96, web_cumulative#98, store_cumulative#99]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#34 IN dynamicpruning#35
BroadcastExchange (46)
+- * HashAggregate (45)
   +- * Filter (44)
      +- * ColumnarToRow (43)
         +- Scan parquet default.date_dim (42)


(42) Scan parquet default.date_dim
Output [28]: [d_date_sk#39, d_date_id#100, d_date#40, d_month_seq#101, d_week_seq#102, d_quarter_seq#103, d_year#104, d_dow#105, d_moy#106, d_dom#107, d_qoy#108, d_fy_year#109, d_fy_quarter_seq#110, d_fy_week_seq#111, d_day_name#112, d_quarter_name#113, d_holiday#114, d_weekend#115, d_following_holiday#116, d_first_dom#117, d_last_dom#118, d_same_day_ly#119, d_same_day_lq#120, d_current_day#121, d_current_week#122, d_current_month#123, d_current_quarter#124, d_current_year#125]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(43) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#39, d_date_id#100, d_date#40, d_month_seq#101, d_week_seq#102, d_quarter_seq#103, d_year#104, d_dow#105, d_moy#106, d_dom#107, d_qoy#108, d_fy_year#109, d_fy_quarter_seq#110, d_fy_week_seq#111, d_day_name#112, d_quarter_name#113, d_holiday#114, d_weekend#115, d_following_holiday#116, d_first_dom#117, d_last_dom#118, d_same_day_ly#119, d_same_day_lq#120, d_current_day#121, d_current_week#122, d_current_month#123, d_current_quarter#124, d_current_year#125]

(44) Filter [codegen id : 1]
Input [28]: [d_date_sk#39, d_date_id#100, d_date#40, d_month_seq#101, d_week_seq#102, d_quarter_seq#103, d_year#104, d_dow#105, d_moy#106, d_dom#107, d_qoy#108, d_fy_year#109, d_fy_quarter_seq#110, d_fy_week_seq#111, d_day_name#112, d_quarter_name#113, d_holiday#114, d_weekend#115, d_following_holiday#116, d_first_dom#117, d_last_dom#118, d_same_day_ly#119, d_same_day_lq#120, d_current_day#121, d_current_week#122, d_current_month#123, d_current_quarter#124, d_current_year#125]
Condition : (((isnotnull(d_month_seq#101) AND (d_month_seq#101 >= 1200)) AND (d_month_seq#101 <= 1211)) AND isnotnull(d_date_sk#39))

(45) HashAggregate [codegen id : 1]
Input [28]: [d_date_sk#39, d_date_id#100, d_date#40, d_month_seq#101, d_week_seq#102, d_quarter_seq#103, d_year#104, d_dow#105, d_moy#106, d_dom#107, d_qoy#108, d_fy_year#109, d_fy_quarter_seq#110, d_fy_week_seq#111, d_day_name#112, d_quarter_name#113, d_holiday#114, d_weekend#115, d_following_holiday#116, d_first_dom#117, d_last_dom#118, d_same_day_ly#119, d_same_day_lq#120, d_current_day#121, d_current_week#122, d_current_month#123, d_current_quarter#124, d_current_year#125]
Keys [2]: [d_date_sk#39, d_date#40]
Functions: []
Aggregate Attributes: []
Results [2]: [d_date_sk#39, d_date#40]

(46) BroadcastExchange
Input [2]: [d_date_sk#39, d_date#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#126]

Subquery:2 Hosting operator id = 18 Hosting Expression = ss_sold_date_sk#75 IN dynamicpruning#35


