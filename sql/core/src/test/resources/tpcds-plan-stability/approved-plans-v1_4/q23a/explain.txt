== Physical Plan ==
* HashAggregate (69)
+- Exchange (68)
   +- * HashAggregate (67)
      +- Union (66)
         :- * Project (47)
         :  +- * BroadcastHashJoin Inner BuildRight (46)
         :     :- * Project (44)
         :     :  +- * SortMergeJoin LeftSemi (43)
         :     :     :- * Sort (25)
         :     :     :  +- Exchange (24)
         :     :     :     +- * Project (23)
         :     :     :        +- * BroadcastHashJoin LeftSemi BuildRight (22)
         :     :     :           :- * ColumnarToRow (2)
         :     :     :           :  +- Scan parquet default.catalog_sales (1)
         :     :     :           +- BroadcastExchange (21)
         :     :     :              +- * HashAggregate (20)
         :     :     :                 +- * Project (19)
         :     :     :                    +- * Filter (18)
         :     :     :                       +- * HashAggregate (17)
         :     :     :                          +- Exchange (16)
         :     :     :                             +- * HashAggregate (15)
         :     :     :                                +- * Project (14)
         :     :     :                                   +- * BroadcastHashJoin Inner BuildRight (13)
         :     :     :                                      :- * Project (8)
         :     :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (7)
         :     :     :                                      :     :- * Filter (5)
         :     :     :                                      :     :  +- * ColumnarToRow (4)
         :     :     :                                      :     :     +- Scan parquet default.store_sales (3)
         :     :     :                                      :     +- ReusedExchange (6)
         :     :     :                                      +- BroadcastExchange (12)
         :     :     :                                         +- * Filter (11)
         :     :     :                                            +- * ColumnarToRow (10)
         :     :     :                                               +- Scan parquet default.item (9)
         :     :     +- * Sort (42)
         :     :        +- * HashAggregate (41)
         :     :           +- * Project (40)
         :     :              +- * Filter (39)
         :     :                 +- * HashAggregate (38)
         :     :                    +- Exchange (37)
         :     :                       +- * HashAggregate (36)
         :     :                          +- * Project (35)
         :     :                             +- * BroadcastHashJoin Inner BuildRight (34)
         :     :                                :- * Project (29)
         :     :                                :  +- * Filter (28)
         :     :                                :     +- * ColumnarToRow (27)
         :     :                                :        +- Scan parquet default.store_sales (26)
         :     :                                +- BroadcastExchange (33)
         :     :                                   +- * Filter (32)
         :     :                                      +- * ColumnarToRow (31)
         :     :                                         +- Scan parquet default.customer (30)
         :     +- ReusedExchange (45)
         +- * Project (65)
            +- * BroadcastHashJoin Inner BuildRight (64)
               :- * Project (62)
               :  +- * SortMergeJoin LeftSemi (61)
               :     :- * Sort (54)
               :     :  +- Exchange (53)
               :     :     +- * Project (52)
               :     :        +- * BroadcastHashJoin LeftSemi BuildRight (51)
               :     :           :- * ColumnarToRow (49)
               :     :           :  +- Scan parquet default.web_sales (48)
               :     :           +- ReusedExchange (50)
               :     +- * Sort (60)
               :        +- * HashAggregate (59)
               :           +- * Project (58)
               :              +- * Filter (57)
               :                 +- * HashAggregate (56)
               :                    +- ReusedExchange (55)
               +- ReusedExchange (63)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Scan parquet default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(4) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(5) Filter [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(6) ReusedExchange [Reuses operator id: 79]
Output [2]: [d_date_sk#10, d_date#11]

(7) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(8) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(9) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(10) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]

(11) Filter [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(12) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(13) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join condition: None

(14) Project [codegen id : 3]
Output [3]: [d_date#11, i_item_sk#12, substr(i_item_desc#13, 1, 30) AS _groupingexpression#15]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#12, i_item_desc#13]

(15) HashAggregate [codegen id : 3]
Input [3]: [d_date#11, i_item_sk#12, _groupingexpression#15]
Keys [3]: [_groupingexpression#15, i_item_sk#12, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#16]
Results [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]

(16) Exchange
Input [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]
Arguments: hashpartitioning(_groupingexpression#15, i_item_sk#12, d_date#11, 5), ENSURE_REQUIREMENTS, [id=#18]

(17) HashAggregate [codegen id : 4]
Input [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]
Keys [3]: [_groupingexpression#15, i_item_sk#12, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#19]
Results [2]: [i_item_sk#12 AS item_sk#20, count(1)#19 AS cnt#21]

(18) Filter [codegen id : 4]
Input [2]: [item_sk#20, cnt#21]
Condition : (cnt#21 > 4)

(19) Project [codegen id : 4]
Output [1]: [item_sk#20]
Input [2]: [item_sk#20, cnt#21]

(20) HashAggregate [codegen id : 4]
Input [1]: [item_sk#20]
Keys [1]: [item_sk#20]
Functions: []
Aggregate Attributes: []
Results [1]: [item_sk#20]

(21) BroadcastExchange
Input [1]: [item_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#20]
Join condition: None

(23) Project [codegen id : 5]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(24) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(25) Sort [codegen id : 6]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(26) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 8]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(28) Filter [codegen id : 8]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(29) Project [codegen id : 8]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(30) Scan parquet default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(31) ColumnarToRow [codegen id : 7]
Input [1]: [c_customer_sk#28]

(32) Filter [codegen id : 7]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(33) BroadcastExchange
Input [1]: [c_customer_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]

(36) HashAggregate [codegen id : 8]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#30, isEmpty#31]
Results [3]: [c_customer_sk#28, sum#32, isEmpty#33]

(37) Exchange
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [id=#34]

(38) HashAggregate [codegen id : 9]
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(39) Filter [codegen id : 9]
Input [2]: [c_customer_sk#28, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(40) Project [codegen id : 9]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#36]

(41) HashAggregate [codegen id : 9]
Input [1]: [c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions: []
Aggregate Attributes: []
Results [1]: [c_customer_sk#28]

(42) Sort [codegen id : 9]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 11]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(44) Project [codegen id : 11]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(45) ReusedExchange [Reuses operator id: 74]
Output [1]: [d_date_sk#39]

(46) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#39]
Join condition: None

(47) Project [codegen id : 11]
Output [1]: [CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)) AS sales#40]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#39]

(48) Scan parquet default.web_sales
Output [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#45), dynamicpruningexpression(ws_sold_date_sk#45 IN dynamicpruning#6)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(49) ColumnarToRow [codegen id : 16]
Input [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]

(50) ReusedExchange [Reuses operator id: 21]
Output [1]: [item_sk#20]

(51) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#41]
Right keys [1]: [item_sk#20]
Join condition: None

(52) Project [codegen id : 16]
Output [4]: [ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Input [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]

(53) Exchange
Input [4]: [ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Arguments: hashpartitioning(ws_bill_customer_sk#42, 5), ENSURE_REQUIREMENTS, [id=#46]

(54) Sort [codegen id : 17]
Input [4]: [ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Arguments: [ws_bill_customer_sk#42 ASC NULLS FIRST], false, 0

(55) ReusedExchange [Reuses operator id: 37]
Output [3]: [c_customer_sk#28, sum#47, isEmpty#48]

(56) HashAggregate [codegen id : 20]
Input [3]: [c_customer_sk#28, sum#47, isEmpty#48]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(57) Filter [codegen id : 20]
Input [2]: [c_customer_sk#28, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(58) Project [codegen id : 20]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#36]

(59) HashAggregate [codegen id : 20]
Input [1]: [c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions: []
Aggregate Attributes: []
Results [1]: [c_customer_sk#28]

(60) Sort [codegen id : 20]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(61) SortMergeJoin [codegen id : 22]
Left keys [1]: [ws_bill_customer_sk#42]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(62) Project [codegen id : 22]
Output [3]: [ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Input [4]: [ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]

(63) ReusedExchange [Reuses operator id: 74]
Output [1]: [d_date_sk#49]

(64) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#45]
Right keys [1]: [d_date_sk#49]
Join condition: None

(65) Project [codegen id : 22]
Output [1]: [CheckOverflow((promote_precision(cast(ws_quantity#43 as decimal(12,2))) * promote_precision(cast(ws_list_price#44 as decimal(12,2)))), DecimalType(18,2)) AS sales#50]
Input [4]: [ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45, d_date_sk#49]

(66) Union

(67) HashAggregate [codegen id : 23]
Input [1]: [sales#40]
Keys: []
Functions [1]: [partial_sum(sales#40)]
Aggregate Attributes [2]: [sum#51, isEmpty#52]
Results [2]: [sum#53, isEmpty#54]

(68) Exchange
Input [2]: [sum#53, isEmpty#54]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#55]

(69) HashAggregate [codegen id : 24]
Input [2]: [sum#53, isEmpty#54]
Keys: []
Functions [1]: [sum(sales#40)]
Aggregate Attributes [1]: [sum(sales#40)#56]
Results [1]: [sum(sales#40)#56 AS sum(sales)#57]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (74)
+- * Project (73)
   +- * Filter (72)
      +- * ColumnarToRow (71)
         +- Scan parquet default.date_dim (70)


(70) Scan parquet default.date_dim
Output [3]: [d_date_sk#39, d_year#58, d_moy#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(71) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#58, d_moy#59]

(72) Filter [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#58, d_moy#59]
Condition : ((((isnotnull(d_year#58) AND isnotnull(d_moy#59)) AND (d_year#58 = 2000)) AND (d_moy#59 = 2)) AND isnotnull(d_date_sk#39))

(73) Project [codegen id : 1]
Output [1]: [d_date_sk#39]
Input [3]: [d_date_sk#39, d_year#58, d_moy#59]

(74) BroadcastExchange
Input [1]: [d_date_sk#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#60]

Subquery:2 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (79)
+- * Project (78)
   +- * Filter (77)
      +- * ColumnarToRow (76)
         +- Scan parquet default.date_dim (75)


(75) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(76) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#61]

(77) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#61]
Condition : (d_year#61 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(78) Project [codegen id : 1]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#61]

(79) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#62]

Subquery:3 Hosting operator id = 39 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (94)
+- Exchange (93)
   +- * HashAggregate (92)
      +- * HashAggregate (91)
         +- Exchange (90)
            +- * HashAggregate (89)
               +- * Project (88)
                  +- * BroadcastHashJoin Inner BuildRight (87)
                     :- * Project (85)
                     :  +- * BroadcastHashJoin Inner BuildRight (84)
                     :     :- * Filter (82)
                     :     :  +- * ColumnarToRow (81)
                     :     :     +- Scan parquet default.store_sales (80)
                     :     +- ReusedExchange (83)
                     +- ReusedExchange (86)


(80) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#63, ss_quantity#64, ss_sales_price#65, ss_sold_date_sk#66]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#66), dynamicpruningexpression(ss_sold_date_sk#66 IN dynamicpruning#67)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(81) ColumnarToRow [codegen id : 3]
Input [4]: [ss_customer_sk#63, ss_quantity#64, ss_sales_price#65, ss_sold_date_sk#66]

(82) Filter [codegen id : 3]
Input [4]: [ss_customer_sk#63, ss_quantity#64, ss_sales_price#65, ss_sold_date_sk#66]
Condition : isnotnull(ss_customer_sk#63)

(83) ReusedExchange [Reuses operator id: 33]
Output [1]: [c_customer_sk#68]

(84) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#63]
Right keys [1]: [c_customer_sk#68]
Join condition: None

(85) Project [codegen id : 3]
Output [4]: [ss_quantity#64, ss_sales_price#65, ss_sold_date_sk#66, c_customer_sk#68]
Input [5]: [ss_customer_sk#63, ss_quantity#64, ss_sales_price#65, ss_sold_date_sk#66, c_customer_sk#68]

(86) ReusedExchange [Reuses operator id: 99]
Output [1]: [d_date_sk#69]

(87) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#66]
Right keys [1]: [d_date_sk#69]
Join condition: None

(88) Project [codegen id : 3]
Output [3]: [ss_quantity#64, ss_sales_price#65, c_customer_sk#68]
Input [5]: [ss_quantity#64, ss_sales_price#65, ss_sold_date_sk#66, c_customer_sk#68, d_date_sk#69]

(89) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#64, ss_sales_price#65, c_customer_sk#68]
Keys [1]: [c_customer_sk#68]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#64 as decimal(12,2))) * promote_precision(cast(ss_sales_price#65 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#70, isEmpty#71]
Results [3]: [c_customer_sk#68, sum#72, isEmpty#73]

(90) Exchange
Input [3]: [c_customer_sk#68, sum#72, isEmpty#73]
Arguments: hashpartitioning(c_customer_sk#68, 5), ENSURE_REQUIREMENTS, [id=#74]

(91) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#68, sum#72, isEmpty#73]
Keys [1]: [c_customer_sk#68]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#64 as decimal(12,2))) * promote_precision(cast(ss_sales_price#65 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#64 as decimal(12,2))) * promote_precision(cast(ss_sales_price#65 as decimal(12,2)))), DecimalType(18,2)))#75]
Results [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#64 as decimal(12,2))) * promote_precision(cast(ss_sales_price#65 as decimal(12,2)))), DecimalType(18,2)))#75 AS csales#76]

(92) HashAggregate [codegen id : 4]
Input [1]: [csales#76]
Keys: []
Functions [1]: [partial_max(csales#76)]
Aggregate Attributes [1]: [max#77]
Results [1]: [max#78]

(93) Exchange
Input [1]: [max#78]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#79]

(94) HashAggregate [codegen id : 5]
Input [1]: [max#78]
Keys: []
Functions [1]: [max(csales#76)]
Aggregate Attributes [1]: [max(csales#76)#80]
Results [1]: [max(csales#76)#80 AS tpcds_cmax#81]

Subquery:4 Hosting operator id = 80 Hosting Expression = ss_sold_date_sk#66 IN dynamicpruning#67
BroadcastExchange (99)
+- * Project (98)
   +- * Filter (97)
      +- * ColumnarToRow (96)
         +- Scan parquet default.date_dim (95)


(95) Scan parquet default.date_dim
Output [2]: [d_date_sk#69, d_year#82]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(96) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#69, d_year#82]

(97) Filter [codegen id : 1]
Input [2]: [d_date_sk#69, d_year#82]
Condition : (d_year#82 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#69))

(98) Project [codegen id : 1]
Output [1]: [d_date_sk#69]
Input [2]: [d_date_sk#69, d_year#82]

(99) BroadcastExchange
Input [1]: [d_date_sk#69]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#83]

Subquery:5 Hosting operator id = 48 Hosting Expression = ws_sold_date_sk#45 IN dynamicpruning#6

Subquery:6 Hosting operator id = 57 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


