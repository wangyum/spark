== Physical Plan ==
CollectLimit (35)
+- * Project (34)
   +- * BroadcastHashJoin Inner BuildRight (33)
      :- * Project (31)
      :  +- * BroadcastHashJoin Inner BuildLeft (30)
      :     :- BroadcastExchange (11)
      :     :  +- * Project (10)
      :     :     +- * BroadcastHashJoin Inner BuildRight (9)
      :     :        :- * Filter (3)
      :     :        :  +- * ColumnarToRow (2)
      :     :        :     +- Scan parquet default.catalog_sales (1)
      :     :        +- BroadcastExchange (8)
      :     :           +- * Project (7)
      :     :              +- * Filter (6)
      :     :                 +- * ColumnarToRow (5)
      :     :                    +- Scan parquet default.item (4)
      :     +- * Filter (29)
      :        +- * HashAggregate (28)
      :           +- Exchange (27)
      :              +- * HashAggregate (26)
      :                 +- * Project (25)
      :                    +- * SortMergeJoin Inner (24)
      :                       :- * Sort (17)
      :                       :  +- Exchange (16)
      :                       :     +- * HashAggregate (15)
      :                       :        +- * Filter (14)
      :                       :           +- * ColumnarToRow (13)
      :                       :              +- Scan parquet default.catalog_sales (12)
      :                       +- * Sort (23)
      :                          +- Exchange (22)
      :                             +- * HashAggregate (21)
      :                                +- * Filter (20)
      :                                   +- * ColumnarToRow (19)
      :                                      +- Scan parquet default.date_dim (18)
      +- ReusedExchange (32)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_ext_discount_amt)]
ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Condition : (isnotnull(cs_item_sk#1) AND isnotnull(cs_ext_discount_amt#2))

(4) Scan parquet default.item
Output [2]: [i_item_sk#5, i_manufact_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,977), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_manufact_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#5, i_manufact_id#6]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#5, i_manufact_id#6]
Condition : ((isnotnull(i_manufact_id#6) AND (i_manufact_id#6 = 977)) AND isnotnull(i_item_sk#5))

(7) Project [codegen id : 1]
Output [1]: [i_item_sk#5]
Input [2]: [i_item_sk#5, i_manufact_id#6]

(8) BroadcastExchange
Input [1]: [i_item_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cs_item_sk#1]
Right keys [1]: [i_item_sk#5]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#5]
Input [4]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#5]

(11) BroadcastExchange
Input [3]: [cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#8]

(12) Scan parquet default.catalog_sales
Output [34]: [cs_sold_time_sk#9, cs_ship_date_sk#10, cs_bill_customer_sk#11, cs_bill_cdemo_sk#12, cs_bill_hdemo_sk#13, cs_bill_addr_sk#14, cs_ship_customer_sk#15, cs_ship_cdemo_sk#16, cs_ship_hdemo_sk#17, cs_ship_addr_sk#18, cs_call_center_sk#19, cs_catalog_page_sk#20, cs_ship_mode_sk#21, cs_warehouse_sk#22, cs_item_sk#23, cs_promo_sk#24, cs_order_number#25, cs_quantity#26, cs_wholesale_cost#27, cs_list_price#28, cs_sales_price#29, cs_ext_discount_amt#30, cs_ext_sales_price#31, cs_ext_wholesale_cost#32, cs_ext_list_price#33, cs_ext_tax#34, cs_coupon_amt#35, cs_ext_ship_cost#36, cs_net_paid#37, cs_net_paid_inc_tax#38, cs_net_paid_inc_ship#39, cs_net_paid_inc_ship_tax#40, cs_net_profit#41, cs_sold_date_sk#42]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#42), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_time_sk:int,cs_ship_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_bill_addr_sk:int,cs_ship_customer_sk:int,cs_ship_cdemo_sk:int,cs_ship_hdemo_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_catalog_page_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2),cs_ext_tax:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_ext_ship_cost:decimal(7,2),cs_net_paid:decimal(7,2),cs_net_paid_inc_tax:decimal(7,2),cs_net_paid_inc_ship:decimal(7,2),cs_net_paid_inc_ship_tax:decimal(7,2),cs_net_profit:decimal(7,2)>

(13) ColumnarToRow [codegen id : 3]
Input [34]: [cs_sold_time_sk#9, cs_ship_date_sk#10, cs_bill_customer_sk#11, cs_bill_cdemo_sk#12, cs_bill_hdemo_sk#13, cs_bill_addr_sk#14, cs_ship_customer_sk#15, cs_ship_cdemo_sk#16, cs_ship_hdemo_sk#17, cs_ship_addr_sk#18, cs_call_center_sk#19, cs_catalog_page_sk#20, cs_ship_mode_sk#21, cs_warehouse_sk#22, cs_item_sk#23, cs_promo_sk#24, cs_order_number#25, cs_quantity#26, cs_wholesale_cost#27, cs_list_price#28, cs_sales_price#29, cs_ext_discount_amt#30, cs_ext_sales_price#31, cs_ext_wholesale_cost#32, cs_ext_list_price#33, cs_ext_tax#34, cs_coupon_amt#35, cs_ext_ship_cost#36, cs_net_paid#37, cs_net_paid_inc_tax#38, cs_net_paid_inc_ship#39, cs_net_paid_inc_ship_tax#40, cs_net_profit#41, cs_sold_date_sk#42]

(14) Filter [codegen id : 3]
Input [34]: [cs_sold_time_sk#9, cs_ship_date_sk#10, cs_bill_customer_sk#11, cs_bill_cdemo_sk#12, cs_bill_hdemo_sk#13, cs_bill_addr_sk#14, cs_ship_customer_sk#15, cs_ship_cdemo_sk#16, cs_ship_hdemo_sk#17, cs_ship_addr_sk#18, cs_call_center_sk#19, cs_catalog_page_sk#20, cs_ship_mode_sk#21, cs_warehouse_sk#22, cs_item_sk#23, cs_promo_sk#24, cs_order_number#25, cs_quantity#26, cs_wholesale_cost#27, cs_list_price#28, cs_sales_price#29, cs_ext_discount_amt#30, cs_ext_sales_price#31, cs_ext_wholesale_cost#32, cs_ext_list_price#33, cs_ext_tax#34, cs_coupon_amt#35, cs_ext_ship_cost#36, cs_net_paid#37, cs_net_paid_inc_tax#38, cs_net_paid_inc_ship#39, cs_net_paid_inc_ship_tax#40, cs_net_profit#41, cs_sold_date_sk#42]
Condition : isnotnull(cs_item_sk#23)

(15) HashAggregate [codegen id : 3]
Input [34]: [cs_sold_time_sk#9, cs_ship_date_sk#10, cs_bill_customer_sk#11, cs_bill_cdemo_sk#12, cs_bill_hdemo_sk#13, cs_bill_addr_sk#14, cs_ship_customer_sk#15, cs_ship_cdemo_sk#16, cs_ship_hdemo_sk#17, cs_ship_addr_sk#18, cs_call_center_sk#19, cs_catalog_page_sk#20, cs_ship_mode_sk#21, cs_warehouse_sk#22, cs_item_sk#23, cs_promo_sk#24, cs_order_number#25, cs_quantity#26, cs_wholesale_cost#27, cs_list_price#28, cs_sales_price#29, cs_ext_discount_amt#30, cs_ext_sales_price#31, cs_ext_wholesale_cost#32, cs_ext_list_price#33, cs_ext_tax#34, cs_coupon_amt#35, cs_ext_ship_cost#36, cs_net_paid#37, cs_net_paid_inc_tax#38, cs_net_paid_inc_ship#39, cs_net_paid_inc_ship_tax#40, cs_net_profit#41, cs_sold_date_sk#42]
Keys [2]: [cs_sold_date_sk#42, cs_item_sk#23]
Functions: []
Aggregate Attributes: []
Results [2]: [cs_sold_date_sk#42, cs_item_sk#23]

(16) Exchange
Input [2]: [cs_sold_date_sk#42, cs_item_sk#23]
Arguments: hashpartitioning(cs_sold_date_sk#42, 5), ENSURE_REQUIREMENTS, [id=#43]

(17) Sort [codegen id : 4]
Input [2]: [cs_sold_date_sk#42, cs_item_sk#23]
Arguments: [cs_sold_date_sk#42 ASC NULLS FIRST], false, 0

(18) Scan parquet default.date_dim
Output [28]: [d_date_sk#44, d_date_id#45, d_date#46, d_month_seq#47, d_week_seq#48, d_quarter_seq#49, d_year#50, d_dow#51, d_moy#52, d_dom#53, d_qoy#54, d_fy_year#55, d_fy_quarter_seq#56, d_fy_week_seq#57, d_day_name#58, d_quarter_name#59, d_holiday#60, d_weekend#61, d_following_holiday#62, d_first_dom#63, d_last_dom#64, d_same_day_ly#65, d_same_day_lq#66, d_current_day#67, d_current_week#68, d_current_month#69, d_current_quarter#70, d_current_year#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(19) ColumnarToRow [codegen id : 5]
Input [28]: [d_date_sk#44, d_date_id#45, d_date#46, d_month_seq#47, d_week_seq#48, d_quarter_seq#49, d_year#50, d_dow#51, d_moy#52, d_dom#53, d_qoy#54, d_fy_year#55, d_fy_quarter_seq#56, d_fy_week_seq#57, d_day_name#58, d_quarter_name#59, d_holiday#60, d_weekend#61, d_following_holiday#62, d_first_dom#63, d_last_dom#64, d_same_day_ly#65, d_same_day_lq#66, d_current_day#67, d_current_week#68, d_current_month#69, d_current_quarter#70, d_current_year#71]

(20) Filter [codegen id : 5]
Input [28]: [d_date_sk#44, d_date_id#45, d_date#46, d_month_seq#47, d_week_seq#48, d_quarter_seq#49, d_year#50, d_dow#51, d_moy#52, d_dom#53, d_qoy#54, d_fy_year#55, d_fy_quarter_seq#56, d_fy_week_seq#57, d_day_name#58, d_quarter_name#59, d_holiday#60, d_weekend#61, d_following_holiday#62, d_first_dom#63, d_last_dom#64, d_same_day_ly#65, d_same_day_lq#66, d_current_day#67, d_current_week#68, d_current_month#69, d_current_quarter#70, d_current_year#71]
Condition : (((isnotnull(d_date#46) AND (d_date#46 >= 2000-01-27)) AND (d_date#46 <= 2000-04-26)) AND isnotnull(d_date_sk#44))

(21) HashAggregate [codegen id : 5]
Input [28]: [d_date_sk#44, d_date_id#45, d_date#46, d_month_seq#47, d_week_seq#48, d_quarter_seq#49, d_year#50, d_dow#51, d_moy#52, d_dom#53, d_qoy#54, d_fy_year#55, d_fy_quarter_seq#56, d_fy_week_seq#57, d_day_name#58, d_quarter_name#59, d_holiday#60, d_weekend#61, d_following_holiday#62, d_first_dom#63, d_last_dom#64, d_same_day_ly#65, d_same_day_lq#66, d_current_day#67, d_current_week#68, d_current_month#69, d_current_quarter#70, d_current_year#71]
Keys [1]: [d_date_sk#44]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#44]

(22) Exchange
Input [1]: [d_date_sk#44]
Arguments: hashpartitioning(d_date_sk#44, 5), ENSURE_REQUIREMENTS, [id=#72]

(23) Sort [codegen id : 6]
Input [1]: [d_date_sk#44]
Arguments: [d_date_sk#44 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#42]
Right keys [1]: [d_date_sk#44]
Join condition: None

(25) Project [codegen id : 7]
Output [1]: [cs_item_sk#23]
Input [3]: [cs_sold_date_sk#42, cs_item_sk#23, d_date_sk#44]

(26) HashAggregate [codegen id : 7]
Input [1]: [cs_item_sk#23]
Keys [1]: [cs_item_sk#23]
Functions [1]: [partial_avg(UnscaledValue(cs_ext_discount_amt#30))]
Aggregate Attributes [2]: [sum#73, count#74]
Results [3]: [cs_item_sk#23, sum#75, count#76]

(27) Exchange
Input [3]: [cs_item_sk#23, sum#75, count#76]
Arguments: hashpartitioning(cs_item_sk#23, 5), ENSURE_REQUIREMENTS, [id=#77]

(28) HashAggregate
Input [3]: [cs_item_sk#23, sum#75, count#76]
Keys [1]: [cs_item_sk#23]
Functions [1]: [avg(UnscaledValue(cs_ext_discount_amt#30))]
Aggregate Attributes [1]: [avg(UnscaledValue(cs_ext_discount_amt#30))#78]
Results [2]: [CheckOverflow((1.300000 * promote_precision(cast((avg(UnscaledValue(cs_ext_discount_amt#30))#78 / 100.0) as decimal(11,6)))), DecimalType(14,7)) AS (1.3 * avg(cs_ext_discount_amt))#79, cs_item_sk#23]

(29) Filter
Input [2]: [(1.3 * avg(cs_ext_discount_amt))#79, cs_item_sk#23]
Condition : isnotnull((1.3 * avg(cs_ext_discount_amt))#79)

(30) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [cs_item_sk#23]
Join condition: (cast(cs_ext_discount_amt#2 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#79)

(31) Project [codegen id : 9]
Output [1]: [cs_sold_date_sk#3]
Input [5]: [cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#5, (1.3 * avg(cs_ext_discount_amt))#79, cs_item_sk#23]

(32) ReusedExchange [Reuses operator id: 40]
Output [1]: [d_date_sk#80]

(33) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#80]
Join condition: None

(34) Project [codegen id : 9]
Output [1]: [1 AS excess discount amount #81]
Input [2]: [cs_sold_date_sk#3, d_date_sk#80]

(35) CollectLimit
Input [1]: [excess discount amount #81]
Arguments: 100

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (40)
+- * Project (39)
   +- * Filter (38)
      +- * ColumnarToRow (37)
         +- Scan parquet default.date_dim (36)


(36) Scan parquet default.date_dim
Output [2]: [d_date_sk#80, d_date#82]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(37) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#80, d_date#82]

(38) Filter [codegen id : 1]
Input [2]: [d_date_sk#80, d_date#82]
Condition : (((isnotnull(d_date#82) AND (d_date#82 >= 2000-01-27)) AND (d_date#82 <= 2000-04-26)) AND isnotnull(d_date_sk#80))

(39) Project [codegen id : 1]
Output [1]: [d_date_sk#80]
Input [2]: [d_date_sk#80, d_date#82]

(40) BroadcastExchange
Input [1]: [d_date_sk#80]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#83]


