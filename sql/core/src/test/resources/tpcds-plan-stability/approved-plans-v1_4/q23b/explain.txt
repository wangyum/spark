== Physical Plan ==
TakeOrderedAndProject (91)
+- Union (90)
   :- * HashAggregate (65)
   :  +- Exchange (64)
   :     +- * HashAggregate (63)
   :        +- * Project (62)
   :           +- * BroadcastHashJoin Inner BuildRight (61)
   :              :- * Project (59)
   :              :  +- * BroadcastHashJoin Inner BuildRight (58)
   :              :     :- * SortMergeJoin LeftSemi (44)
   :              :     :  :- * Sort (26)
   :              :     :  :  +- Exchange (25)
   :              :     :  :     +- * Project (24)
   :              :     :  :        +- * BroadcastHashJoin LeftSemi BuildRight (23)
   :              :     :  :           :- * Filter (3)
   :              :     :  :           :  +- * ColumnarToRow (2)
   :              :     :  :           :     +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- BroadcastExchange (22)
   :              :     :  :              +- * HashAggregate (21)
   :              :     :  :                 +- * Project (20)
   :              :     :  :                    +- * Filter (19)
   :              :     :  :                       +- * HashAggregate (18)
   :              :     :  :                          +- Exchange (17)
   :              :     :  :                             +- * HashAggregate (16)
   :              :     :  :                                +- * Project (15)
   :              :     :  :                                   +- * BroadcastHashJoin Inner BuildRight (14)
   :              :     :  :                                      :- * Project (9)
   :              :     :  :                                      :  +- * BroadcastHashJoin Inner BuildRight (8)
   :              :     :  :                                      :     :- * Filter (6)
   :              :     :  :                                      :     :  +- * ColumnarToRow (5)
   :              :     :  :                                      :     :     +- Scan parquet default.store_sales (4)
   :              :     :  :                                      :     +- ReusedExchange (7)
   :              :     :  :                                      +- BroadcastExchange (13)
   :              :     :  :                                         +- * Filter (12)
   :              :     :  :                                            +- * ColumnarToRow (11)
   :              :     :  :                                               +- Scan parquet default.item (10)
   :              :     :  +- * Sort (43)
   :              :     :     +- * HashAggregate (42)
   :              :     :        +- * Project (41)
   :              :     :           +- * Filter (40)
   :              :     :              +- * HashAggregate (39)
   :              :     :                 +- Exchange (38)
   :              :     :                    +- * HashAggregate (37)
   :              :     :                       +- * Project (36)
   :              :     :                          +- * BroadcastHashJoin Inner BuildRight (35)
   :              :     :                             :- * Project (30)
   :              :     :                             :  +- * Filter (29)
   :              :     :                             :     +- * ColumnarToRow (28)
   :              :     :                             :        +- Scan parquet default.store_sales (27)
   :              :     :                             +- BroadcastExchange (34)
   :              :     :                                +- * Filter (33)
   :              :     :                                   +- * ColumnarToRow (32)
   :              :     :                                      +- Scan parquet default.customer (31)
   :              :     +- BroadcastExchange (57)
   :              :        +- * SortMergeJoin LeftSemi (56)
   :              :           :- * Sort (49)
   :              :           :  +- Exchange (48)
   :              :           :     +- * Filter (47)
   :              :           :        +- * ColumnarToRow (46)
   :              :           :           +- Scan parquet default.customer (45)
   :              :           +- * Sort (55)
   :              :              +- * HashAggregate (54)
   :              :                 +- * Project (53)
   :              :                    +- * Filter (52)
   :              :                       +- * HashAggregate (51)
   :              :                          +- ReusedExchange (50)
   :              +- ReusedExchange (60)
   +- * HashAggregate (89)
      +- Exchange (88)
         +- * HashAggregate (87)
            +- * Project (86)
               +- * BroadcastHashJoin Inner BuildRight (85)
                  :- * Project (83)
                  :  +- * BroadcastHashJoin Inner BuildRight (82)
                  :     :- * SortMergeJoin LeftSemi (80)
                  :     :  :- * Sort (73)
                  :     :  :  +- Exchange (72)
                  :     :  :     +- * Project (71)
                  :     :  :        +- * BroadcastHashJoin LeftSemi BuildRight (70)
                  :     :  :           :- * Filter (68)
                  :     :  :           :  +- * ColumnarToRow (67)
                  :     :  :           :     +- Scan parquet default.web_sales (66)
                  :     :  :           +- ReusedExchange (69)
                  :     :  +- * Sort (79)
                  :     :     +- * HashAggregate (78)
                  :     :        +- * Project (77)
                  :     :           +- * Filter (76)
                  :     :              +- * HashAggregate (75)
                  :     :                 +- ReusedExchange (74)
                  :     +- ReusedExchange (81)
                  +- ReusedExchange (84)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Scan parquet default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(5) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(6) Filter [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(7) ReusedExchange [Reuses operator id: 101]
Output [2]: [d_date_sk#10, d_date#11]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(9) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(10) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]

(12) Filter [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(13) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join condition: None

(15) Project [codegen id : 3]
Output [3]: [d_date#11, i_item_sk#12, substr(i_item_desc#13, 1, 30) AS _groupingexpression#15]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#12, i_item_desc#13]

(16) HashAggregate [codegen id : 3]
Input [3]: [d_date#11, i_item_sk#12, _groupingexpression#15]
Keys [3]: [_groupingexpression#15, i_item_sk#12, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#16]
Results [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]

(17) Exchange
Input [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]
Arguments: hashpartitioning(_groupingexpression#15, i_item_sk#12, d_date#11, 5), ENSURE_REQUIREMENTS, [id=#18]

(18) HashAggregate [codegen id : 4]
Input [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]
Keys [3]: [_groupingexpression#15, i_item_sk#12, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#19]
Results [2]: [i_item_sk#12 AS item_sk#20, count(1)#19 AS cnt#21]

(19) Filter [codegen id : 4]
Input [2]: [item_sk#20, cnt#21]
Condition : (cnt#21 > 4)

(20) Project [codegen id : 4]
Output [1]: [item_sk#20]
Input [2]: [item_sk#20, cnt#21]

(21) HashAggregate [codegen id : 4]
Input [1]: [item_sk#20]
Keys [1]: [item_sk#20]
Functions: []
Aggregate Attributes: []
Results [1]: [item_sk#20]

(22) BroadcastExchange
Input [1]: [item_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#20]
Join condition: None

(24) Project [codegen id : 5]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(25) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(26) Sort [codegen id : 6]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(27) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(28) ColumnarToRow [codegen id : 8]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(29) Filter [codegen id : 8]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(30) Project [codegen id : 8]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(31) Scan parquet default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(32) ColumnarToRow [codegen id : 7]
Input [1]: [c_customer_sk#28]

(33) Filter [codegen id : 7]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(34) BroadcastExchange
Input [1]: [c_customer_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(36) Project [codegen id : 8]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]

(37) HashAggregate [codegen id : 8]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#30, isEmpty#31]
Results [3]: [c_customer_sk#28, sum#32, isEmpty#33]

(38) Exchange
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [id=#34]

(39) HashAggregate [codegen id : 9]
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(40) Filter [codegen id : 9]
Input [2]: [c_customer_sk#28, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(41) Project [codegen id : 9]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#36]

(42) HashAggregate [codegen id : 9]
Input [1]: [c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions: []
Aggregate Attributes: []
Results [1]: [c_customer_sk#28]

(43) Sort [codegen id : 9]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(45) Scan parquet default.customer
Output [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(46) ColumnarToRow [codegen id : 10]
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]

(47) Filter [codegen id : 10]
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Condition : isnotnull(c_customer_sk#39)

(48) Exchange
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Arguments: hashpartitioning(c_customer_sk#39, 5), ENSURE_REQUIREMENTS, [id=#42]

(49) Sort [codegen id : 11]
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Arguments: [c_customer_sk#39 ASC NULLS FIRST], false, 0

(50) ReusedExchange [Reuses operator id: 38]
Output [3]: [c_customer_sk#28, sum#32, isEmpty#33]

(51) HashAggregate [codegen id : 14]
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(52) Filter [codegen id : 14]
Input [2]: [c_customer_sk#28, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(53) Project [codegen id : 14]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#36]

(54) HashAggregate [codegen id : 14]
Input [1]: [c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions: []
Aggregate Attributes: []
Results [1]: [c_customer_sk#28]

(55) Sort [codegen id : 14]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 15]
Left keys [1]: [c_customer_sk#39]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(57) BroadcastExchange
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#43]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#39]
Join condition: None

(59) Project [codegen id : 17]
Output [5]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#40, c_last_name#41]
Input [7]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_customer_sk#39, c_first_name#40, c_last_name#41]

(60) ReusedExchange [Reuses operator id: 96]
Output [1]: [d_date_sk#44]

(61) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#44]
Join condition: None

(62) Project [codegen id : 17]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#40, c_last_name#41]
Input [6]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#40, c_last_name#41, d_date_sk#44]

(63) HashAggregate [codegen id : 17]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#40, c_last_name#41]
Keys [2]: [c_last_name#41, c_first_name#40]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#45, isEmpty#46]
Results [4]: [c_last_name#41, c_first_name#40, sum#47, isEmpty#48]

(64) Exchange
Input [4]: [c_last_name#41, c_first_name#40, sum#47, isEmpty#48]
Arguments: hashpartitioning(c_last_name#41, c_first_name#40, 5), ENSURE_REQUIREMENTS, [id=#49]

(65) HashAggregate [codegen id : 18]
Input [4]: [c_last_name#41, c_first_name#40, sum#47, isEmpty#48]
Keys [2]: [c_last_name#41, c_first_name#40]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))#50]
Results [3]: [c_last_name#41, c_first_name#40, sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))#50 AS sales#51]

(66) Scan parquet default.web_sales
Output [5]: [ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#56), dynamicpruningexpression(ws_sold_date_sk#56 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(67) ColumnarToRow [codegen id : 23]
Input [5]: [ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]

(68) Filter [codegen id : 23]
Input [5]: [ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]
Condition : isnotnull(ws_bill_customer_sk#53)

(69) ReusedExchange [Reuses operator id: 22]
Output [1]: [item_sk#20]

(70) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ws_item_sk#52]
Right keys [1]: [item_sk#20]
Join condition: None

(71) Project [codegen id : 23]
Output [4]: [ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]
Input [5]: [ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]

(72) Exchange
Input [4]: [ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]
Arguments: hashpartitioning(ws_bill_customer_sk#53, 5), ENSURE_REQUIREMENTS, [id=#57]

(73) Sort [codegen id : 24]
Input [4]: [ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]
Arguments: [ws_bill_customer_sk#53 ASC NULLS FIRST], false, 0

(74) ReusedExchange [Reuses operator id: 38]
Output [3]: [c_customer_sk#28, sum#58, isEmpty#59]

(75) HashAggregate [codegen id : 27]
Input [3]: [c_customer_sk#28, sum#58, isEmpty#59]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(76) Filter [codegen id : 27]
Input [2]: [c_customer_sk#28, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(77) Project [codegen id : 27]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#36]

(78) HashAggregate [codegen id : 27]
Input [1]: [c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions: []
Aggregate Attributes: []
Results [1]: [c_customer_sk#28]

(79) Sort [codegen id : 27]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(80) SortMergeJoin [codegen id : 35]
Left keys [1]: [ws_bill_customer_sk#53]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(81) ReusedExchange [Reuses operator id: 57]
Output [3]: [c_customer_sk#60, c_first_name#61, c_last_name#62]

(82) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_bill_customer_sk#53]
Right keys [1]: [c_customer_sk#60]
Join condition: None

(83) Project [codegen id : 35]
Output [5]: [ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56, c_first_name#61, c_last_name#62]
Input [7]: [ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56, c_customer_sk#60, c_first_name#61, c_last_name#62]

(84) ReusedExchange [Reuses operator id: 96]
Output [1]: [d_date_sk#63]

(85) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_sold_date_sk#56]
Right keys [1]: [d_date_sk#63]
Join condition: None

(86) Project [codegen id : 35]
Output [4]: [ws_quantity#54, ws_list_price#55, c_first_name#61, c_last_name#62]
Input [6]: [ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56, c_first_name#61, c_last_name#62, d_date_sk#63]

(87) HashAggregate [codegen id : 35]
Input [4]: [ws_quantity#54, ws_list_price#55, c_first_name#61, c_last_name#62]
Keys [2]: [c_last_name#62, c_first_name#61]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ws_quantity#54 as decimal(12,2))) * promote_precision(cast(ws_list_price#55 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#64, isEmpty#65]
Results [4]: [c_last_name#62, c_first_name#61, sum#66, isEmpty#67]

(88) Exchange
Input [4]: [c_last_name#62, c_first_name#61, sum#66, isEmpty#67]
Arguments: hashpartitioning(c_last_name#62, c_first_name#61, 5), ENSURE_REQUIREMENTS, [id=#68]

(89) HashAggregate [codegen id : 36]
Input [4]: [c_last_name#62, c_first_name#61, sum#66, isEmpty#67]
Keys [2]: [c_last_name#62, c_first_name#61]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#54 as decimal(12,2))) * promote_precision(cast(ws_list_price#55 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#54 as decimal(12,2))) * promote_precision(cast(ws_list_price#55 as decimal(12,2)))), DecimalType(18,2)))#69]
Results [3]: [c_last_name#62, c_first_name#61, sum(CheckOverflow((promote_precision(cast(ws_quantity#54 as decimal(12,2))) * promote_precision(cast(ws_list_price#55 as decimal(12,2)))), DecimalType(18,2)))#69 AS sales#70]

(90) Union

(91) TakeOrderedAndProject
Input [3]: [c_last_name#41, c_first_name#40, sales#51]
Arguments: 100, [c_last_name#41 ASC NULLS FIRST, c_first_name#40 ASC NULLS FIRST, sales#51 ASC NULLS FIRST], [c_last_name#41, c_first_name#40, sales#51]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (96)
+- * Project (95)
   +- * Filter (94)
      +- * ColumnarToRow (93)
         +- Scan parquet default.date_dim (92)


(92) Scan parquet default.date_dim
Output [3]: [d_date_sk#44, d_year#71, d_moy#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(93) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#44, d_year#71, d_moy#72]

(94) Filter [codegen id : 1]
Input [3]: [d_date_sk#44, d_year#71, d_moy#72]
Condition : ((((isnotnull(d_year#71) AND isnotnull(d_moy#72)) AND (d_year#71 = 2000)) AND (d_moy#72 = 2)) AND isnotnull(d_date_sk#44))

(95) Project [codegen id : 1]
Output [1]: [d_date_sk#44]
Input [3]: [d_date_sk#44, d_year#71, d_moy#72]

(96) BroadcastExchange
Input [1]: [d_date_sk#44]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#73]

Subquery:2 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (101)
+- * Project (100)
   +- * Filter (99)
      +- * ColumnarToRow (98)
         +- Scan parquet default.date_dim (97)


(97) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(98) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#74]

(99) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#74]
Condition : (d_year#74 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(100) Project [codegen id : 1]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#74]

(101) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#75]

Subquery:3 Hosting operator id = 40 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (116)
+- Exchange (115)
   +- * HashAggregate (114)
      +- * HashAggregate (113)
         +- Exchange (112)
            +- * HashAggregate (111)
               +- * Project (110)
                  +- * BroadcastHashJoin Inner BuildRight (109)
                     :- * Project (107)
                     :  +- * BroadcastHashJoin Inner BuildRight (106)
                     :     :- * Filter (104)
                     :     :  +- * ColumnarToRow (103)
                     :     :     +- Scan parquet default.store_sales (102)
                     :     +- ReusedExchange (105)
                     +- ReusedExchange (108)


(102) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#76, ss_quantity#77, ss_sales_price#78, ss_sold_date_sk#79]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#79), dynamicpruningexpression(ss_sold_date_sk#79 IN dynamicpruning#80)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(103) ColumnarToRow [codegen id : 3]
Input [4]: [ss_customer_sk#76, ss_quantity#77, ss_sales_price#78, ss_sold_date_sk#79]

(104) Filter [codegen id : 3]
Input [4]: [ss_customer_sk#76, ss_quantity#77, ss_sales_price#78, ss_sold_date_sk#79]
Condition : isnotnull(ss_customer_sk#76)

(105) ReusedExchange [Reuses operator id: 34]
Output [1]: [c_customer_sk#81]

(106) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#76]
Right keys [1]: [c_customer_sk#81]
Join condition: None

(107) Project [codegen id : 3]
Output [4]: [ss_quantity#77, ss_sales_price#78, ss_sold_date_sk#79, c_customer_sk#81]
Input [5]: [ss_customer_sk#76, ss_quantity#77, ss_sales_price#78, ss_sold_date_sk#79, c_customer_sk#81]

(108) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#82]

(109) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#79]
Right keys [1]: [d_date_sk#82]
Join condition: None

(110) Project [codegen id : 3]
Output [3]: [ss_quantity#77, ss_sales_price#78, c_customer_sk#81]
Input [5]: [ss_quantity#77, ss_sales_price#78, ss_sold_date_sk#79, c_customer_sk#81, d_date_sk#82]

(111) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#77, ss_sales_price#78, c_customer_sk#81]
Keys [1]: [c_customer_sk#81]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#77 as decimal(12,2))) * promote_precision(cast(ss_sales_price#78 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#83, isEmpty#84]
Results [3]: [c_customer_sk#81, sum#85, isEmpty#86]

(112) Exchange
Input [3]: [c_customer_sk#81, sum#85, isEmpty#86]
Arguments: hashpartitioning(c_customer_sk#81, 5), ENSURE_REQUIREMENTS, [id=#87]

(113) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#81, sum#85, isEmpty#86]
Keys [1]: [c_customer_sk#81]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#77 as decimal(12,2))) * promote_precision(cast(ss_sales_price#78 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#77 as decimal(12,2))) * promote_precision(cast(ss_sales_price#78 as decimal(12,2)))), DecimalType(18,2)))#88]
Results [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#77 as decimal(12,2))) * promote_precision(cast(ss_sales_price#78 as decimal(12,2)))), DecimalType(18,2)))#88 AS csales#89]

(114) HashAggregate [codegen id : 4]
Input [1]: [csales#89]
Keys: []
Functions [1]: [partial_max(csales#89)]
Aggregate Attributes [1]: [max#90]
Results [1]: [max#91]

(115) Exchange
Input [1]: [max#91]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#92]

(116) HashAggregate [codegen id : 5]
Input [1]: [max#91]
Keys: []
Functions [1]: [max(csales#89)]
Aggregate Attributes [1]: [max(csales#89)#93]
Results [1]: [max(csales#89)#93 AS tpcds_cmax#94]

Subquery:4 Hosting operator id = 102 Hosting Expression = ss_sold_date_sk#79 IN dynamicpruning#80
BroadcastExchange (121)
+- * Project (120)
   +- * Filter (119)
      +- * ColumnarToRow (118)
         +- Scan parquet default.date_dim (117)


(117) Scan parquet default.date_dim
Output [2]: [d_date_sk#82, d_year#95]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(118) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#82, d_year#95]

(119) Filter [codegen id : 1]
Input [2]: [d_date_sk#82, d_year#95]
Condition : (d_year#95 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#82))

(120) Project [codegen id : 1]
Output [1]: [d_date_sk#82]
Input [2]: [d_date_sk#82, d_year#95]

(121) BroadcastExchange
Input [1]: [d_date_sk#82]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#96]

Subquery:5 Hosting operator id = 52 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]

Subquery:6 Hosting operator id = 66 Hosting Expression = ws_sold_date_sk#56 IN dynamicpruning#6

Subquery:7 Hosting operator id = 76 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


