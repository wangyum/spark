== Physical Plan ==
* Project (59)
+- * BroadcastNestedLoopJoin Inner BuildRight (58)
   :- * HashAggregate (37)
   :  +- Exchange (36)
   :     +- * HashAggregate (35)
   :        +- * Project (34)
   :           +- * BroadcastHashJoin Inner BuildRight (33)
   :              :- * Project (27)
   :              :  +- HashAggregate (26)
   :              :     +- BroadcastHashJoin Inner BuildRight (25)
   :              :        :- BroadcastHashJoin Inner BuildRight (20)
   :              :        :  :- * BroadcastHashJoin Inner BuildRight (15)
   :              :        :  :  :- * BroadcastHashJoin Inner BuildRight (13)
   :              :        :  :  :  :- * BroadcastHashJoin Inner BuildRight (8)
   :              :        :  :  :  :  :- * Filter (3)
   :              :        :  :  :  :  :  +- * ColumnarToRow (2)
   :              :        :  :  :  :  :     +- Scan parquet default.store_sales (1)
   :              :        :  :  :  :  +- BroadcastExchange (7)
   :              :        :  :  :  :     +- * Filter (6)
   :              :        :  :  :  :        +- * ColumnarToRow (5)
   :              :        :  :  :  :           +- Scan parquet default.store (4)
   :              :        :  :  :  +- BroadcastExchange (12)
   :              :        :  :  :     +- * Filter (11)
   :              :        :  :  :        +- * ColumnarToRow (10)
   :              :        :  :  :           +- Scan parquet default.promotion (9)
   :              :        :  :  +- ReusedExchange (14)
   :              :        :  +- BroadcastExchange (19)
   :              :        :     +- * Filter (18)
   :              :        :        +- * ColumnarToRow (17)
   :              :        :           +- Scan parquet default.customer (16)
   :              :        +- BroadcastExchange (24)
   :              :           +- * Filter (23)
   :              :              +- * ColumnarToRow (22)
   :              :                 +- Scan parquet default.customer_address (21)
   :              +- BroadcastExchange (32)
   :                 +- * HashAggregate (31)
   :                    +- * Filter (30)
   :                       +- * ColumnarToRow (29)
   :                          +- Scan parquet default.item (28)
   +- BroadcastExchange (57)
      +- * HashAggregate (56)
         +- Exchange (55)
            +- * HashAggregate (54)
               +- * Project (53)
                  +- * BroadcastHashJoin Inner BuildRight (52)
                     :- * Project (50)
                     :  +- HashAggregate (49)
                     :     +- BroadcastHashJoin Inner BuildRight (48)
                     :        :- * BroadcastHashJoin Inner BuildRight (46)
                     :        :  :- * BroadcastHashJoin Inner BuildRight (44)
                     :        :  :  :- * BroadcastHashJoin Inner BuildRight (42)
                     :        :  :  :  :- * Filter (40)
                     :        :  :  :  :  +- * ColumnarToRow (39)
                     :        :  :  :  :     +- Scan parquet default.store_sales (38)
                     :        :  :  :  +- ReusedExchange (41)
                     :        :  :  +- ReusedExchange (43)
                     :        :  +- ReusedExchange (45)
                     :        +- ReusedExchange (47)
                     +- ReusedExchange (51)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23), dynamicpruningexpression(ss_sold_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 4]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : (((isnotnull(ss_store_sk#7) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_promo_sk#8)) AND isnotnull(ss_customer_sk#3))

(4) Scan parquet default.store
Output [29]: [s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_gmt_offset), EqualTo(s_gmt_offset,-5.00), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(5) ColumnarToRow [codegen id : 1]
Input [29]: [s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53]

(6) Filter [codegen id : 1]
Input [29]: [s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53]
Condition : ((isnotnull(s_gmt_offset#52) AND (s_gmt_offset#52 = -5.00)) AND isnotnull(s_store_sk#25))

(7) BroadcastExchange
Input [29]: [s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#54]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#25]
Join condition: None

(9) Scan parquet default.promotion
Output [19]: [p_promo_sk#55, p_promo_id#56, p_start_date_sk#57, p_end_date_sk#58, p_item_sk#59, p_cost#60, p_response_target#61, p_promo_name#62, p_channel_dmail#63, p_channel_email#64, p_channel_catalog#65, p_channel_tv#66, p_channel_radio#67, p_channel_press#68, p_channel_event#69, p_channel_demo#70, p_channel_details#71, p_purpose#72, p_discount_active#73]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [Or(Or(EqualTo(p_channel_dmail,Y),EqualTo(p_channel_email,Y)),EqualTo(p_channel_tv,Y)), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_promo_id:string,p_start_date_sk:int,p_end_date_sk:int,p_item_sk:int,p_cost:decimal(15,2),p_response_target:int,p_promo_name:string,p_channel_dmail:string,p_channel_email:string,p_channel_catalog:string,p_channel_tv:string,p_channel_radio:string,p_channel_press:string,p_channel_event:string,p_channel_demo:string,p_channel_details:string,p_purpose:string,p_discount_active:string>

(10) ColumnarToRow [codegen id : 2]
Input [19]: [p_promo_sk#55, p_promo_id#56, p_start_date_sk#57, p_end_date_sk#58, p_item_sk#59, p_cost#60, p_response_target#61, p_promo_name#62, p_channel_dmail#63, p_channel_email#64, p_channel_catalog#65, p_channel_tv#66, p_channel_radio#67, p_channel_press#68, p_channel_event#69, p_channel_demo#70, p_channel_details#71, p_purpose#72, p_discount_active#73]

(11) Filter [codegen id : 2]
Input [19]: [p_promo_sk#55, p_promo_id#56, p_start_date_sk#57, p_end_date_sk#58, p_item_sk#59, p_cost#60, p_response_target#61, p_promo_name#62, p_channel_dmail#63, p_channel_email#64, p_channel_catalog#65, p_channel_tv#66, p_channel_radio#67, p_channel_press#68, p_channel_event#69, p_channel_demo#70, p_channel_details#71, p_purpose#72, p_discount_active#73]
Condition : ((((p_channel_dmail#63 = Y) OR (p_channel_email#64 = Y)) OR (p_channel_tv#66 = Y)) AND isnotnull(p_promo_sk#55))

(12) BroadcastExchange
Input [19]: [p_promo_sk#55, p_promo_id#56, p_start_date_sk#57, p_end_date_sk#58, p_item_sk#59, p_cost#60, p_response_target#61, p_promo_name#62, p_channel_dmail#63, p_channel_email#64, p_channel_catalog#65, p_channel_tv#66, p_channel_radio#67, p_channel_press#68, p_channel_event#69, p_channel_demo#70, p_channel_details#71, p_purpose#72, p_discount_active#73]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#74]

(13) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_promo_sk#8]
Right keys [1]: [p_promo_sk#55]
Join condition: None

(14) ReusedExchange [Reuses operator id: 63]
Output [28]: [d_date_sk#75, d_date_id#76, d_date#77, d_month_seq#78, d_week_seq#79, d_quarter_seq#80, d_year#81, d_dow#82, d_moy#83, d_dom#84, d_qoy#85, d_fy_year#86, d_fy_quarter_seq#87, d_fy_week_seq#88, d_day_name#89, d_quarter_name#90, d_holiday#91, d_weekend#92, d_following_holiday#93, d_first_dom#94, d_last_dom#95, d_same_day_ly#96, d_same_day_lq#97, d_current_day#98, d_current_week#99, d_current_month#100, d_current_quarter#101, d_current_year#102]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#75]
Join condition: None

(16) Scan parquet default.customer
Output [18]: [c_customer_sk#103, c_customer_id#104, c_current_cdemo_sk#105, c_current_hdemo_sk#106, c_current_addr_sk#107, c_first_shipto_date_sk#108, c_first_sales_date_sk#109, c_salutation#110, c_first_name#111, c_last_name#112, c_preferred_cust_flag#113, c_birth_day#114, c_birth_month#115, c_birth_year#116, c_birth_country#117, c_login#118, c_email_address#119, c_last_review_date#120]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(17) ColumnarToRow [codegen id : 5]
Input [18]: [c_customer_sk#103, c_customer_id#104, c_current_cdemo_sk#105, c_current_hdemo_sk#106, c_current_addr_sk#107, c_first_shipto_date_sk#108, c_first_sales_date_sk#109, c_salutation#110, c_first_name#111, c_last_name#112, c_preferred_cust_flag#113, c_birth_day#114, c_birth_month#115, c_birth_year#116, c_birth_country#117, c_login#118, c_email_address#119, c_last_review_date#120]

(18) Filter [codegen id : 5]
Input [18]: [c_customer_sk#103, c_customer_id#104, c_current_cdemo_sk#105, c_current_hdemo_sk#106, c_current_addr_sk#107, c_first_shipto_date_sk#108, c_first_sales_date_sk#109, c_salutation#110, c_first_name#111, c_last_name#112, c_preferred_cust_flag#113, c_birth_day#114, c_birth_month#115, c_birth_year#116, c_birth_country#117, c_login#118, c_email_address#119, c_last_review_date#120]
Condition : (isnotnull(c_customer_sk#103) AND isnotnull(c_current_addr_sk#107))

(19) BroadcastExchange
Input [18]: [c_customer_sk#103, c_customer_id#104, c_current_cdemo_sk#105, c_current_hdemo_sk#106, c_current_addr_sk#107, c_first_shipto_date_sk#108, c_first_sales_date_sk#109, c_salutation#110, c_first_name#111, c_last_name#112, c_preferred_cust_flag#113, c_birth_day#114, c_birth_month#115, c_birth_year#116, c_birth_country#117, c_login#118, c_email_address#119, c_last_review_date#120]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#121]

(20) BroadcastHashJoin
Left keys [1]: [ss_customer_sk#3]
Right keys [1]: [c_customer_sk#103]
Join condition: None

(21) Scan parquet default.customer_address
Output [13]: [ca_address_sk#122, ca_address_id#123, ca_street_number#124, ca_street_name#125, ca_street_type#126, ca_suite_number#127, ca_city#128, ca_county#129, ca_state#130, ca_zip#131, ca_country#132, ca_gmt_offset#133, ca_location_type#134]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(22) ColumnarToRow [codegen id : 6]
Input [13]: [ca_address_sk#122, ca_address_id#123, ca_street_number#124, ca_street_name#125, ca_street_type#126, ca_suite_number#127, ca_city#128, ca_county#129, ca_state#130, ca_zip#131, ca_country#132, ca_gmt_offset#133, ca_location_type#134]

(23) Filter [codegen id : 6]
Input [13]: [ca_address_sk#122, ca_address_id#123, ca_street_number#124, ca_street_name#125, ca_street_type#126, ca_suite_number#127, ca_city#128, ca_county#129, ca_state#130, ca_zip#131, ca_country#132, ca_gmt_offset#133, ca_location_type#134]
Condition : ((isnotnull(ca_gmt_offset#133) AND (ca_gmt_offset#133 = -5.00)) AND isnotnull(ca_address_sk#122))

(24) BroadcastExchange
Input [13]: [ca_address_sk#122, ca_address_id#123, ca_street_number#124, ca_street_name#125, ca_street_type#126, ca_suite_number#127, ca_city#128, ca_county#129, ca_state#130, ca_zip#131, ca_country#132, ca_gmt_offset#133, ca_location_type#134]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#135]

(25) BroadcastHashJoin
Left keys [1]: [c_current_addr_sk#107]
Right keys [1]: [ca_address_sk#122]
Join condition: None

(26) HashAggregate
Input [130]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, s_store_sk#25, s_store_id#26, s_rec_start_date#27, s_rec_end_date#28, s_closed_date_sk#29, s_store_name#30, s_number_employees#31, s_floor_space#32, s_hours#33, s_manager#34, s_market_id#35, s_geography_class#36, s_market_desc#37, s_market_manager#38, s_division_id#39, s_division_name#40, s_company_id#41, s_company_name#42, s_street_number#43, s_street_name#44, s_street_type#45, s_suite_number#46, s_city#47, s_county#48, s_state#49, s_zip#50, s_country#51, s_gmt_offset#52, s_tax_percentage#53, p_promo_sk#55, p_promo_id#56, p_start_date_sk#57, p_end_date_sk#58, p_item_sk#59, p_cost#60, p_response_target#61, p_promo_name#62, p_channel_dmail#63, p_channel_email#64, p_channel_catalog#65, p_channel_tv#66, p_channel_radio#67, p_channel_press#68, p_channel_event#69, p_channel_demo#70, p_channel_details#71, p_purpose#72, p_discount_active#73, d_date_sk#75, d_date_id#76, d_date#77, d_month_seq#78, d_week_seq#79, d_quarter_seq#80, d_year#81, d_dow#82, d_moy#83, d_dom#84, d_qoy#85, d_fy_year#86, d_fy_quarter_seq#87, d_fy_week_seq#88, d_day_name#89, d_quarter_name#90, d_holiday#91, d_weekend#92, d_following_holiday#93, d_first_dom#94, d_last_dom#95, d_same_day_ly#96, d_same_day_lq#97, d_current_day#98, d_current_week#99, d_current_month#100, d_current_quarter#101, d_current_year#102, c_customer_sk#103, c_customer_id#104, c_current_cdemo_sk#105, c_current_hdemo_sk#106, c_current_addr_sk#107, c_first_shipto_date_sk#108, c_first_sales_date_sk#109, c_salutation#110, c_first_name#111, c_last_name#112, c_preferred_cust_flag#113, c_birth_day#114, c_birth_month#115, c_birth_year#116, c_birth_country#117, c_login#118, c_email_address#119, c_last_review_date#120, ca_address_sk#122, ca_address_id#123, ca_street_number#124, ca_street_name#125, ca_street_type#126, ca_suite_number#127, ca_city#128, ca_county#129, ca_state#130, ca_zip#131, ca_country#132, ca_gmt_offset#133, ca_location_type#134]
Keys [1]: [ss_item_sk#2]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#15))]
Aggregate Attributes [1]: [sum#136]
Results [2]: [ss_item_sk#2, sum#137]

(27) Project [codegen id : 8]
Output [2]: [ss_item_sk#2, sum#137 AS _pushedexpression#138]
Input [2]: [ss_item_sk#2, sum#137]

(28) Scan parquet default.item
Output [22]: [i_item_sk#139, i_item_id#140, i_rec_start_date#141, i_rec_end_date#142, i_item_desc#143, i_current_price#144, i_wholesale_cost#145, i_brand_id#146, i_brand#147, i_class_id#148, i_class#149, i_category_id#150, i_category#151, i_manufact_id#152, i_manufact#153, i_size#154, i_formulation#155, i_color#156, i_units#157, i_container#158, i_manager_id#159, i_product_name#160]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Jewelry                                           ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(29) ColumnarToRow [codegen id : 7]
Input [22]: [i_item_sk#139, i_item_id#140, i_rec_start_date#141, i_rec_end_date#142, i_item_desc#143, i_current_price#144, i_wholesale_cost#145, i_brand_id#146, i_brand#147, i_class_id#148, i_class#149, i_category_id#150, i_category#151, i_manufact_id#152, i_manufact#153, i_size#154, i_formulation#155, i_color#156, i_units#157, i_container#158, i_manager_id#159, i_product_name#160]

(30) Filter [codegen id : 7]
Input [22]: [i_item_sk#139, i_item_id#140, i_rec_start_date#141, i_rec_end_date#142, i_item_desc#143, i_current_price#144, i_wholesale_cost#145, i_brand_id#146, i_brand#147, i_class_id#148, i_class#149, i_category_id#150, i_category#151, i_manufact_id#152, i_manufact#153, i_size#154, i_formulation#155, i_color#156, i_units#157, i_container#158, i_manager_id#159, i_product_name#160]
Condition : ((isnotnull(i_category#151) AND (i_category#151 = Jewelry                                           )) AND isnotnull(i_item_sk#139))

(31) HashAggregate [codegen id : 7]
Input [22]: [i_item_sk#139, i_item_id#140, i_rec_start_date#141, i_rec_end_date#142, i_item_desc#143, i_current_price#144, i_wholesale_cost#145, i_brand_id#146, i_brand#147, i_class_id#148, i_class#149, i_category_id#150, i_category#151, i_manufact_id#152, i_manufact#153, i_size#154, i_formulation#155, i_color#156, i_units#157, i_container#158, i_manager_id#159, i_product_name#160]
Keys [1]: [i_item_sk#139]
Functions: []
Aggregate Attributes: []
Results [1]: [i_item_sk#139]

(32) BroadcastExchange
Input [1]: [i_item_sk#139]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#161]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#139]
Join condition: None

(34) Project [codegen id : 8]
Output [1]: [_pushedexpression#162]
Input [3]: [ss_item_sk#2, _pushedexpression#138, i_item_sk#139]

(35) HashAggregate [codegen id : 8]
Input [1]: [_pushedexpression#162]
Keys: []
Functions [1]: [partial_sum(_pushedexpression#162)]
Aggregate Attributes [2]: [sum#163, isEmpty#164]
Results [2]: [sum#165, isEmpty#166]

(36) Exchange
Input [2]: [sum#165, isEmpty#166]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#167]

(37) HashAggregate [codegen id : 17]
Input [2]: [sum#165, isEmpty#166]
Keys: []
Functions [1]: [sum(_pushedexpression#162)]
Aggregate Attributes [1]: [sum(_pushedexpression#162)#168]
Results [1]: [cast(sum(_pushedexpression#162)#168 as decimal(17,2)) AS promotions#169]

(38) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#170, ss_item_sk#171, ss_customer_sk#172, ss_cdemo_sk#173, ss_hdemo_sk#174, ss_addr_sk#175, ss_store_sk#176, ss_promo_sk#177, ss_ticket_number#178, ss_quantity#179, ss_wholesale_cost#180, ss_list_price#181, ss_sales_price#182, ss_ext_discount_amt#183, ss_ext_sales_price#184, ss_ext_wholesale_cost#185, ss_ext_list_price#186, ss_ext_tax#187, ss_coupon_amt#188, ss_net_paid#189, ss_net_paid_inc_tax#190, ss_net_profit#191, ss_sold_date_sk#192]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#192), dynamicpruningexpression(ss_sold_date_sk#192 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(39) ColumnarToRow [codegen id : 12]
Input [23]: [ss_sold_time_sk#170, ss_item_sk#171, ss_customer_sk#172, ss_cdemo_sk#173, ss_hdemo_sk#174, ss_addr_sk#175, ss_store_sk#176, ss_promo_sk#177, ss_ticket_number#178, ss_quantity#179, ss_wholesale_cost#180, ss_list_price#181, ss_sales_price#182, ss_ext_discount_amt#183, ss_ext_sales_price#184, ss_ext_wholesale_cost#185, ss_ext_list_price#186, ss_ext_tax#187, ss_coupon_amt#188, ss_net_paid#189, ss_net_paid_inc_tax#190, ss_net_profit#191, ss_sold_date_sk#192]

(40) Filter [codegen id : 12]
Input [23]: [ss_sold_time_sk#170, ss_item_sk#171, ss_customer_sk#172, ss_cdemo_sk#173, ss_hdemo_sk#174, ss_addr_sk#175, ss_store_sk#176, ss_promo_sk#177, ss_ticket_number#178, ss_quantity#179, ss_wholesale_cost#180, ss_list_price#181, ss_sales_price#182, ss_ext_discount_amt#183, ss_ext_sales_price#184, ss_ext_wholesale_cost#185, ss_ext_list_price#186, ss_ext_tax#187, ss_coupon_amt#188, ss_net_paid#189, ss_net_paid_inc_tax#190, ss_net_profit#191, ss_sold_date_sk#192]
Condition : ((isnotnull(ss_store_sk#176) AND isnotnull(ss_item_sk#171)) AND isnotnull(ss_customer_sk#172))

(41) ReusedExchange [Reuses operator id: 7]
Output [29]: [s_store_sk#193, s_store_id#194, s_rec_start_date#195, s_rec_end_date#196, s_closed_date_sk#197, s_store_name#198, s_number_employees#199, s_floor_space#200, s_hours#201, s_manager#202, s_market_id#203, s_geography_class#204, s_market_desc#205, s_market_manager#206, s_division_id#207, s_division_name#208, s_company_id#209, s_company_name#210, s_street_number#211, s_street_name#212, s_street_type#213, s_suite_number#214, s_city#215, s_county#216, s_state#217, s_zip#218, s_country#219, s_gmt_offset#220, s_tax_percentage#221]

(42) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_store_sk#176]
Right keys [1]: [s_store_sk#193]
Join condition: None

(43) ReusedExchange [Reuses operator id: 63]
Output [28]: [d_date_sk#222, d_date_id#223, d_date#224, d_month_seq#225, d_week_seq#226, d_quarter_seq#227, d_year#228, d_dow#229, d_moy#230, d_dom#231, d_qoy#232, d_fy_year#233, d_fy_quarter_seq#234, d_fy_week_seq#235, d_day_name#236, d_quarter_name#237, d_holiday#238, d_weekend#239, d_following_holiday#240, d_first_dom#241, d_last_dom#242, d_same_day_ly#243, d_same_day_lq#244, d_current_day#245, d_current_week#246, d_current_month#247, d_current_quarter#248, d_current_year#249]

(44) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_sold_date_sk#192]
Right keys [1]: [d_date_sk#222]
Join condition: None

(45) ReusedExchange [Reuses operator id: 19]
Output [18]: [c_customer_sk#250, c_customer_id#251, c_current_cdemo_sk#252, c_current_hdemo_sk#253, c_current_addr_sk#254, c_first_shipto_date_sk#255, c_first_sales_date_sk#256, c_salutation#257, c_first_name#258, c_last_name#259, c_preferred_cust_flag#260, c_birth_day#261, c_birth_month#262, c_birth_year#263, c_birth_country#264, c_login#265, c_email_address#266, c_last_review_date#267]

(46) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_customer_sk#172]
Right keys [1]: [c_customer_sk#250]
Join condition: None

(47) ReusedExchange [Reuses operator id: 24]
Output [13]: [ca_address_sk#268, ca_address_id#269, ca_street_number#270, ca_street_name#271, ca_street_type#272, ca_suite_number#273, ca_city#274, ca_county#275, ca_state#276, ca_zip#277, ca_country#278, ca_gmt_offset#279, ca_location_type#280]

(48) BroadcastHashJoin
Left keys [1]: [c_current_addr_sk#254]
Right keys [1]: [ca_address_sk#268]
Join condition: None

(49) HashAggregate
Input [111]: [ss_sold_time_sk#170, ss_item_sk#171, ss_customer_sk#172, ss_cdemo_sk#173, ss_hdemo_sk#174, ss_addr_sk#175, ss_store_sk#176, ss_promo_sk#177, ss_ticket_number#178, ss_quantity#179, ss_wholesale_cost#180, ss_list_price#181, ss_sales_price#182, ss_ext_discount_amt#183, ss_ext_sales_price#184, ss_ext_wholesale_cost#185, ss_ext_list_price#186, ss_ext_tax#187, ss_coupon_amt#188, ss_net_paid#189, ss_net_paid_inc_tax#190, ss_net_profit#191, ss_sold_date_sk#192, s_store_sk#193, s_store_id#194, s_rec_start_date#195, s_rec_end_date#196, s_closed_date_sk#197, s_store_name#198, s_number_employees#199, s_floor_space#200, s_hours#201, s_manager#202, s_market_id#203, s_geography_class#204, s_market_desc#205, s_market_manager#206, s_division_id#207, s_division_name#208, s_company_id#209, s_company_name#210, s_street_number#211, s_street_name#212, s_street_type#213, s_suite_number#214, s_city#215, s_county#216, s_state#217, s_zip#218, s_country#219, s_gmt_offset#220, s_tax_percentage#221, d_date_sk#222, d_date_id#223, d_date#224, d_month_seq#225, d_week_seq#226, d_quarter_seq#227, d_year#228, d_dow#229, d_moy#230, d_dom#231, d_qoy#232, d_fy_year#233, d_fy_quarter_seq#234, d_fy_week_seq#235, d_day_name#236, d_quarter_name#237, d_holiday#238, d_weekend#239, d_following_holiday#240, d_first_dom#241, d_last_dom#242, d_same_day_ly#243, d_same_day_lq#244, d_current_day#245, d_current_week#246, d_current_month#247, d_current_quarter#248, d_current_year#249, c_customer_sk#250, c_customer_id#251, c_current_cdemo_sk#252, c_current_hdemo_sk#253, c_current_addr_sk#254, c_first_shipto_date_sk#255, c_first_sales_date_sk#256, c_salutation#257, c_first_name#258, c_last_name#259, c_preferred_cust_flag#260, c_birth_day#261, c_birth_month#262, c_birth_year#263, c_birth_country#264, c_login#265, c_email_address#266, c_last_review_date#267, ca_address_sk#268, ca_address_id#269, ca_street_number#270, ca_street_name#271, ca_street_type#272, ca_suite_number#273, ca_city#274, ca_county#275, ca_state#276, ca_zip#277, ca_country#278, ca_gmt_offset#279, ca_location_type#280]
Keys [1]: [ss_item_sk#171]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#184))]
Aggregate Attributes [1]: [sum#281]
Results [2]: [ss_item_sk#171, sum#282]

(50) Project [codegen id : 15]
Output [2]: [ss_item_sk#171, sum#282 AS _pushedexpression#283]
Input [2]: [ss_item_sk#171, sum#282]

(51) ReusedExchange [Reuses operator id: 32]
Output [1]: [i_item_sk#284]

(52) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ss_item_sk#171]
Right keys [1]: [i_item_sk#284]
Join condition: None

(53) Project [codegen id : 15]
Output [1]: [_pushedexpression#285]
Input [3]: [ss_item_sk#171, _pushedexpression#283, i_item_sk#284]

(54) HashAggregate [codegen id : 15]
Input [1]: [_pushedexpression#285]
Keys: []
Functions [1]: [partial_sum(_pushedexpression#285)]
Aggregate Attributes [2]: [sum#286, isEmpty#287]
Results [2]: [sum#288, isEmpty#289]

(55) Exchange
Input [2]: [sum#288, isEmpty#289]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#290]

(56) HashAggregate [codegen id : 16]
Input [2]: [sum#288, isEmpty#289]
Keys: []
Functions [1]: [sum(_pushedexpression#285)]
Aggregate Attributes [1]: [sum(_pushedexpression#285)#291]
Results [1]: [cast(sum(_pushedexpression#285)#291 as decimal(17,2)) AS total#292]

(57) BroadcastExchange
Input [1]: [total#292]
Arguments: IdentityBroadcastMode, [id=#293]

(58) BroadcastNestedLoopJoin [codegen id : 17]
Join condition: None

(59) Project [codegen id : 17]
Output [3]: [promotions#169, total#292, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(promotions#169 as decimal(15,4))) / promote_precision(cast(total#292 as decimal(15,4)))), DecimalType(35,20))) * 100.00000000000000000000), DecimalType(38,19)) AS ((CAST(promotions AS DECIMAL(15,4)) / CAST(total AS DECIMAL(15,4))) * 100)#294]
Input [2]: [promotions#169, total#292]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#23 IN dynamicpruning#24
BroadcastExchange (63)
+- * Filter (62)
   +- * ColumnarToRow (61)
      +- Scan parquet default.date_dim (60)


(60) Scan parquet default.date_dim
Output [28]: [d_date_sk#75, d_date_id#76, d_date#77, d_month_seq#78, d_week_seq#79, d_quarter_seq#80, d_year#81, d_dow#82, d_moy#83, d_dom#84, d_qoy#85, d_fy_year#86, d_fy_quarter_seq#87, d_fy_week_seq#88, d_day_name#89, d_quarter_name#90, d_holiday#91, d_weekend#92, d_following_holiday#93, d_first_dom#94, d_last_dom#95, d_same_day_ly#96, d_same_day_lq#97, d_current_day#98, d_current_week#99, d_current_month#100, d_current_quarter#101, d_current_year#102]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(61) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#75, d_date_id#76, d_date#77, d_month_seq#78, d_week_seq#79, d_quarter_seq#80, d_year#81, d_dow#82, d_moy#83, d_dom#84, d_qoy#85, d_fy_year#86, d_fy_quarter_seq#87, d_fy_week_seq#88, d_day_name#89, d_quarter_name#90, d_holiday#91, d_weekend#92, d_following_holiday#93, d_first_dom#94, d_last_dom#95, d_same_day_ly#96, d_same_day_lq#97, d_current_day#98, d_current_week#99, d_current_month#100, d_current_quarter#101, d_current_year#102]

(62) Filter [codegen id : 1]
Input [28]: [d_date_sk#75, d_date_id#76, d_date#77, d_month_seq#78, d_week_seq#79, d_quarter_seq#80, d_year#81, d_dow#82, d_moy#83, d_dom#84, d_qoy#85, d_fy_year#86, d_fy_quarter_seq#87, d_fy_week_seq#88, d_day_name#89, d_quarter_name#90, d_holiday#91, d_weekend#92, d_following_holiday#93, d_first_dom#94, d_last_dom#95, d_same_day_ly#96, d_same_day_lq#97, d_current_day#98, d_current_week#99, d_current_month#100, d_current_quarter#101, d_current_year#102]
Condition : ((((isnotnull(d_year#81) AND isnotnull(d_moy#83)) AND (d_year#81 = 1998)) AND (d_moy#83 = 11)) AND isnotnull(d_date_sk#75))

(63) BroadcastExchange
Input [28]: [d_date_sk#75, d_date_id#76, d_date#77, d_month_seq#78, d_week_seq#79, d_quarter_seq#80, d_year#81, d_dow#82, d_moy#83, d_dom#84, d_qoy#85, d_fy_year#86, d_fy_quarter_seq#87, d_fy_week_seq#88, d_day_name#89, d_quarter_name#90, d_holiday#91, d_weekend#92, d_following_holiday#93, d_first_dom#94, d_last_dom#95, d_same_day_ly#96, d_same_day_lq#97, d_current_day#98, d_current_week#99, d_current_month#100, d_current_quarter#101, d_current_year#102]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#295]

Subquery:2 Hosting operator id = 38 Hosting Expression = ss_sold_date_sk#192 IN dynamicpruning#24


