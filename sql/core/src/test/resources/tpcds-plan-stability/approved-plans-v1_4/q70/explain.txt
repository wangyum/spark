== Physical Plan ==
TakeOrderedAndProject (44)
+- * Project (43)
   +- Window (42)
      +- * Sort (41)
         +- Exchange (40)
            +- * HashAggregate (39)
               +- Exchange (38)
                  +- * HashAggregate (37)
                     +- * Expand (36)
                        +- * Project (35)
                           +- * BroadcastHashJoin Inner BuildRight (34)
                              :- * Project (6)
                              :  +- * BroadcastHashJoin Inner BuildRight (5)
                              :     :- * Filter (3)
                              :     :  +- * ColumnarToRow (2)
                              :     :     +- Scan parquet default.store_sales (1)
                              :     +- ReusedExchange (4)
                              +- BroadcastExchange (33)
                                 +- * BroadcastHashJoin LeftSemi BuildRight (32)
                                    :- * Filter (9)
                                    :  +- * ColumnarToRow (8)
                                    :     +- Scan parquet default.store (7)
                                    +- BroadcastExchange (31)
                                       +- * HashAggregate (30)
                                          +- * Project (29)
                                             +- * Filter (28)
                                                +- Window (27)
                                                   +- * Sort (26)
                                                      +- * HashAggregate (25)
                                                         +- Exchange (24)
                                                            +- * HashAggregate (23)
                                                               +- * Project (22)
                                                                  +- * BroadcastHashJoin Inner BuildRight (21)
                                                                     :- * Project (19)
                                                                     :  +- * HashAggregate (18)
                                                                     :     +- * BroadcastHashJoin Inner BuildRight (17)
                                                                     :        :- * Filter (12)
                                                                     :        :  +- * ColumnarToRow (11)
                                                                     :        :     +- Scan parquet default.store_sales (10)
                                                                     :        +- BroadcastExchange (16)
                                                                     :           +- * Filter (15)
                                                                     :              +- * ColumnarToRow (14)
                                                                     :                 +- Scan parquet default.store (13)
                                                                     +- ReusedExchange (20)


(1) Scan parquet default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 8]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 8]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(4) ReusedExchange [Reuses operator id: 49]
Output [1]: [d_date_sk#5]

(5) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 8]
Output [2]: [ss_store_sk#1, ss_net_profit#2]
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#5]

(7) Scan parquet default.store
Output [3]: [s_store_sk#6, s_county#7, s_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(8) ColumnarToRow [codegen id : 7]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]

(9) Filter [codegen id : 7]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Condition : isnotnull(s_store_sk#6)

(10) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#9, ss_item_sk#10, ss_customer_sk#11, ss_cdemo_sk#12, ss_hdemo_sk#13, ss_addr_sk#14, ss_store_sk#15, ss_promo_sk#16, ss_ticket_number#17, ss_quantity#18, ss_wholesale_cost#19, ss_list_price#20, ss_sales_price#21, ss_ext_discount_amt#22, ss_ext_sales_price#23, ss_ext_wholesale_cost#24, ss_ext_list_price#25, ss_ext_tax#26, ss_coupon_amt#27, ss_net_paid#28, ss_net_paid_inc_tax#29, ss_net_profit#30, ss_sold_date_sk#31]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#31), dynamicpruningexpression(ss_sold_date_sk#31 IN dynamicpruning#32)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(11) ColumnarToRow [codegen id : 4]
Input [23]: [ss_sold_time_sk#9, ss_item_sk#10, ss_customer_sk#11, ss_cdemo_sk#12, ss_hdemo_sk#13, ss_addr_sk#14, ss_store_sk#15, ss_promo_sk#16, ss_ticket_number#17, ss_quantity#18, ss_wholesale_cost#19, ss_list_price#20, ss_sales_price#21, ss_ext_discount_amt#22, ss_ext_sales_price#23, ss_ext_wholesale_cost#24, ss_ext_list_price#25, ss_ext_tax#26, ss_coupon_amt#27, ss_net_paid#28, ss_net_paid_inc_tax#29, ss_net_profit#30, ss_sold_date_sk#31]

(12) Filter [codegen id : 4]
Input [23]: [ss_sold_time_sk#9, ss_item_sk#10, ss_customer_sk#11, ss_cdemo_sk#12, ss_hdemo_sk#13, ss_addr_sk#14, ss_store_sk#15, ss_promo_sk#16, ss_ticket_number#17, ss_quantity#18, ss_wholesale_cost#19, ss_list_price#20, ss_sales_price#21, ss_ext_discount_amt#22, ss_ext_sales_price#23, ss_ext_wholesale_cost#24, ss_ext_list_price#25, ss_ext_tax#26, ss_coupon_amt#27, ss_net_paid#28, ss_net_paid_inc_tax#29, ss_net_profit#30, ss_sold_date_sk#31]
Condition : isnotnull(ss_store_sk#15)

(13) Scan parquet default.store
Output [29]: [s_store_sk#33, s_store_id#34, s_rec_start_date#35, s_rec_end_date#36, s_closed_date_sk#37, s_store_name#38, s_number_employees#39, s_floor_space#40, s_hours#41, s_manager#42, s_market_id#43, s_geography_class#44, s_market_desc#45, s_market_manager#46, s_division_id#47, s_division_name#48, s_company_id#49, s_company_name#50, s_street_number#51, s_street_name#52, s_street_type#53, s_suite_number#54, s_city#55, s_county#56, s_state#57, s_zip#58, s_country#59, s_gmt_offset#60, s_tax_percentage#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(14) ColumnarToRow [codegen id : 2]
Input [29]: [s_store_sk#33, s_store_id#34, s_rec_start_date#35, s_rec_end_date#36, s_closed_date_sk#37, s_store_name#38, s_number_employees#39, s_floor_space#40, s_hours#41, s_manager#42, s_market_id#43, s_geography_class#44, s_market_desc#45, s_market_manager#46, s_division_id#47, s_division_name#48, s_company_id#49, s_company_name#50, s_street_number#51, s_street_name#52, s_street_type#53, s_suite_number#54, s_city#55, s_county#56, s_state#57, s_zip#58, s_country#59, s_gmt_offset#60, s_tax_percentage#61]

(15) Filter [codegen id : 2]
Input [29]: [s_store_sk#33, s_store_id#34, s_rec_start_date#35, s_rec_end_date#36, s_closed_date_sk#37, s_store_name#38, s_number_employees#39, s_floor_space#40, s_hours#41, s_manager#42, s_market_id#43, s_geography_class#44, s_market_desc#45, s_market_manager#46, s_division_id#47, s_division_name#48, s_company_id#49, s_company_name#50, s_street_number#51, s_street_name#52, s_street_type#53, s_suite_number#54, s_city#55, s_county#56, s_state#57, s_zip#58, s_country#59, s_gmt_offset#60, s_tax_percentage#61]
Condition : isnotnull(s_store_sk#33)

(16) BroadcastExchange
Input [29]: [s_store_sk#33, s_store_id#34, s_rec_start_date#35, s_rec_end_date#36, s_closed_date_sk#37, s_store_name#38, s_number_employees#39, s_floor_space#40, s_hours#41, s_manager#42, s_market_id#43, s_geography_class#44, s_market_desc#45, s_market_manager#46, s_division_id#47, s_division_name#48, s_company_id#49, s_company_name#50, s_street_number#51, s_street_name#52, s_street_type#53, s_suite_number#54, s_city#55, s_county#56, s_state#57, s_zip#58, s_country#59, s_gmt_offset#60, s_tax_percentage#61]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#62]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#15]
Right keys [1]: [s_store_sk#33]
Join condition: None

(18) HashAggregate [codegen id : 4]
Input [52]: [ss_sold_time_sk#9, ss_item_sk#10, ss_customer_sk#11, ss_cdemo_sk#12, ss_hdemo_sk#13, ss_addr_sk#14, ss_store_sk#15, ss_promo_sk#16, ss_ticket_number#17, ss_quantity#18, ss_wholesale_cost#19, ss_list_price#20, ss_sales_price#21, ss_ext_discount_amt#22, ss_ext_sales_price#23, ss_ext_wholesale_cost#24, ss_ext_list_price#25, ss_ext_tax#26, ss_coupon_amt#27, ss_net_paid#28, ss_net_paid_inc_tax#29, ss_net_profit#30, ss_sold_date_sk#31, s_store_sk#33, s_store_id#34, s_rec_start_date#35, s_rec_end_date#36, s_closed_date_sk#37, s_store_name#38, s_number_employees#39, s_floor_space#40, s_hours#41, s_manager#42, s_market_id#43, s_geography_class#44, s_market_desc#45, s_market_manager#46, s_division_id#47, s_division_name#48, s_company_id#49, s_company_name#50, s_street_number#51, s_street_name#52, s_street_type#53, s_suite_number#54, s_city#55, s_county#56, s_state#57, s_zip#58, s_country#59, s_gmt_offset#60, s_tax_percentage#61]
Keys [2]: [ss_sold_date_sk#31, s_state#57]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#30))]
Aggregate Attributes [1]: [sum#63]
Results [3]: [ss_sold_date_sk#31, s_state#57, sum#64]

(19) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#31, s_state#57, sum#64 AS _pushedexpression#65]
Input [3]: [ss_sold_date_sk#31, s_state#57, sum#64]

(20) ReusedExchange [Reuses operator id: 54]
Output [1]: [d_date_sk#66]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#31]
Right keys [1]: [d_date_sk#66]
Join condition: None

(22) Project [codegen id : 4]
Output [2]: [s_state#57, _pushedexpression#67]
Input [4]: [ss_sold_date_sk#31, s_state#57, _pushedexpression#65, d_date_sk#66]

(23) HashAggregate [codegen id : 4]
Input [2]: [s_state#57, _pushedexpression#67]
Keys [1]: [s_state#57]
Functions [1]: [partial_sum(_pushedexpression#67)]
Aggregate Attributes [2]: [sum#68, isEmpty#69]
Results [3]: [s_state#57, sum#70, isEmpty#71]

(24) Exchange
Input [3]: [s_state#57, sum#70, isEmpty#71]
Arguments: hashpartitioning(s_state#57, 5), ENSURE_REQUIREMENTS, [id=#72]

(25) HashAggregate [codegen id : 5]
Input [3]: [s_state#57, sum#70, isEmpty#71]
Keys [1]: [s_state#57]
Functions [1]: [sum(_pushedexpression#67)]
Aggregate Attributes [1]: [sum(_pushedexpression#67)#73]
Results [3]: [s_state#57, s_state#57, cast(sum(_pushedexpression#67)#73 as decimal(17,2)) AS _w2#74]

(26) Sort [codegen id : 5]
Input [3]: [s_state#57, s_state#57, _w2#74]
Arguments: [s_state#57 ASC NULLS FIRST, _w2#74 DESC NULLS LAST], false, 0

(27) Window
Input [3]: [s_state#57, s_state#57, _w2#74]
Arguments: [rank(_w2#74) windowspecdefinition(s_state#57, _w2#74 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#75], [s_state#57], [_w2#74 DESC NULLS LAST]

(28) Filter [codegen id : 6]
Input [4]: [s_state#57, s_state#57, _w2#74, ranking#75]
Condition : (ranking#75 <= 5)

(29) Project [codegen id : 6]
Output [1]: [s_state#57]
Input [4]: [s_state#57, s_state#57, _w2#74, ranking#75]

(30) HashAggregate [codegen id : 6]
Input [1]: [s_state#57]
Keys [1]: [s_state#57]
Functions: []
Aggregate Attributes: []
Results [1]: [s_state#57]

(31) BroadcastExchange
Input [1]: [s_state#57]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#76]

(32) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [s_state#8]
Right keys [1]: [s_state#57]
Join condition: None

(33) BroadcastExchange
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#6]
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [ss_net_profit#2, s_state#8, s_county#7]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#6, s_county#7, s_state#8]

(36) Expand [codegen id : 8]
Input [3]: [ss_net_profit#2, s_state#8, s_county#7]
Arguments: [[ss_net_profit#2, s_state#8, s_county#7, 0], [ss_net_profit#2, s_state#8, null, 1], [ss_net_profit#2, null, null, 3]], [ss_net_profit#2, s_state#78, s_county#79, spark_grouping_id#80]

(37) HashAggregate [codegen id : 8]
Input [4]: [ss_net_profit#2, s_state#78, s_county#79, spark_grouping_id#80]
Keys [3]: [s_state#78, s_county#79, spark_grouping_id#80]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#81]
Results [4]: [s_state#78, s_county#79, spark_grouping_id#80, sum#82]

(38) Exchange
Input [4]: [s_state#78, s_county#79, spark_grouping_id#80, sum#82]
Arguments: hashpartitioning(s_state#78, s_county#79, spark_grouping_id#80, 5), ENSURE_REQUIREMENTS, [id=#83]

(39) HashAggregate [codegen id : 9]
Input [4]: [s_state#78, s_county#79, spark_grouping_id#80, sum#82]
Keys [3]: [s_state#78, s_county#79, spark_grouping_id#80]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#84]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#84,17,2) AS total_sum#85, s_state#78, s_county#79, (cast((shiftright(spark_grouping_id#80, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#80, 0) & 1) as tinyint)) AS lochierarchy#86, (cast((shiftright(spark_grouping_id#80, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#80, 0) & 1) as tinyint)) AS _w1#87, CASE WHEN (cast((shiftright(spark_grouping_id#80, 0) & 1) as tinyint) = 0) THEN s_state#78 END AS _w2#88, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#84,17,2) AS _w3#89]

(40) Exchange
Input [7]: [total_sum#85, s_state#78, s_county#79, lochierarchy#86, _w1#87, _w2#88, _w3#89]
Arguments: hashpartitioning(_w1#87, _w2#88, 5), ENSURE_REQUIREMENTS, [id=#90]

(41) Sort [codegen id : 10]
Input [7]: [total_sum#85, s_state#78, s_county#79, lochierarchy#86, _w1#87, _w2#88, _w3#89]
Arguments: [_w1#87 ASC NULLS FIRST, _w2#88 ASC NULLS FIRST, _w3#89 DESC NULLS LAST], false, 0

(42) Window
Input [7]: [total_sum#85, s_state#78, s_county#79, lochierarchy#86, _w1#87, _w2#88, _w3#89]
Arguments: [rank(_w3#89) windowspecdefinition(_w1#87, _w2#88, _w3#89 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#91], [_w1#87, _w2#88], [_w3#89 DESC NULLS LAST]

(43) Project [codegen id : 11]
Output [5]: [total_sum#85, s_state#78, s_county#79, lochierarchy#86, rank_within_parent#91]
Input [8]: [total_sum#85, s_state#78, s_county#79, lochierarchy#86, _w1#87, _w2#88, _w3#89, rank_within_parent#91]

(44) TakeOrderedAndProject
Input [5]: [total_sum#85, s_state#78, s_county#79, lochierarchy#86, rank_within_parent#91]
Arguments: 100, [lochierarchy#86 DESC NULLS LAST, CASE WHEN (lochierarchy#86 = 0) THEN s_state#78 END ASC NULLS FIRST, rank_within_parent#91 ASC NULLS FIRST], [total_sum#85, s_state#78, s_county#79, lochierarchy#86, rank_within_parent#91]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (49)
+- * Project (48)
   +- * Filter (47)
      +- * ColumnarToRow (46)
         +- Scan parquet default.date_dim (45)


(45) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#92]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(46) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#92]

(47) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#92]
Condition : (((isnotnull(d_month_seq#92) AND (d_month_seq#92 >= 1200)) AND (d_month_seq#92 <= 1211)) AND isnotnull(d_date_sk#5))

(48) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#92]

(49) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#93]

Subquery:2 Hosting operator id = 10 Hosting Expression = ss_sold_date_sk#31 IN dynamicpruning#32
BroadcastExchange (54)
+- * HashAggregate (53)
   +- * Filter (52)
      +- * ColumnarToRow (51)
         +- Scan parquet default.date_dim (50)


(50) Scan parquet default.date_dim
Output [28]: [d_date_sk#66, d_date_id#94, d_date#95, d_month_seq#96, d_week_seq#97, d_quarter_seq#98, d_year#99, d_dow#100, d_moy#101, d_dom#102, d_qoy#103, d_fy_year#104, d_fy_quarter_seq#105, d_fy_week_seq#106, d_day_name#107, d_quarter_name#108, d_holiday#109, d_weekend#110, d_following_holiday#111, d_first_dom#112, d_last_dom#113, d_same_day_ly#114, d_same_day_lq#115, d_current_day#116, d_current_week#117, d_current_month#118, d_current_quarter#119, d_current_year#120]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(51) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#66, d_date_id#94, d_date#95, d_month_seq#96, d_week_seq#97, d_quarter_seq#98, d_year#99, d_dow#100, d_moy#101, d_dom#102, d_qoy#103, d_fy_year#104, d_fy_quarter_seq#105, d_fy_week_seq#106, d_day_name#107, d_quarter_name#108, d_holiday#109, d_weekend#110, d_following_holiday#111, d_first_dom#112, d_last_dom#113, d_same_day_ly#114, d_same_day_lq#115, d_current_day#116, d_current_week#117, d_current_month#118, d_current_quarter#119, d_current_year#120]

(52) Filter [codegen id : 1]
Input [28]: [d_date_sk#66, d_date_id#94, d_date#95, d_month_seq#96, d_week_seq#97, d_quarter_seq#98, d_year#99, d_dow#100, d_moy#101, d_dom#102, d_qoy#103, d_fy_year#104, d_fy_quarter_seq#105, d_fy_week_seq#106, d_day_name#107, d_quarter_name#108, d_holiday#109, d_weekend#110, d_following_holiday#111, d_first_dom#112, d_last_dom#113, d_same_day_ly#114, d_same_day_lq#115, d_current_day#116, d_current_week#117, d_current_month#118, d_current_quarter#119, d_current_year#120]
Condition : (((isnotnull(d_month_seq#96) AND (d_month_seq#96 >= 1200)) AND (d_month_seq#96 <= 1211)) AND isnotnull(d_date_sk#66))

(53) HashAggregate [codegen id : 1]
Input [28]: [d_date_sk#66, d_date_id#94, d_date#95, d_month_seq#96, d_week_seq#97, d_quarter_seq#98, d_year#99, d_dow#100, d_moy#101, d_dom#102, d_qoy#103, d_fy_year#104, d_fy_quarter_seq#105, d_fy_week_seq#106, d_day_name#107, d_quarter_name#108, d_holiday#109, d_weekend#110, d_following_holiday#111, d_first_dom#112, d_last_dom#113, d_same_day_ly#114, d_same_day_lq#115, d_current_day#116, d_current_week#117, d_current_month#118, d_current_quarter#119, d_current_year#120]
Keys [1]: [d_date_sk#66]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#66]

(54) BroadcastExchange
Input [1]: [d_date_sk#66]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#121]


