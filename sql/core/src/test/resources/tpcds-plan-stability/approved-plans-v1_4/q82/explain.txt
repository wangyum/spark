== Physical Plan ==
TakeOrderedAndProject (22)
+- * HashAggregate (21)
   +- Exchange (20)
      +- * HashAggregate (19)
         +- * Project (18)
            +- * BroadcastHashJoin Inner BuildLeft (17)
               :- BroadcastExchange (12)
               :  +- * HashAggregate (11)
               :     +- * BroadcastHashJoin Inner BuildRight (10)
               :        :- * BroadcastHashJoin Inner BuildRight (8)
               :        :  :- * Filter (3)
               :        :  :  +- * ColumnarToRow (2)
               :        :  :     +- Scan parquet default.item (1)
               :        :  +- BroadcastExchange (7)
               :        :     +- * Filter (6)
               :        :        +- * ColumnarToRow (5)
               :        :           +- Scan parquet default.inventory (4)
               :        +- ReusedExchange (9)
               +- * HashAggregate (16)
                  +- * Filter (15)
                     +- * ColumnarToRow (14)
                        +- Scan parquet default.store_sales (13)


(1) Scan parquet default.item
Output [22]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,62.00), LessThanOrEqual(i_current_price,92.00), In(i_manufact_id, [129,270,423,821]), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(2) ColumnarToRow [codegen id : 3]
Input [22]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22]

(3) Filter [codegen id : 3]
Input [22]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22]
Condition : ((((isnotnull(i_current_price#6) AND (i_current_price#6 >= 62.00)) AND (i_current_price#6 <= 92.00)) AND i_manufact_id#14 IN (129,270,821,423)) AND isnotnull(i_item_sk#1))

(4) Scan parquet default.inventory
Output [4]: [inv_item_sk#23, inv_warehouse_sk#24, inv_quantity_on_hand#25, inv_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#26), dynamicpruningexpression(inv_date_sk#26 IN dynamicpruning#27)]
PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(inv_quantity_on_hand,500), IsNotNull(inv_item_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [inv_item_sk#23, inv_warehouse_sk#24, inv_quantity_on_hand#25, inv_date_sk#26]

(6) Filter [codegen id : 1]
Input [4]: [inv_item_sk#23, inv_warehouse_sk#24, inv_quantity_on_hand#25, inv_date_sk#26]
Condition : (((isnotnull(inv_quantity_on_hand#25) AND (inv_quantity_on_hand#25 >= 100)) AND (inv_quantity_on_hand#25 <= 500)) AND isnotnull(inv_item_sk#23))

(7) BroadcastExchange
Input [4]: [inv_item_sk#23, inv_warehouse_sk#24, inv_quantity_on_hand#25, inv_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [inv_item_sk#23]
Join condition: None

(9) ReusedExchange [Reuses operator id: 26]
Output [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]

(10) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_date_sk#26]
Right keys [1]: [d_date_sk#29]
Join condition: None

(11) HashAggregate [codegen id : 3]
Input [54]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22, inv_item_sk#23, inv_warehouse_sk#24, inv_quantity_on_hand#25, inv_date_sk#26, d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Keys [4]: [i_item_sk#1, i_item_id#2, i_item_desc#5, i_current_price#6]
Functions: []
Aggregate Attributes: []
Results [4]: [i_item_sk#1, i_item_id#2, i_item_desc#5, i_current_price#6]

(12) BroadcastExchange
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#5, i_current_price#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57]

(13) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#58, ss_item_sk#59, ss_customer_sk#60, ss_cdemo_sk#61, ss_hdemo_sk#62, ss_addr_sk#63, ss_store_sk#64, ss_promo_sk#65, ss_ticket_number#66, ss_quantity#67, ss_wholesale_cost#68, ss_list_price#69, ss_sales_price#70, ss_ext_discount_amt#71, ss_ext_sales_price#72, ss_ext_wholesale_cost#73, ss_ext_list_price#74, ss_ext_tax#75, ss_coupon_amt#76, ss_net_paid#77, ss_net_paid_inc_tax#78, ss_net_profit#79, ss_sold_date_sk#80]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(14) ColumnarToRow
Input [23]: [ss_sold_time_sk#58, ss_item_sk#59, ss_customer_sk#60, ss_cdemo_sk#61, ss_hdemo_sk#62, ss_addr_sk#63, ss_store_sk#64, ss_promo_sk#65, ss_ticket_number#66, ss_quantity#67, ss_wholesale_cost#68, ss_list_price#69, ss_sales_price#70, ss_ext_discount_amt#71, ss_ext_sales_price#72, ss_ext_wholesale_cost#73, ss_ext_list_price#74, ss_ext_tax#75, ss_coupon_amt#76, ss_net_paid#77, ss_net_paid_inc_tax#78, ss_net_profit#79, ss_sold_date_sk#80]

(15) Filter
Input [23]: [ss_sold_time_sk#58, ss_item_sk#59, ss_customer_sk#60, ss_cdemo_sk#61, ss_hdemo_sk#62, ss_addr_sk#63, ss_store_sk#64, ss_promo_sk#65, ss_ticket_number#66, ss_quantity#67, ss_wholesale_cost#68, ss_list_price#69, ss_sales_price#70, ss_ext_discount_amt#71, ss_ext_sales_price#72, ss_ext_wholesale_cost#73, ss_ext_list_price#74, ss_ext_tax#75, ss_coupon_amt#76, ss_net_paid#77, ss_net_paid_inc_tax#78, ss_net_profit#79, ss_sold_date_sk#80]
Condition : isnotnull(ss_item_sk#59)

(16) HashAggregate
Input [23]: [ss_sold_time_sk#58, ss_item_sk#59, ss_customer_sk#60, ss_cdemo_sk#61, ss_hdemo_sk#62, ss_addr_sk#63, ss_store_sk#64, ss_promo_sk#65, ss_ticket_number#66, ss_quantity#67, ss_wholesale_cost#68, ss_list_price#69, ss_sales_price#70, ss_ext_discount_amt#71, ss_ext_sales_price#72, ss_ext_wholesale_cost#73, ss_ext_list_price#74, ss_ext_tax#75, ss_coupon_amt#76, ss_net_paid#77, ss_net_paid_inc_tax#78, ss_net_profit#79, ss_sold_date_sk#80]
Keys [1]: [ss_item_sk#59]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_item_sk#59]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [ss_item_sk#59]
Join condition: None

(18) Project [codegen id : 4]
Output [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#5, i_current_price#6, ss_item_sk#59]

(19) HashAggregate [codegen id : 4]
Input [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Keys [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]

(20) Exchange
Input [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Arguments: hashpartitioning(i_item_id#2, i_item_desc#5, i_current_price#6, 5), ENSURE_REQUIREMENTS, [id=#81]

(21) HashAggregate [codegen id : 5]
Input [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Keys [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]

(22) TakeOrderedAndProject
Input [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Arguments: 100, [i_item_id#2 ASC NULLS FIRST], [i_item_id#2, i_item_desc#5, i_current_price#6]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = inv_date_sk#26 IN dynamicpruning#27
BroadcastExchange (26)
+- * Filter (25)
   +- * ColumnarToRow (24)
      +- Scan parquet default.date_dim (23)


(23) Scan parquet default.date_dim
Output [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-05-25), LessThanOrEqual(d_date,2000-07-24), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(24) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]

(25) Filter [codegen id : 1]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Condition : (((isnotnull(d_date#31) AND (d_date#31 >= 2000-05-25)) AND (d_date#31 <= 2000-07-24)) AND isnotnull(d_date_sk#29))

(26) BroadcastExchange
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#82]


