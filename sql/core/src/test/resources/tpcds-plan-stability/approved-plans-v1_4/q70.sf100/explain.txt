== Physical Plan ==
TakeOrderedAndProject (46)
+- * Project (45)
   +- Window (44)
      +- * Sort (43)
         +- Exchange (42)
            +- * HashAggregate (41)
               +- Exchange (40)
                  +- * HashAggregate (39)
                     +- * Expand (38)
                        +- * Project (37)
                           +- * BroadcastHashJoin Inner BuildRight (36)
                              :- * Project (6)
                              :  +- * BroadcastHashJoin Inner BuildRight (5)
                              :     :- * Filter (3)
                              :     :  +- * ColumnarToRow (2)
                              :     :     +- Scan parquet default.store_sales (1)
                              :     +- ReusedExchange (4)
                              +- BroadcastExchange (35)
                                 +- * SortMergeJoin LeftSemi (34)
                                    :- * Sort (11)
                                    :  +- Exchange (10)
                                    :     +- * Filter (9)
                                    :        +- * ColumnarToRow (8)
                                    :           +- Scan parquet default.store (7)
                                    +- * Sort (33)
                                       +- * HashAggregate (32)
                                          +- * Project (31)
                                             +- * Filter (30)
                                                +- Window (29)
                                                   +- * Sort (28)
                                                      +- * HashAggregate (27)
                                                         +- Exchange (26)
                                                            +- * HashAggregate (25)
                                                               +- * Project (24)
                                                                  +- * BroadcastHashJoin Inner BuildRight (23)
                                                                     :- * Project (21)
                                                                     :  +- * HashAggregate (20)
                                                                     :     +- * BroadcastHashJoin Inner BuildRight (19)
                                                                     :        :- * Filter (14)
                                                                     :        :  +- * ColumnarToRow (13)
                                                                     :        :     +- Scan parquet default.store_sales (12)
                                                                     :        +- BroadcastExchange (18)
                                                                     :           +- * Filter (17)
                                                                     :              +- * ColumnarToRow (16)
                                                                     :                 +- Scan parquet default.store (15)
                                                                     +- ReusedExchange (22)


(1) Scan parquet default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 10]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 10]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(4) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_date_sk#5]

(5) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 10]
Output [2]: [ss_store_sk#1, ss_net_profit#2]
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#5]

(7) Scan parquet default.store
Output [3]: [s_store_sk#6, s_county#7, s_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(8) ColumnarToRow [codegen id : 2]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]

(9) Filter [codegen id : 2]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Condition : isnotnull(s_store_sk#6)

(10) Exchange
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: hashpartitioning(s_state#8, 5), ENSURE_REQUIREMENTS, [id=#9]

(11) Sort [codegen id : 3]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: [s_state#8 ASC NULLS FIRST], false, 0

(12) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#10, ss_item_sk#11, ss_customer_sk#12, ss_cdemo_sk#13, ss_hdemo_sk#14, ss_addr_sk#15, ss_store_sk#16, ss_promo_sk#17, ss_ticket_number#18, ss_quantity#19, ss_wholesale_cost#20, ss_list_price#21, ss_sales_price#22, ss_ext_discount_amt#23, ss_ext_sales_price#24, ss_ext_wholesale_cost#25, ss_ext_list_price#26, ss_ext_tax#27, ss_coupon_amt#28, ss_net_paid#29, ss_net_paid_inc_tax#30, ss_net_profit#31, ss_sold_date_sk#32]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#32), dynamicpruningexpression(ss_sold_date_sk#32 IN dynamicpruning#33)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(13) ColumnarToRow [codegen id : 6]
Input [23]: [ss_sold_time_sk#10, ss_item_sk#11, ss_customer_sk#12, ss_cdemo_sk#13, ss_hdemo_sk#14, ss_addr_sk#15, ss_store_sk#16, ss_promo_sk#17, ss_ticket_number#18, ss_quantity#19, ss_wholesale_cost#20, ss_list_price#21, ss_sales_price#22, ss_ext_discount_amt#23, ss_ext_sales_price#24, ss_ext_wholesale_cost#25, ss_ext_list_price#26, ss_ext_tax#27, ss_coupon_amt#28, ss_net_paid#29, ss_net_paid_inc_tax#30, ss_net_profit#31, ss_sold_date_sk#32]

(14) Filter [codegen id : 6]
Input [23]: [ss_sold_time_sk#10, ss_item_sk#11, ss_customer_sk#12, ss_cdemo_sk#13, ss_hdemo_sk#14, ss_addr_sk#15, ss_store_sk#16, ss_promo_sk#17, ss_ticket_number#18, ss_quantity#19, ss_wholesale_cost#20, ss_list_price#21, ss_sales_price#22, ss_ext_discount_amt#23, ss_ext_sales_price#24, ss_ext_wholesale_cost#25, ss_ext_list_price#26, ss_ext_tax#27, ss_coupon_amt#28, ss_net_paid#29, ss_net_paid_inc_tax#30, ss_net_profit#31, ss_sold_date_sk#32]
Condition : isnotnull(ss_store_sk#16)

(15) Scan parquet default.store
Output [29]: [s_store_sk#34, s_store_id#35, s_rec_start_date#36, s_rec_end_date#37, s_closed_date_sk#38, s_store_name#39, s_number_employees#40, s_floor_space#41, s_hours#42, s_manager#43, s_market_id#44, s_geography_class#45, s_market_desc#46, s_market_manager#47, s_division_id#48, s_division_name#49, s_company_id#50, s_company_name#51, s_street_number#52, s_street_name#53, s_street_type#54, s_suite_number#55, s_city#56, s_county#57, s_state#58, s_zip#59, s_country#60, s_gmt_offset#61, s_tax_percentage#62]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(16) ColumnarToRow [codegen id : 4]
Input [29]: [s_store_sk#34, s_store_id#35, s_rec_start_date#36, s_rec_end_date#37, s_closed_date_sk#38, s_store_name#39, s_number_employees#40, s_floor_space#41, s_hours#42, s_manager#43, s_market_id#44, s_geography_class#45, s_market_desc#46, s_market_manager#47, s_division_id#48, s_division_name#49, s_company_id#50, s_company_name#51, s_street_number#52, s_street_name#53, s_street_type#54, s_suite_number#55, s_city#56, s_county#57, s_state#58, s_zip#59, s_country#60, s_gmt_offset#61, s_tax_percentage#62]

(17) Filter [codegen id : 4]
Input [29]: [s_store_sk#34, s_store_id#35, s_rec_start_date#36, s_rec_end_date#37, s_closed_date_sk#38, s_store_name#39, s_number_employees#40, s_floor_space#41, s_hours#42, s_manager#43, s_market_id#44, s_geography_class#45, s_market_desc#46, s_market_manager#47, s_division_id#48, s_division_name#49, s_company_id#50, s_company_name#51, s_street_number#52, s_street_name#53, s_street_type#54, s_suite_number#55, s_city#56, s_county#57, s_state#58, s_zip#59, s_country#60, s_gmt_offset#61, s_tax_percentage#62]
Condition : isnotnull(s_store_sk#34)

(18) BroadcastExchange
Input [29]: [s_store_sk#34, s_store_id#35, s_rec_start_date#36, s_rec_end_date#37, s_closed_date_sk#38, s_store_name#39, s_number_employees#40, s_floor_space#41, s_hours#42, s_manager#43, s_market_id#44, s_geography_class#45, s_market_desc#46, s_market_manager#47, s_division_id#48, s_division_name#49, s_company_id#50, s_company_name#51, s_street_number#52, s_street_name#53, s_street_type#54, s_suite_number#55, s_city#56, s_county#57, s_state#58, s_zip#59, s_country#60, s_gmt_offset#61, s_tax_percentage#62]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#63]

(19) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#16]
Right keys [1]: [s_store_sk#34]
Join condition: None

(20) HashAggregate [codegen id : 6]
Input [52]: [ss_sold_time_sk#10, ss_item_sk#11, ss_customer_sk#12, ss_cdemo_sk#13, ss_hdemo_sk#14, ss_addr_sk#15, ss_store_sk#16, ss_promo_sk#17, ss_ticket_number#18, ss_quantity#19, ss_wholesale_cost#20, ss_list_price#21, ss_sales_price#22, ss_ext_discount_amt#23, ss_ext_sales_price#24, ss_ext_wholesale_cost#25, ss_ext_list_price#26, ss_ext_tax#27, ss_coupon_amt#28, ss_net_paid#29, ss_net_paid_inc_tax#30, ss_net_profit#31, ss_sold_date_sk#32, s_store_sk#34, s_store_id#35, s_rec_start_date#36, s_rec_end_date#37, s_closed_date_sk#38, s_store_name#39, s_number_employees#40, s_floor_space#41, s_hours#42, s_manager#43, s_market_id#44, s_geography_class#45, s_market_desc#46, s_market_manager#47, s_division_id#48, s_division_name#49, s_company_id#50, s_company_name#51, s_street_number#52, s_street_name#53, s_street_type#54, s_suite_number#55, s_city#56, s_county#57, s_state#58, s_zip#59, s_country#60, s_gmt_offset#61, s_tax_percentage#62]
Keys [2]: [ss_sold_date_sk#32, s_state#58]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#31))]
Aggregate Attributes [1]: [sum#64]
Results [3]: [ss_sold_date_sk#32, s_state#58, sum#65]

(21) Project [codegen id : 6]
Output [3]: [ss_sold_date_sk#32, s_state#58, sum#65 AS _pushedexpression#66]
Input [3]: [ss_sold_date_sk#32, s_state#58, sum#65]

(22) ReusedExchange [Reuses operator id: 56]
Output [1]: [d_date_sk#67]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#32]
Right keys [1]: [d_date_sk#67]
Join condition: None

(24) Project [codegen id : 6]
Output [2]: [s_state#58, _pushedexpression#68]
Input [4]: [ss_sold_date_sk#32, s_state#58, _pushedexpression#66, d_date_sk#67]

(25) HashAggregate [codegen id : 6]
Input [2]: [s_state#58, _pushedexpression#68]
Keys [1]: [s_state#58]
Functions [1]: [partial_sum(_pushedexpression#68)]
Aggregate Attributes [2]: [sum#69, isEmpty#70]
Results [3]: [s_state#58, sum#71, isEmpty#72]

(26) Exchange
Input [3]: [s_state#58, sum#71, isEmpty#72]
Arguments: hashpartitioning(s_state#58, 5), ENSURE_REQUIREMENTS, [id=#73]

(27) HashAggregate [codegen id : 7]
Input [3]: [s_state#58, sum#71, isEmpty#72]
Keys [1]: [s_state#58]
Functions [1]: [sum(_pushedexpression#68)]
Aggregate Attributes [1]: [sum(_pushedexpression#68)#74]
Results [3]: [s_state#58, s_state#58, cast(sum(_pushedexpression#68)#74 as decimal(17,2)) AS _w2#75]

(28) Sort [codegen id : 7]
Input [3]: [s_state#58, s_state#58, _w2#75]
Arguments: [s_state#58 ASC NULLS FIRST, _w2#75 DESC NULLS LAST], false, 0

(29) Window
Input [3]: [s_state#58, s_state#58, _w2#75]
Arguments: [rank(_w2#75) windowspecdefinition(s_state#58, _w2#75 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#76], [s_state#58], [_w2#75 DESC NULLS LAST]

(30) Filter [codegen id : 8]
Input [4]: [s_state#58, s_state#58, _w2#75, ranking#76]
Condition : (ranking#76 <= 5)

(31) Project [codegen id : 8]
Output [1]: [s_state#58]
Input [4]: [s_state#58, s_state#58, _w2#75, ranking#76]

(32) HashAggregate [codegen id : 8]
Input [1]: [s_state#58]
Keys [1]: [s_state#58]
Functions: []
Aggregate Attributes: []
Results [1]: [s_state#58]

(33) Sort [codegen id : 8]
Input [1]: [s_state#58]
Arguments: [s_state#58 ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 9]
Left keys [1]: [s_state#8]
Right keys [1]: [s_state#58]
Join condition: None

(35) BroadcastExchange
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77]

(36) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#6]
Join condition: None

(37) Project [codegen id : 10]
Output [3]: [ss_net_profit#2, s_state#8, s_county#7]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#6, s_county#7, s_state#8]

(38) Expand [codegen id : 10]
Input [3]: [ss_net_profit#2, s_state#8, s_county#7]
Arguments: [[ss_net_profit#2, s_state#8, s_county#7, 0], [ss_net_profit#2, s_state#8, null, 1], [ss_net_profit#2, null, null, 3]], [ss_net_profit#2, s_state#78, s_county#79, spark_grouping_id#80]

(39) HashAggregate [codegen id : 10]
Input [4]: [ss_net_profit#2, s_state#78, s_county#79, spark_grouping_id#80]
Keys [3]: [s_state#78, s_county#79, spark_grouping_id#80]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#81]
Results [4]: [s_state#78, s_county#79, spark_grouping_id#80, sum#82]

(40) Exchange
Input [4]: [s_state#78, s_county#79, spark_grouping_id#80, sum#82]
Arguments: hashpartitioning(s_state#78, s_county#79, spark_grouping_id#80, 5), ENSURE_REQUIREMENTS, [id=#83]

(41) HashAggregate [codegen id : 11]
Input [4]: [s_state#78, s_county#79, spark_grouping_id#80, sum#82]
Keys [3]: [s_state#78, s_county#79, spark_grouping_id#80]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#84]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#84,17,2) AS total_sum#85, s_state#78, s_county#79, (cast((shiftright(spark_grouping_id#80, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#80, 0) & 1) as tinyint)) AS lochierarchy#86, (cast((shiftright(spark_grouping_id#80, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#80, 0) & 1) as tinyint)) AS _w1#87, CASE WHEN (cast((shiftright(spark_grouping_id#80, 0) & 1) as tinyint) = 0) THEN s_state#78 END AS _w2#88, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#84,17,2) AS _w3#89]

(42) Exchange
Input [7]: [total_sum#85, s_state#78, s_county#79, lochierarchy#86, _w1#87, _w2#88, _w3#89]
Arguments: hashpartitioning(_w1#87, _w2#88, 5), ENSURE_REQUIREMENTS, [id=#90]

(43) Sort [codegen id : 12]
Input [7]: [total_sum#85, s_state#78, s_county#79, lochierarchy#86, _w1#87, _w2#88, _w3#89]
Arguments: [_w1#87 ASC NULLS FIRST, _w2#88 ASC NULLS FIRST, _w3#89 DESC NULLS LAST], false, 0

(44) Window
Input [7]: [total_sum#85, s_state#78, s_county#79, lochierarchy#86, _w1#87, _w2#88, _w3#89]
Arguments: [rank(_w3#89) windowspecdefinition(_w1#87, _w2#88, _w3#89 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#91], [_w1#87, _w2#88], [_w3#89 DESC NULLS LAST]

(45) Project [codegen id : 13]
Output [5]: [total_sum#85, s_state#78, s_county#79, lochierarchy#86, rank_within_parent#91]
Input [8]: [total_sum#85, s_state#78, s_county#79, lochierarchy#86, _w1#87, _w2#88, _w3#89, rank_within_parent#91]

(46) TakeOrderedAndProject
Input [5]: [total_sum#85, s_state#78, s_county#79, lochierarchy#86, rank_within_parent#91]
Arguments: 100, [lochierarchy#86 DESC NULLS LAST, CASE WHEN (lochierarchy#86 = 0) THEN s_state#78 END ASC NULLS FIRST, rank_within_parent#91 ASC NULLS FIRST], [total_sum#85, s_state#78, s_county#79, lochierarchy#86, rank_within_parent#91]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (51)
+- * Project (50)
   +- * Filter (49)
      +- * ColumnarToRow (48)
         +- Scan parquet default.date_dim (47)


(47) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#92]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(48) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#92]

(49) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#92]
Condition : (((isnotnull(d_month_seq#92) AND (d_month_seq#92 >= 1200)) AND (d_month_seq#92 <= 1211)) AND isnotnull(d_date_sk#5))

(50) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#92]

(51) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#93]

Subquery:2 Hosting operator id = 12 Hosting Expression = ss_sold_date_sk#32 IN dynamicpruning#33
BroadcastExchange (56)
+- * HashAggregate (55)
   +- * Filter (54)
      +- * ColumnarToRow (53)
         +- Scan parquet default.date_dim (52)


(52) Scan parquet default.date_dim
Output [28]: [d_date_sk#67, d_date_id#94, d_date#95, d_month_seq#96, d_week_seq#97, d_quarter_seq#98, d_year#99, d_dow#100, d_moy#101, d_dom#102, d_qoy#103, d_fy_year#104, d_fy_quarter_seq#105, d_fy_week_seq#106, d_day_name#107, d_quarter_name#108, d_holiday#109, d_weekend#110, d_following_holiday#111, d_first_dom#112, d_last_dom#113, d_same_day_ly#114, d_same_day_lq#115, d_current_day#116, d_current_week#117, d_current_month#118, d_current_quarter#119, d_current_year#120]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(53) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#67, d_date_id#94, d_date#95, d_month_seq#96, d_week_seq#97, d_quarter_seq#98, d_year#99, d_dow#100, d_moy#101, d_dom#102, d_qoy#103, d_fy_year#104, d_fy_quarter_seq#105, d_fy_week_seq#106, d_day_name#107, d_quarter_name#108, d_holiday#109, d_weekend#110, d_following_holiday#111, d_first_dom#112, d_last_dom#113, d_same_day_ly#114, d_same_day_lq#115, d_current_day#116, d_current_week#117, d_current_month#118, d_current_quarter#119, d_current_year#120]

(54) Filter [codegen id : 1]
Input [28]: [d_date_sk#67, d_date_id#94, d_date#95, d_month_seq#96, d_week_seq#97, d_quarter_seq#98, d_year#99, d_dow#100, d_moy#101, d_dom#102, d_qoy#103, d_fy_year#104, d_fy_quarter_seq#105, d_fy_week_seq#106, d_day_name#107, d_quarter_name#108, d_holiday#109, d_weekend#110, d_following_holiday#111, d_first_dom#112, d_last_dom#113, d_same_day_ly#114, d_same_day_lq#115, d_current_day#116, d_current_week#117, d_current_month#118, d_current_quarter#119, d_current_year#120]
Condition : (((isnotnull(d_month_seq#96) AND (d_month_seq#96 >= 1200)) AND (d_month_seq#96 <= 1211)) AND isnotnull(d_date_sk#67))

(55) HashAggregate [codegen id : 1]
Input [28]: [d_date_sk#67, d_date_id#94, d_date#95, d_month_seq#96, d_week_seq#97, d_quarter_seq#98, d_year#99, d_dow#100, d_moy#101, d_dom#102, d_qoy#103, d_fy_year#104, d_fy_quarter_seq#105, d_fy_week_seq#106, d_day_name#107, d_quarter_name#108, d_holiday#109, d_weekend#110, d_following_holiday#111, d_first_dom#112, d_last_dom#113, d_same_day_ly#114, d_same_day_lq#115, d_current_day#116, d_current_week#117, d_current_month#118, d_current_quarter#119, d_current_year#120]
Keys [1]: [d_date_sk#67]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#67]

(56) BroadcastExchange
Input [1]: [d_date_sk#67]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#121]


