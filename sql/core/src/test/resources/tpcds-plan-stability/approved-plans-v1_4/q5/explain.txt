== Physical Plan ==
TakeOrderedAndProject (80)
+- * HashAggregate (79)
   +- Exchange (78)
      +- * HashAggregate (77)
         +- * Expand (76)
            +- Union (75)
               :- * HashAggregate (23)
               :  +- Exchange (22)
               :     +- * HashAggregate (21)
               :        +- * Project (20)
               :           +- * BroadcastHashJoin Inner BuildRight (19)
               :              :- * Project (13)
               :              :  +- * HashAggregate (12)
               :              :     +- * BroadcastHashJoin Inner BuildRight (11)
               :              :        :- Union (9)
               :              :        :  :- * Project (4)
               :              :        :  :  +- * Filter (3)
               :              :        :  :     +- * ColumnarToRow (2)
               :              :        :  :        +- Scan parquet default.store_sales (1)
               :              :        :  +- * Project (8)
               :              :        :     +- * Filter (7)
               :              :        :        +- * ColumnarToRow (6)
               :              :        :           +- Scan parquet default.store_returns (5)
               :              :        +- ReusedExchange (10)
               :              +- BroadcastExchange (18)
               :                 +- * HashAggregate (17)
               :                    +- * Filter (16)
               :                       +- * ColumnarToRow (15)
               :                          +- Scan parquet default.store (14)
               :- * HashAggregate (46)
               :  +- Exchange (45)
               :     +- * HashAggregate (44)
               :        +- * Project (43)
               :           +- * BroadcastHashJoin Inner BuildRight (42)
               :              :- * Project (36)
               :              :  +- * HashAggregate (35)
               :              :     +- * BroadcastHashJoin Inner BuildRight (34)
               :              :        :- Union (32)
               :              :        :  :- * Project (27)
               :              :        :  :  +- * Filter (26)
               :              :        :  :     +- * ColumnarToRow (25)
               :              :        :  :        +- Scan parquet default.catalog_sales (24)
               :              :        :  +- * Project (31)
               :              :        :     +- * Filter (30)
               :              :        :        +- * ColumnarToRow (29)
               :              :        :           +- Scan parquet default.catalog_returns (28)
               :              :        +- ReusedExchange (33)
               :              +- BroadcastExchange (41)
               :                 +- * HashAggregate (40)
               :                    +- * Filter (39)
               :                       +- * ColumnarToRow (38)
               :                          +- Scan parquet default.catalog_page (37)
               +- * HashAggregate (74)
                  +- Exchange (73)
                     +- * HashAggregate (72)
                        +- * Project (71)
                           +- * BroadcastHashJoin Inner BuildRight (70)
                              :- * Project (64)
                              :  +- * HashAggregate (63)
                              :     +- * BroadcastHashJoin Inner BuildRight (62)
                              :        :- Union (60)
                              :        :  :- * Project (50)
                              :        :  :  +- * Filter (49)
                              :        :  :     +- * ColumnarToRow (48)
                              :        :  :        +- Scan parquet default.web_sales (47)
                              :        :  +- * Project (59)
                              :        :     +- * BroadcastHashJoin Inner BuildLeft (58)
                              :        :        :- BroadcastExchange (53)
                              :        :        :  +- * ColumnarToRow (52)
                              :        :        :     +- Scan parquet default.web_returns (51)
                              :        :        +- * Project (57)
                              :        :           +- * Filter (56)
                              :        :              +- * ColumnarToRow (55)
                              :        :                 +- Scan parquet default.web_sales (54)
                              :        +- ReusedExchange (61)
                              +- BroadcastExchange (69)
                                 +- * HashAggregate (68)
                                    +- * Filter (67)
                                       +- * ColumnarToRow (66)
                                          +- Scan parquet default.web_site (65)


(1) Scan parquet default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(4) Project [codegen id : 1]
Output [6]: [ss_store_sk#1 AS store_sk#6, ss_sold_date_sk#4 AS date_sk#7, ss_ext_sales_price#2 AS sales_price#8, ss_net_profit#3 AS profit#9, 0.00 AS return_amt#10, 0.00 AS net_loss#11]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(5) Scan parquet default.store_returns
Output [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#15), dynamicpruningexpression(sr_returned_date_sk#15 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) ColumnarToRow [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(7) Filter [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Condition : isnotnull(sr_store_sk#12)

(8) Project [codegen id : 2]
Output [6]: [sr_store_sk#12 AS store_sk#16, sr_returned_date_sk#15 AS date_sk#17, 0.00 AS sales_price#18, 0.00 AS profit#19, sr_return_amt#13 AS return_amt#20, sr_net_loss#14 AS net_loss#21]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(9) Union

(10) ReusedExchange [Reuses operator id: 84]
Output [28]: [d_date_sk#22, d_date_id#23, d_date#24, d_month_seq#25, d_week_seq#26, d_quarter_seq#27, d_year#28, d_dow#29, d_moy#30, d_dom#31, d_qoy#32, d_fy_year#33, d_fy_quarter_seq#34, d_fy_week_seq#35, d_day_name#36, d_quarter_name#37, d_holiday#38, d_weekend#39, d_following_holiday#40, d_first_dom#41, d_last_dom#42, d_same_day_ly#43, d_same_day_lq#44, d_current_day#45, d_current_week#46, d_current_month#47, d_current_quarter#48, d_current_year#49]

(11) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [date_sk#7]
Right keys [1]: [d_date_sk#22]
Join condition: None

(12) HashAggregate [codegen id : 5]
Input [34]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, d_date_sk#22, d_date_id#23, d_date#24, d_month_seq#25, d_week_seq#26, d_quarter_seq#27, d_year#28, d_dow#29, d_moy#30, d_dom#31, d_qoy#32, d_fy_year#33, d_fy_quarter_seq#34, d_fy_week_seq#35, d_day_name#36, d_quarter_name#37, d_holiday#38, d_weekend#39, d_following_holiday#40, d_first_dom#41, d_last_dom#42, d_same_day_ly#43, d_same_day_lq#44, d_current_day#45, d_current_week#46, d_current_month#47, d_current_quarter#48, d_current_year#49]
Keys [1]: [store_sk#6]
Functions [4]: [partial_sum(UnscaledValue(sales_price#8)), partial_sum(UnscaledValue(profit#9)), partial_sum(UnscaledValue(return_amt#10)), partial_sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum#50, sum#51, sum#52, sum#53]
Results [5]: [store_sk#6, sum#54, sum#55, sum#56, sum#57]

(13) Project [codegen id : 5]
Output [5]: [store_sk#6, sum#54 AS _pushedexpression#58, sum#55 AS _pushedexpression#59, sum#56 AS _pushedexpression#60, sum#57 AS _pushedexpression#61]
Input [5]: [store_sk#6, sum#54, sum#55, sum#56, sum#57]

(14) Scan parquet default.store
Output [29]: [s_store_sk#62, s_store_id#63, s_rec_start_date#64, s_rec_end_date#65, s_closed_date_sk#66, s_store_name#67, s_number_employees#68, s_floor_space#69, s_hours#70, s_manager#71, s_market_id#72, s_geography_class#73, s_market_desc#74, s_market_manager#75, s_division_id#76, s_division_name#77, s_company_id#78, s_company_name#79, s_street_number#80, s_street_name#81, s_street_type#82, s_suite_number#83, s_city#84, s_county#85, s_state#86, s_zip#87, s_country#88, s_gmt_offset#89, s_tax_percentage#90]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(15) ColumnarToRow [codegen id : 4]
Input [29]: [s_store_sk#62, s_store_id#63, s_rec_start_date#64, s_rec_end_date#65, s_closed_date_sk#66, s_store_name#67, s_number_employees#68, s_floor_space#69, s_hours#70, s_manager#71, s_market_id#72, s_geography_class#73, s_market_desc#74, s_market_manager#75, s_division_id#76, s_division_name#77, s_company_id#78, s_company_name#79, s_street_number#80, s_street_name#81, s_street_type#82, s_suite_number#83, s_city#84, s_county#85, s_state#86, s_zip#87, s_country#88, s_gmt_offset#89, s_tax_percentage#90]

(16) Filter [codegen id : 4]
Input [29]: [s_store_sk#62, s_store_id#63, s_rec_start_date#64, s_rec_end_date#65, s_closed_date_sk#66, s_store_name#67, s_number_employees#68, s_floor_space#69, s_hours#70, s_manager#71, s_market_id#72, s_geography_class#73, s_market_desc#74, s_market_manager#75, s_division_id#76, s_division_name#77, s_company_id#78, s_company_name#79, s_street_number#80, s_street_name#81, s_street_type#82, s_suite_number#83, s_city#84, s_county#85, s_state#86, s_zip#87, s_country#88, s_gmt_offset#89, s_tax_percentage#90]
Condition : isnotnull(s_store_sk#62)

(17) HashAggregate [codegen id : 4]
Input [29]: [s_store_sk#62, s_store_id#63, s_rec_start_date#64, s_rec_end_date#65, s_closed_date_sk#66, s_store_name#67, s_number_employees#68, s_floor_space#69, s_hours#70, s_manager#71, s_market_id#72, s_geography_class#73, s_market_desc#74, s_market_manager#75, s_division_id#76, s_division_name#77, s_company_id#78, s_company_name#79, s_street_number#80, s_street_name#81, s_street_type#82, s_suite_number#83, s_city#84, s_county#85, s_state#86, s_zip#87, s_country#88, s_gmt_offset#89, s_tax_percentage#90]
Keys [2]: [s_store_sk#62, s_store_id#63]
Functions: []
Aggregate Attributes: []
Results [2]: [s_store_sk#62, s_store_id#63]

(18) BroadcastExchange
Input [2]: [s_store_sk#62, s_store_id#63]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91]

(19) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [store_sk#6]
Right keys [1]: [s_store_sk#62]
Join condition: None

(20) Project [codegen id : 5]
Output [5]: [_pushedexpression#92, _pushedexpression#93, _pushedexpression#94, _pushedexpression#95, s_store_id#63]
Input [7]: [store_sk#6, _pushedexpression#58, _pushedexpression#59, _pushedexpression#60, _pushedexpression#61, s_store_sk#62, s_store_id#63]

(21) HashAggregate [codegen id : 5]
Input [5]: [_pushedexpression#92, _pushedexpression#93, _pushedexpression#94, _pushedexpression#95, s_store_id#63]
Keys [1]: [s_store_id#63]
Functions [4]: [partial_sum(_pushedexpression#92), partial_sum(_pushedexpression#94), partial_sum(_pushedexpression#93), partial_sum(_pushedexpression#95)]
Aggregate Attributes [8]: [sum#96, isEmpty#97, sum#98, isEmpty#99, sum#100, isEmpty#101, sum#102, isEmpty#103]
Results [9]: [s_store_id#63, sum#104, isEmpty#105, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]

(22) Exchange
Input [9]: [s_store_id#63, sum#104, isEmpty#105, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]
Arguments: hashpartitioning(s_store_id#63, 5), ENSURE_REQUIREMENTS, [id=#112]

(23) HashAggregate [codegen id : 6]
Input [9]: [s_store_id#63, sum#104, isEmpty#105, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]
Keys [1]: [s_store_id#63]
Functions [4]: [sum(_pushedexpression#92), sum(_pushedexpression#94), sum(_pushedexpression#93), sum(_pushedexpression#95)]
Aggregate Attributes [4]: [sum(_pushedexpression#92)#113, sum(_pushedexpression#94)#114, sum(_pushedexpression#93)#115, sum(_pushedexpression#95)#116]
Results [5]: [cast(sum(_pushedexpression#92)#113 as decimal(17,2)) AS sales#117, cast(sum(_pushedexpression#94)#114 as decimal(17,2)) AS returns#118, CheckOverflow((promote_precision(cast(cast(sum(_pushedexpression#93)#115 as decimal(17,2)) as decimal(18,2))) - promote_precision(cast(cast(sum(_pushedexpression#95)#116 as decimal(17,2)) as decimal(18,2)))), DecimalType(18,2)) AS profit#119, store channel AS channel#120, concat(store, s_store_id#63) AS id#121]

(24) Scan parquet default.catalog_sales
Output [4]: [cs_catalog_page_sk#122, cs_ext_sales_price#123, cs_net_profit#124, cs_sold_date_sk#125]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#125), dynamicpruningexpression(cs_sold_date_sk#125 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(25) ColumnarToRow [codegen id : 7]
Input [4]: [cs_catalog_page_sk#122, cs_ext_sales_price#123, cs_net_profit#124, cs_sold_date_sk#125]

(26) Filter [codegen id : 7]
Input [4]: [cs_catalog_page_sk#122, cs_ext_sales_price#123, cs_net_profit#124, cs_sold_date_sk#125]
Condition : isnotnull(cs_catalog_page_sk#122)

(27) Project [codegen id : 7]
Output [6]: [cs_catalog_page_sk#122 AS page_sk#126, cs_sold_date_sk#125 AS date_sk#127, cs_ext_sales_price#123 AS sales_price#128, cs_net_profit#124 AS profit#129, 0.00 AS return_amt#130, 0.00 AS net_loss#131]
Input [4]: [cs_catalog_page_sk#122, cs_ext_sales_price#123, cs_net_profit#124, cs_sold_date_sk#125]

(28) Scan parquet default.catalog_returns
Output [4]: [cr_catalog_page_sk#132, cr_return_amount#133, cr_net_loss#134, cr_returned_date_sk#135]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#135), dynamicpruningexpression(cr_returned_date_sk#135 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(29) ColumnarToRow [codegen id : 8]
Input [4]: [cr_catalog_page_sk#132, cr_return_amount#133, cr_net_loss#134, cr_returned_date_sk#135]

(30) Filter [codegen id : 8]
Input [4]: [cr_catalog_page_sk#132, cr_return_amount#133, cr_net_loss#134, cr_returned_date_sk#135]
Condition : isnotnull(cr_catalog_page_sk#132)

(31) Project [codegen id : 8]
Output [6]: [cr_catalog_page_sk#132 AS page_sk#136, cr_returned_date_sk#135 AS date_sk#137, 0.00 AS sales_price#138, 0.00 AS profit#139, cr_return_amount#133 AS return_amt#140, cr_net_loss#134 AS net_loss#141]
Input [4]: [cr_catalog_page_sk#132, cr_return_amount#133, cr_net_loss#134, cr_returned_date_sk#135]

(32) Union

(33) ReusedExchange [Reuses operator id: 84]
Output [28]: [d_date_sk#142, d_date_id#143, d_date#144, d_month_seq#145, d_week_seq#146, d_quarter_seq#147, d_year#148, d_dow#149, d_moy#150, d_dom#151, d_qoy#152, d_fy_year#153, d_fy_quarter_seq#154, d_fy_week_seq#155, d_day_name#156, d_quarter_name#157, d_holiday#158, d_weekend#159, d_following_holiday#160, d_first_dom#161, d_last_dom#162, d_same_day_ly#163, d_same_day_lq#164, d_current_day#165, d_current_week#166, d_current_month#167, d_current_quarter#168, d_current_year#169]

(34) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [date_sk#127]
Right keys [1]: [d_date_sk#142]
Join condition: None

(35) HashAggregate [codegen id : 11]
Input [34]: [page_sk#126, date_sk#127, sales_price#128, profit#129, return_amt#130, net_loss#131, d_date_sk#142, d_date_id#143, d_date#144, d_month_seq#145, d_week_seq#146, d_quarter_seq#147, d_year#148, d_dow#149, d_moy#150, d_dom#151, d_qoy#152, d_fy_year#153, d_fy_quarter_seq#154, d_fy_week_seq#155, d_day_name#156, d_quarter_name#157, d_holiday#158, d_weekend#159, d_following_holiday#160, d_first_dom#161, d_last_dom#162, d_same_day_ly#163, d_same_day_lq#164, d_current_day#165, d_current_week#166, d_current_month#167, d_current_quarter#168, d_current_year#169]
Keys [1]: [page_sk#126]
Functions [4]: [partial_sum(UnscaledValue(sales_price#128)), partial_sum(UnscaledValue(profit#129)), partial_sum(UnscaledValue(return_amt#130)), partial_sum(UnscaledValue(net_loss#131))]
Aggregate Attributes [4]: [sum#170, sum#171, sum#172, sum#173]
Results [5]: [page_sk#126, sum#174, sum#175, sum#176, sum#177]

(36) Project [codegen id : 11]
Output [5]: [page_sk#126, sum#174 AS _pushedexpression#178, sum#175 AS _pushedexpression#179, sum#176 AS _pushedexpression#180, sum#177 AS _pushedexpression#181]
Input [5]: [page_sk#126, sum#174, sum#175, sum#176, sum#177]

(37) Scan parquet default.catalog_page
Output [9]: [cp_catalog_page_sk#182, cp_catalog_page_id#183, cp_start_date_sk#184, cp_end_date_sk#185, cp_department#186, cp_catalog_number#187, cp_catalog_page_number#188, cp_description#189, cp_type#190]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string,cp_start_date_sk:int,cp_end_date_sk:int,cp_department:string,cp_catalog_number:int,cp_catalog_page_number:int,cp_description:string,cp_type:string>

(38) ColumnarToRow [codegen id : 10]
Input [9]: [cp_catalog_page_sk#182, cp_catalog_page_id#183, cp_start_date_sk#184, cp_end_date_sk#185, cp_department#186, cp_catalog_number#187, cp_catalog_page_number#188, cp_description#189, cp_type#190]

(39) Filter [codegen id : 10]
Input [9]: [cp_catalog_page_sk#182, cp_catalog_page_id#183, cp_start_date_sk#184, cp_end_date_sk#185, cp_department#186, cp_catalog_number#187, cp_catalog_page_number#188, cp_description#189, cp_type#190]
Condition : isnotnull(cp_catalog_page_sk#182)

(40) HashAggregate [codegen id : 10]
Input [9]: [cp_catalog_page_sk#182, cp_catalog_page_id#183, cp_start_date_sk#184, cp_end_date_sk#185, cp_department#186, cp_catalog_number#187, cp_catalog_page_number#188, cp_description#189, cp_type#190]
Keys [2]: [cp_catalog_page_sk#182, cp_catalog_page_id#183]
Functions: []
Aggregate Attributes: []
Results [2]: [cp_catalog_page_sk#182, cp_catalog_page_id#183]

(41) BroadcastExchange
Input [2]: [cp_catalog_page_sk#182, cp_catalog_page_id#183]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#191]

(42) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [page_sk#126]
Right keys [1]: [cp_catalog_page_sk#182]
Join condition: None

(43) Project [codegen id : 11]
Output [5]: [_pushedexpression#192, _pushedexpression#193, _pushedexpression#194, _pushedexpression#195, cp_catalog_page_id#183]
Input [7]: [page_sk#126, _pushedexpression#178, _pushedexpression#179, _pushedexpression#180, _pushedexpression#181, cp_catalog_page_sk#182, cp_catalog_page_id#183]

(44) HashAggregate [codegen id : 11]
Input [5]: [_pushedexpression#192, _pushedexpression#193, _pushedexpression#194, _pushedexpression#195, cp_catalog_page_id#183]
Keys [1]: [cp_catalog_page_id#183]
Functions [4]: [partial_sum(_pushedexpression#192), partial_sum(_pushedexpression#194), partial_sum(_pushedexpression#193), partial_sum(_pushedexpression#195)]
Aggregate Attributes [8]: [sum#196, isEmpty#197, sum#198, isEmpty#199, sum#200, isEmpty#201, sum#202, isEmpty#203]
Results [9]: [cp_catalog_page_id#183, sum#204, isEmpty#205, sum#206, isEmpty#207, sum#208, isEmpty#209, sum#210, isEmpty#211]

(45) Exchange
Input [9]: [cp_catalog_page_id#183, sum#204, isEmpty#205, sum#206, isEmpty#207, sum#208, isEmpty#209, sum#210, isEmpty#211]
Arguments: hashpartitioning(cp_catalog_page_id#183, 5), ENSURE_REQUIREMENTS, [id=#212]

(46) HashAggregate [codegen id : 12]
Input [9]: [cp_catalog_page_id#183, sum#204, isEmpty#205, sum#206, isEmpty#207, sum#208, isEmpty#209, sum#210, isEmpty#211]
Keys [1]: [cp_catalog_page_id#183]
Functions [4]: [sum(_pushedexpression#192), sum(_pushedexpression#194), sum(_pushedexpression#193), sum(_pushedexpression#195)]
Aggregate Attributes [4]: [sum(_pushedexpression#192)#213, sum(_pushedexpression#194)#214, sum(_pushedexpression#193)#215, sum(_pushedexpression#195)#216]
Results [5]: [cast(sum(_pushedexpression#192)#213 as decimal(17,2)) AS sales#217, cast(sum(_pushedexpression#194)#214 as decimal(17,2)) AS returns#218, CheckOverflow((promote_precision(cast(cast(sum(_pushedexpression#193)#215 as decimal(17,2)) as decimal(18,2))) - promote_precision(cast(cast(sum(_pushedexpression#195)#216 as decimal(17,2)) as decimal(18,2)))), DecimalType(18,2)) AS profit#219, catalog channel AS channel#220, concat(catalog_page, cp_catalog_page_id#183) AS id#221]

(47) Scan parquet default.web_sales
Output [4]: [ws_web_site_sk#222, ws_ext_sales_price#223, ws_net_profit#224, ws_sold_date_sk#225]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#225), dynamicpruningexpression(ws_sold_date_sk#225 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(48) ColumnarToRow [codegen id : 13]
Input [4]: [ws_web_site_sk#222, ws_ext_sales_price#223, ws_net_profit#224, ws_sold_date_sk#225]

(49) Filter [codegen id : 13]
Input [4]: [ws_web_site_sk#222, ws_ext_sales_price#223, ws_net_profit#224, ws_sold_date_sk#225]
Condition : isnotnull(ws_web_site_sk#222)

(50) Project [codegen id : 13]
Output [6]: [ws_web_site_sk#222 AS wsr_web_site_sk#226, ws_sold_date_sk#225 AS date_sk#227, ws_ext_sales_price#223 AS sales_price#228, ws_net_profit#224 AS profit#229, 0.00 AS return_amt#230, 0.00 AS net_loss#231]
Input [4]: [ws_web_site_sk#222, ws_ext_sales_price#223, ws_net_profit#224, ws_sold_date_sk#225]

(51) Scan parquet default.web_returns
Output [5]: [wr_item_sk#232, wr_order_number#233, wr_return_amt#234, wr_net_loss#235, wr_returned_date_sk#236]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#236), dynamicpruningexpression(wr_returned_date_sk#236 IN dynamicpruning#5)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(52) ColumnarToRow [codegen id : 14]
Input [5]: [wr_item_sk#232, wr_order_number#233, wr_return_amt#234, wr_net_loss#235, wr_returned_date_sk#236]

(53) BroadcastExchange
Input [5]: [wr_item_sk#232, wr_order_number#233, wr_return_amt#234, wr_net_loss#235, wr_returned_date_sk#236]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, true] as bigint), 32) | (cast(input[1, int, true] as bigint) & 4294967295))),false), [id=#237]

(54) Scan parquet default.web_sales
Output [4]: [ws_item_sk#238, ws_web_site_sk#239, ws_order_number#240, ws_sold_date_sk#241]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(55) ColumnarToRow
Input [4]: [ws_item_sk#238, ws_web_site_sk#239, ws_order_number#240, ws_sold_date_sk#241]

(56) Filter
Input [4]: [ws_item_sk#238, ws_web_site_sk#239, ws_order_number#240, ws_sold_date_sk#241]
Condition : ((isnotnull(ws_item_sk#238) AND isnotnull(ws_order_number#240)) AND isnotnull(ws_web_site_sk#239))

(57) Project
Output [3]: [ws_item_sk#238, ws_web_site_sk#239, ws_order_number#240]
Input [4]: [ws_item_sk#238, ws_web_site_sk#239, ws_order_number#240, ws_sold_date_sk#241]

(58) BroadcastHashJoin [codegen id : 15]
Left keys [2]: [wr_item_sk#232, wr_order_number#233]
Right keys [2]: [ws_item_sk#238, ws_order_number#240]
Join condition: None

(59) Project [codegen id : 15]
Output [6]: [ws_web_site_sk#239 AS wsr_web_site_sk#242, wr_returned_date_sk#236 AS date_sk#243, 0.00 AS sales_price#244, 0.00 AS profit#245, wr_return_amt#234 AS return_amt#246, wr_net_loss#235 AS net_loss#247]
Input [8]: [wr_item_sk#232, wr_order_number#233, wr_return_amt#234, wr_net_loss#235, wr_returned_date_sk#236, ws_item_sk#238, ws_web_site_sk#239, ws_order_number#240]

(60) Union

(61) ReusedExchange [Reuses operator id: 84]
Output [28]: [d_date_sk#248, d_date_id#249, d_date#250, d_month_seq#251, d_week_seq#252, d_quarter_seq#253, d_year#254, d_dow#255, d_moy#256, d_dom#257, d_qoy#258, d_fy_year#259, d_fy_quarter_seq#260, d_fy_week_seq#261, d_day_name#262, d_quarter_name#263, d_holiday#264, d_weekend#265, d_following_holiday#266, d_first_dom#267, d_last_dom#268, d_same_day_ly#269, d_same_day_lq#270, d_current_day#271, d_current_week#272, d_current_month#273, d_current_quarter#274, d_current_year#275]

(62) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [date_sk#227]
Right keys [1]: [d_date_sk#248]
Join condition: None

(63) HashAggregate [codegen id : 18]
Input [34]: [wsr_web_site_sk#226, date_sk#227, sales_price#228, profit#229, return_amt#230, net_loss#231, d_date_sk#248, d_date_id#249, d_date#250, d_month_seq#251, d_week_seq#252, d_quarter_seq#253, d_year#254, d_dow#255, d_moy#256, d_dom#257, d_qoy#258, d_fy_year#259, d_fy_quarter_seq#260, d_fy_week_seq#261, d_day_name#262, d_quarter_name#263, d_holiday#264, d_weekend#265, d_following_holiday#266, d_first_dom#267, d_last_dom#268, d_same_day_ly#269, d_same_day_lq#270, d_current_day#271, d_current_week#272, d_current_month#273, d_current_quarter#274, d_current_year#275]
Keys [1]: [wsr_web_site_sk#226]
Functions [4]: [partial_sum(UnscaledValue(sales_price#228)), partial_sum(UnscaledValue(profit#229)), partial_sum(UnscaledValue(return_amt#230)), partial_sum(UnscaledValue(net_loss#231))]
Aggregate Attributes [4]: [sum#276, sum#277, sum#278, sum#279]
Results [5]: [wsr_web_site_sk#226, sum#280, sum#281, sum#282, sum#283]

(64) Project [codegen id : 18]
Output [5]: [wsr_web_site_sk#226, sum#280 AS _pushedexpression#284, sum#281 AS _pushedexpression#285, sum#282 AS _pushedexpression#286, sum#283 AS _pushedexpression#287]
Input [5]: [wsr_web_site_sk#226, sum#280, sum#281, sum#282, sum#283]

(65) Scan parquet default.web_site
Output [26]: [web_site_sk#288, web_site_id#289, web_rec_start_date#290, web_rec_end_date#291, web_name#292, web_open_date_sk#293, web_close_date_sk#294, web_class#295, web_manager#296, web_mkt_id#297, web_mkt_class#298, web_mkt_desc#299, web_market_manager#300, web_company_id#301, web_company_name#302, web_street_number#303, web_street_name#304, web_street_type#305, web_suite_number#306, web_city#307, web_county#308, web_state#309, web_zip#310, web_country#311, web_gmt_offset#312, web_tax_percentage#313]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string,web_rec_start_date:date,web_rec_end_date:date,web_name:string,web_open_date_sk:int,web_close_date_sk:int,web_class:string,web_manager:string,web_mkt_id:int,web_mkt_class:string,web_mkt_desc:string,web_market_manager:string,web_company_id:int,web_company_name:string,web_street_number:string,web_street_name:string,web_street_type:string,web_suite_number:string,web_city:string,web_county:string,web_state:string,web_zip:string,web_country:string,web_gmt_offset:decimal(5,2),web_tax_percentage:decimal(5,2)>

(66) ColumnarToRow [codegen id : 17]
Input [26]: [web_site_sk#288, web_site_id#289, web_rec_start_date#290, web_rec_end_date#291, web_name#292, web_open_date_sk#293, web_close_date_sk#294, web_class#295, web_manager#296, web_mkt_id#297, web_mkt_class#298, web_mkt_desc#299, web_market_manager#300, web_company_id#301, web_company_name#302, web_street_number#303, web_street_name#304, web_street_type#305, web_suite_number#306, web_city#307, web_county#308, web_state#309, web_zip#310, web_country#311, web_gmt_offset#312, web_tax_percentage#313]

(67) Filter [codegen id : 17]
Input [26]: [web_site_sk#288, web_site_id#289, web_rec_start_date#290, web_rec_end_date#291, web_name#292, web_open_date_sk#293, web_close_date_sk#294, web_class#295, web_manager#296, web_mkt_id#297, web_mkt_class#298, web_mkt_desc#299, web_market_manager#300, web_company_id#301, web_company_name#302, web_street_number#303, web_street_name#304, web_street_type#305, web_suite_number#306, web_city#307, web_county#308, web_state#309, web_zip#310, web_country#311, web_gmt_offset#312, web_tax_percentage#313]
Condition : isnotnull(web_site_sk#288)

(68) HashAggregate [codegen id : 17]
Input [26]: [web_site_sk#288, web_site_id#289, web_rec_start_date#290, web_rec_end_date#291, web_name#292, web_open_date_sk#293, web_close_date_sk#294, web_class#295, web_manager#296, web_mkt_id#297, web_mkt_class#298, web_mkt_desc#299, web_market_manager#300, web_company_id#301, web_company_name#302, web_street_number#303, web_street_name#304, web_street_type#305, web_suite_number#306, web_city#307, web_county#308, web_state#309, web_zip#310, web_country#311, web_gmt_offset#312, web_tax_percentage#313]
Keys [2]: [web_site_sk#288, web_site_id#289]
Functions: []
Aggregate Attributes: []
Results [2]: [web_site_sk#288, web_site_id#289]

(69) BroadcastExchange
Input [2]: [web_site_sk#288, web_site_id#289]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#314]

(70) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [wsr_web_site_sk#226]
Right keys [1]: [web_site_sk#288]
Join condition: None

(71) Project [codegen id : 18]
Output [5]: [_pushedexpression#315, _pushedexpression#316, _pushedexpression#317, _pushedexpression#318, web_site_id#289]
Input [7]: [wsr_web_site_sk#226, _pushedexpression#284, _pushedexpression#285, _pushedexpression#286, _pushedexpression#287, web_site_sk#288, web_site_id#289]

(72) HashAggregate [codegen id : 18]
Input [5]: [_pushedexpression#315, _pushedexpression#316, _pushedexpression#317, _pushedexpression#318, web_site_id#289]
Keys [1]: [web_site_id#289]
Functions [4]: [partial_sum(_pushedexpression#315), partial_sum(_pushedexpression#317), partial_sum(_pushedexpression#316), partial_sum(_pushedexpression#318)]
Aggregate Attributes [8]: [sum#319, isEmpty#320, sum#321, isEmpty#322, sum#323, isEmpty#324, sum#325, isEmpty#326]
Results [9]: [web_site_id#289, sum#327, isEmpty#328, sum#329, isEmpty#330, sum#331, isEmpty#332, sum#333, isEmpty#334]

(73) Exchange
Input [9]: [web_site_id#289, sum#327, isEmpty#328, sum#329, isEmpty#330, sum#331, isEmpty#332, sum#333, isEmpty#334]
Arguments: hashpartitioning(web_site_id#289, 5), ENSURE_REQUIREMENTS, [id=#335]

(74) HashAggregate [codegen id : 19]
Input [9]: [web_site_id#289, sum#327, isEmpty#328, sum#329, isEmpty#330, sum#331, isEmpty#332, sum#333, isEmpty#334]
Keys [1]: [web_site_id#289]
Functions [4]: [sum(_pushedexpression#315), sum(_pushedexpression#317), sum(_pushedexpression#316), sum(_pushedexpression#318)]
Aggregate Attributes [4]: [sum(_pushedexpression#315)#336, sum(_pushedexpression#317)#337, sum(_pushedexpression#316)#338, sum(_pushedexpression#318)#339]
Results [5]: [cast(sum(_pushedexpression#315)#336 as decimal(17,2)) AS sales#340, cast(sum(_pushedexpression#317)#337 as decimal(17,2)) AS returns#341, CheckOverflow((promote_precision(cast(cast(sum(_pushedexpression#316)#338 as decimal(17,2)) as decimal(18,2))) - promote_precision(cast(cast(sum(_pushedexpression#318)#339 as decimal(17,2)) as decimal(18,2)))), DecimalType(18,2)) AS profit#342, web channel AS channel#343, concat(web_site, web_site_id#289) AS id#344]

(75) Union

(76) Expand [codegen id : 20]
Input [5]: [sales#117, returns#118, profit#119, channel#120, id#121]
Arguments: [[sales#117, returns#118, profit#119, channel#120, id#121, 0], [sales#117, returns#118, profit#119, channel#120, null, 1], [sales#117, returns#118, profit#119, null, null, 3]], [sales#117, returns#118, profit#119, channel#345, id#346, spark_grouping_id#347]

(77) HashAggregate [codegen id : 20]
Input [6]: [sales#117, returns#118, profit#119, channel#345, id#346, spark_grouping_id#347]
Keys [3]: [channel#345, id#346, spark_grouping_id#347]
Functions [3]: [partial_sum(sales#117), partial_sum(returns#118), partial_sum(profit#119)]
Aggregate Attributes [6]: [sum#348, isEmpty#349, sum#350, isEmpty#351, sum#352, isEmpty#353]
Results [9]: [channel#345, id#346, spark_grouping_id#347, sum#354, isEmpty#355, sum#356, isEmpty#357, sum#358, isEmpty#359]

(78) Exchange
Input [9]: [channel#345, id#346, spark_grouping_id#347, sum#354, isEmpty#355, sum#356, isEmpty#357, sum#358, isEmpty#359]
Arguments: hashpartitioning(channel#345, id#346, spark_grouping_id#347, 5), ENSURE_REQUIREMENTS, [id=#360]

(79) HashAggregate [codegen id : 21]
Input [9]: [channel#345, id#346, spark_grouping_id#347, sum#354, isEmpty#355, sum#356, isEmpty#357, sum#358, isEmpty#359]
Keys [3]: [channel#345, id#346, spark_grouping_id#347]
Functions [3]: [sum(sales#117), sum(returns#118), sum(profit#119)]
Aggregate Attributes [3]: [sum(sales#117)#361, sum(returns#118)#362, sum(profit#119)#363]
Results [5]: [channel#345, id#346, sum(sales#117)#361 AS sales#364, sum(returns#118)#362 AS returns#365, sum(profit#119)#363 AS profit#366]

(80) TakeOrderedAndProject
Input [5]: [channel#345, id#346, sales#364, returns#365, profit#366]
Arguments: 100, [channel#345 ASC NULLS FIRST, id#346 ASC NULLS FIRST], [channel#345, id#346, sales#364, returns#365, profit#366]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (84)
+- * Filter (83)
   +- * ColumnarToRow (82)
      +- Scan parquet default.date_dim (81)


(81) Scan parquet default.date_dim
Output [28]: [d_date_sk#22, d_date_id#23, d_date#24, d_month_seq#25, d_week_seq#26, d_quarter_seq#27, d_year#28, d_dow#29, d_moy#30, d_dom#31, d_qoy#32, d_fy_year#33, d_fy_quarter_seq#34, d_fy_week_seq#35, d_day_name#36, d_quarter_name#37, d_holiday#38, d_weekend#39, d_following_holiday#40, d_first_dom#41, d_last_dom#42, d_same_day_ly#43, d_same_day_lq#44, d_current_day#45, d_current_week#46, d_current_month#47, d_current_quarter#48, d_current_year#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-23), LessThanOrEqual(d_date,2000-09-06), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(82) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#22, d_date_id#23, d_date#24, d_month_seq#25, d_week_seq#26, d_quarter_seq#27, d_year#28, d_dow#29, d_moy#30, d_dom#31, d_qoy#32, d_fy_year#33, d_fy_quarter_seq#34, d_fy_week_seq#35, d_day_name#36, d_quarter_name#37, d_holiday#38, d_weekend#39, d_following_holiday#40, d_first_dom#41, d_last_dom#42, d_same_day_ly#43, d_same_day_lq#44, d_current_day#45, d_current_week#46, d_current_month#47, d_current_quarter#48, d_current_year#49]

(83) Filter [codegen id : 1]
Input [28]: [d_date_sk#22, d_date_id#23, d_date#24, d_month_seq#25, d_week_seq#26, d_quarter_seq#27, d_year#28, d_dow#29, d_moy#30, d_dom#31, d_qoy#32, d_fy_year#33, d_fy_quarter_seq#34, d_fy_week_seq#35, d_day_name#36, d_quarter_name#37, d_holiday#38, d_weekend#39, d_following_holiday#40, d_first_dom#41, d_last_dom#42, d_same_day_ly#43, d_same_day_lq#44, d_current_day#45, d_current_week#46, d_current_month#47, d_current_quarter#48, d_current_year#49]
Condition : (((isnotnull(d_date#24) AND (d_date#24 >= 2000-08-23)) AND (d_date#24 <= 2000-09-06)) AND isnotnull(d_date_sk#22))

(84) BroadcastExchange
Input [28]: [d_date_sk#22, d_date_id#23, d_date#24, d_month_seq#25, d_week_seq#26, d_quarter_seq#27, d_year#28, d_dow#29, d_moy#30, d_dom#31, d_qoy#32, d_fy_year#33, d_fy_quarter_seq#34, d_fy_week_seq#35, d_day_name#36, d_quarter_name#37, d_holiday#38, d_weekend#39, d_following_holiday#40, d_first_dom#41, d_last_dom#42, d_same_day_ly#43, d_same_day_lq#44, d_current_day#45, d_current_week#46, d_current_month#47, d_current_quarter#48, d_current_year#49]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#367]

Subquery:2 Hosting operator id = 5 Hosting Expression = sr_returned_date_sk#15 IN dynamicpruning#5

Subquery:3 Hosting operator id = 24 Hosting Expression = cs_sold_date_sk#125 IN dynamicpruning#5

Subquery:4 Hosting operator id = 28 Hosting Expression = cr_returned_date_sk#135 IN dynamicpruning#5

Subquery:5 Hosting operator id = 47 Hosting Expression = ws_sold_date_sk#225 IN dynamicpruning#5

Subquery:6 Hosting operator id = 51 Hosting Expression = wr_returned_date_sk#236 IN dynamicpruning#5


