== Physical Plan ==
* HashAggregate (94)
+- Exchange (93)
   +- * HashAggregate (92)
      +- Union (91)
         :- * Project (53)
         :  +- * BroadcastHashJoin Inner BuildRight (52)
         :     :- * Project (50)
         :     :  +- * SortMergeJoin LeftSemi (49)
         :     :     :- * Sort (29)
         :     :     :  +- Exchange (28)
         :     :     :     +- * Project (27)
         :     :     :        +- * SortMergeJoin LeftSemi (26)
         :     :     :           :- * Sort (4)
         :     :     :           :  +- Exchange (3)
         :     :     :           :     +- * ColumnarToRow (2)
         :     :     :           :        +- Scan parquet default.catalog_sales (1)
         :     :     :           +- * Sort (25)
         :     :     :              +- * HashAggregate (24)
         :     :     :                 +- * Project (23)
         :     :     :                    +- * Filter (22)
         :     :     :                       +- * HashAggregate (21)
         :     :     :                          +- * HashAggregate (20)
         :     :     :                             +- * Project (19)
         :     :     :                                +- * SortMergeJoin Inner (18)
         :     :     :                                   :- * Sort (12)
         :     :     :                                   :  +- Exchange (11)
         :     :     :                                   :     +- * Project (10)
         :     :     :                                   :        +- * BroadcastHashJoin Inner BuildRight (9)
         :     :     :                                   :           :- * Filter (7)
         :     :     :                                   :           :  +- * ColumnarToRow (6)
         :     :     :                                   :           :     +- Scan parquet default.store_sales (5)
         :     :     :                                   :           +- ReusedExchange (8)
         :     :     :                                   +- * Sort (17)
         :     :     :                                      +- Exchange (16)
         :     :     :                                         +- * Filter (15)
         :     :     :                                            +- * ColumnarToRow (14)
         :     :     :                                               +- Scan parquet default.item (13)
         :     :     +- * Sort (48)
         :     :        +- * HashAggregate (47)
         :     :           +- * Project (46)
         :     :              +- * Filter (45)
         :     :                 +- * HashAggregate (44)
         :     :                    +- * HashAggregate (43)
         :     :                       +- * Project (42)
         :     :                          +- * SortMergeJoin Inner (41)
         :     :                             :- * Sort (35)
         :     :                             :  +- Exchange (34)
         :     :                             :     +- * Project (33)
         :     :                             :        +- * Filter (32)
         :     :                             :           +- * ColumnarToRow (31)
         :     :                             :              +- Scan parquet default.store_sales (30)
         :     :                             +- * Sort (40)
         :     :                                +- Exchange (39)
         :     :                                   +- * Filter (38)
         :     :                                      +- * ColumnarToRow (37)
         :     :                                         +- Scan parquet default.customer (36)
         :     +- ReusedExchange (51)
         +- * Project (90)
            +- * BroadcastHashJoin Inner BuildRight (89)
               :- * Project (87)
               :  +- * SortMergeJoin LeftSemi (86)
               :     :- * Sort (73)
               :     :  +- Exchange (72)
               :     :     +- * Project (71)
               :     :        +- * SortMergeJoin LeftSemi (70)
               :     :           :- * Sort (57)
               :     :           :  +- Exchange (56)
               :     :           :     +- * ColumnarToRow (55)
               :     :           :        +- Scan parquet default.web_sales (54)
               :     :           +- * Sort (69)
               :     :              +- * HashAggregate (68)
               :     :                 +- * Project (67)
               :     :                    +- * Filter (66)
               :     :                       +- * HashAggregate (65)
               :     :                          +- * HashAggregate (64)
               :     :                             +- * Project (63)
               :     :                                +- * SortMergeJoin Inner (62)
               :     :                                   :- * Sort (59)
               :     :                                   :  +- ReusedExchange (58)
               :     :                                   +- * Sort (61)
               :     :                                      +- ReusedExchange (60)
               :     +- * Sort (85)
               :        +- * HashAggregate (84)
               :           +- * Project (83)
               :              +- * Filter (82)
               :                 +- * HashAggregate (81)
               :                    +- * HashAggregate (80)
               :                       +- * Project (79)
               :                          +- * SortMergeJoin Inner (78)
               :                             :- * Sort (75)
               :                             :  +- ReusedExchange (74)
               :                             +- * Sort (77)
               :                                +- ReusedExchange (76)
               +- ReusedExchange (88)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(4) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(5) Scan parquet default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(6) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(7) Filter [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Condition : isnotnull(ss_item_sk#8)

(8) ReusedExchange [Reuses operator id: 104]
Output [2]: [d_date_sk#11, d_date#12]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(10) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#12]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#11, d_date#12]

(11) Exchange
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: hashpartitioning(ss_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#13]

(12) Sort [codegen id : 5]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(13) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(14) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]

(15) Filter [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(16) Exchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#16]

(17) Sort [codegen id : 7]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(19) Project [codegen id : 8]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#17]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(20) HashAggregate [codegen id : 8]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#17]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]

(21) HashAggregate [codegen id : 8]
Input [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(22) Filter [codegen id : 8]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(23) Project [codegen id : 8]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(24) HashAggregate [codegen id : 8]
Input [1]: [item_sk#21]
Keys [1]: [item_sk#21]
Functions: []
Aggregate Attributes: []
Results [1]: [item_sk#21]

(25) Sort [codegen id : 8]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#21]
Join condition: None

(27) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(28) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(29) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(30) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(31) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(32) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(33) Project [codegen id : 11]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(34) Exchange
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: hashpartitioning(ss_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#28]

(35) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(36) Scan parquet default.customer
Output [1]: [c_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(37) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#29]

(38) Filter [codegen id : 13]
Input [1]: [c_customer_sk#29]
Condition : isnotnull(c_customer_sk#29)

(39) Exchange
Input [1]: [c_customer_sk#29]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(40) Sort [codegen id : 14]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(42) Project [codegen id : 15]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(43) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#31, isEmpty#32]
Results [3]: [c_customer_sk#29, sum#33, isEmpty#34]

(44) HashAggregate [codegen id : 15]
Input [3]: [c_customer_sk#29, sum#33, isEmpty#34]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(45) Filter [codegen id : 15]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(46) Project [codegen id : 15]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(47) HashAggregate [codegen id : 15]
Input [1]: [c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions: []
Aggregate Attributes: []
Results [1]: [c_customer_sk#29]

(48) Sort [codegen id : 15]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(50) Project [codegen id : 17]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(51) ReusedExchange [Reuses operator id: 99]
Output [1]: [d_date_sk#39]

(52) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#39]
Join condition: None

(53) Project [codegen id : 17]
Output [1]: [CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)) AS sales#40]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#39]

(54) Scan parquet default.web_sales
Output [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#45), dynamicpruningexpression(ws_sold_date_sk#45 IN dynamicpruning#6)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(55) ColumnarToRow [codegen id : 18]
Input [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]

(56) Exchange
Input [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Arguments: hashpartitioning(ws_item_sk#41, 5), ENSURE_REQUIREMENTS, [id=#46]

(57) Sort [codegen id : 19]
Input [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Arguments: [ws_item_sk#41 ASC NULLS FIRST], false, 0

(58) ReusedExchange [Reuses operator id: 11]
Output [2]: [ss_item_sk#8, d_date#12]

(59) Sort [codegen id : 22]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(60) ReusedExchange [Reuses operator id: 16]
Output [2]: [i_item_sk#14, i_item_desc#15]

(61) Sort [codegen id : 24]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(63) Project [codegen id : 25]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#47]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(64) HashAggregate [codegen id : 25]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#47]
Keys [3]: [_groupingexpression#47, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#47, i_item_sk#14, d_date#12, count#19]

(65) HashAggregate [codegen id : 25]
Input [4]: [_groupingexpression#47, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#47, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(66) Filter [codegen id : 25]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(67) Project [codegen id : 25]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(68) HashAggregate [codegen id : 25]
Input [1]: [item_sk#21]
Keys [1]: [item_sk#21]
Functions: []
Aggregate Attributes: []
Results [1]: [item_sk#21]

(69) Sort [codegen id : 25]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(70) SortMergeJoin [codegen id : 26]
Left keys [1]: [ws_item_sk#41]
Right keys [1]: [item_sk#21]
Join condition: None

(71) Project [codegen id : 26]
Output [4]: [ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Input [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]

(72) Exchange
Input [4]: [ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Arguments: hashpartitioning(ws_bill_customer_sk#42, 5), ENSURE_REQUIREMENTS, [id=#48]

(73) Sort [codegen id : 27]
Input [4]: [ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Arguments: [ws_bill_customer_sk#42 ASC NULLS FIRST], false, 0

(74) ReusedExchange [Reuses operator id: 34]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(75) Sort [codegen id : 29]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(76) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#29]

(77) Sort [codegen id : 31]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 32]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(79) Project [codegen id : 32]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(80) HashAggregate [codegen id : 32]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#49, isEmpty#50]
Results [3]: [c_customer_sk#29, sum#51, isEmpty#52]

(81) HashAggregate [codegen id : 32]
Input [3]: [c_customer_sk#29, sum#51, isEmpty#52]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(82) Filter [codegen id : 32]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(83) Project [codegen id : 32]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(84) HashAggregate [codegen id : 32]
Input [1]: [c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions: []
Aggregate Attributes: []
Results [1]: [c_customer_sk#29]

(85) Sort [codegen id : 32]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(86) SortMergeJoin [codegen id : 34]
Left keys [1]: [ws_bill_customer_sk#42]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(87) Project [codegen id : 34]
Output [3]: [ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Input [4]: [ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]

(88) ReusedExchange [Reuses operator id: 99]
Output [1]: [d_date_sk#53]

(89) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ws_sold_date_sk#45]
Right keys [1]: [d_date_sk#53]
Join condition: None

(90) Project [codegen id : 34]
Output [1]: [CheckOverflow((promote_precision(cast(ws_quantity#43 as decimal(12,2))) * promote_precision(cast(ws_list_price#44 as decimal(12,2)))), DecimalType(18,2)) AS sales#54]
Input [4]: [ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45, d_date_sk#53]

(91) Union

(92) HashAggregate [codegen id : 35]
Input [1]: [sales#40]
Keys: []
Functions [1]: [partial_sum(sales#40)]
Aggregate Attributes [2]: [sum#55, isEmpty#56]
Results [2]: [sum#57, isEmpty#58]

(93) Exchange
Input [2]: [sum#57, isEmpty#58]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#59]

(94) HashAggregate [codegen id : 36]
Input [2]: [sum#57, isEmpty#58]
Keys: []
Functions [1]: [sum(sales#40)]
Aggregate Attributes [1]: [sum(sales#40)#60]
Results [1]: [sum(sales#40)#60 AS sum(sales)#61]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (99)
+- * Project (98)
   +- * Filter (97)
      +- * ColumnarToRow (96)
         +- Scan parquet default.date_dim (95)


(95) Scan parquet default.date_dim
Output [3]: [d_date_sk#39, d_year#62, d_moy#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(96) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#62, d_moy#63]

(97) Filter [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#62, d_moy#63]
Condition : ((((isnotnull(d_year#62) AND isnotnull(d_moy#63)) AND (d_year#62 = 2000)) AND (d_moy#63 = 2)) AND isnotnull(d_date_sk#39))

(98) Project [codegen id : 1]
Output [1]: [d_date_sk#39]
Input [3]: [d_date_sk#39, d_year#62, d_moy#63]

(99) BroadcastExchange
Input [1]: [d_date_sk#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64]

Subquery:2 Hosting operator id = 5 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (104)
+- * Project (103)
   +- * Filter (102)
      +- * ColumnarToRow (101)
         +- Scan parquet default.date_dim (100)


(100) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_date#12, d_year#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(101) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#65]

(102) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#65]
Condition : (d_year#65 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#11))

(103) Project [codegen id : 1]
Output [2]: [d_date_sk#11, d_date#12]
Input [3]: [d_date_sk#11, d_date#12, d_year#65]

(104) BroadcastExchange
Input [2]: [d_date_sk#11, d_date#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#66]

Subquery:3 Hosting operator id = 45 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (121)
+- Exchange (120)
   +- * HashAggregate (119)
      +- * HashAggregate (118)
         +- * HashAggregate (117)
            +- * Project (116)
               +- * SortMergeJoin Inner (115)
                  :- * Sort (112)
                  :  +- Exchange (111)
                  :     +- * Project (110)
                  :        +- * BroadcastHashJoin Inner BuildRight (109)
                  :           :- * Filter (107)
                  :           :  +- * ColumnarToRow (106)
                  :           :     +- Scan parquet default.store_sales (105)
                  :           +- ReusedExchange (108)
                  +- * Sort (114)
                     +- ReusedExchange (113)


(105) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#67, ss_quantity#68, ss_sales_price#69, ss_sold_date_sk#70]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#70), dynamicpruningexpression(ss_sold_date_sk#70 IN dynamicpruning#71)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(106) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#67, ss_quantity#68, ss_sales_price#69, ss_sold_date_sk#70]

(107) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#67, ss_quantity#68, ss_sales_price#69, ss_sold_date_sk#70]
Condition : isnotnull(ss_customer_sk#67)

(108) ReusedExchange [Reuses operator id: 126]
Output [1]: [d_date_sk#72]

(109) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#70]
Right keys [1]: [d_date_sk#72]
Join condition: None

(110) Project [codegen id : 2]
Output [3]: [ss_customer_sk#67, ss_quantity#68, ss_sales_price#69]
Input [5]: [ss_customer_sk#67, ss_quantity#68, ss_sales_price#69, ss_sold_date_sk#70, d_date_sk#72]

(111) Exchange
Input [3]: [ss_customer_sk#67, ss_quantity#68, ss_sales_price#69]
Arguments: hashpartitioning(ss_customer_sk#67, 5), ENSURE_REQUIREMENTS, [id=#73]

(112) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#67, ss_quantity#68, ss_sales_price#69]
Arguments: [ss_customer_sk#67 ASC NULLS FIRST], false, 0

(113) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#74]

(114) Sort [codegen id : 5]
Input [1]: [c_customer_sk#74]
Arguments: [c_customer_sk#74 ASC NULLS FIRST], false, 0

(115) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#67]
Right keys [1]: [c_customer_sk#74]
Join condition: None

(116) Project [codegen id : 6]
Output [3]: [ss_quantity#68, ss_sales_price#69, c_customer_sk#74]
Input [4]: [ss_customer_sk#67, ss_quantity#68, ss_sales_price#69, c_customer_sk#74]

(117) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#68, ss_sales_price#69, c_customer_sk#74]
Keys [1]: [c_customer_sk#74]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#68 as decimal(12,2))) * promote_precision(cast(ss_sales_price#69 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#75, isEmpty#76]
Results [3]: [c_customer_sk#74, sum#77, isEmpty#78]

(118) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#74, sum#77, isEmpty#78]
Keys [1]: [c_customer_sk#74]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#68 as decimal(12,2))) * promote_precision(cast(ss_sales_price#69 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#68 as decimal(12,2))) * promote_precision(cast(ss_sales_price#69 as decimal(12,2)))), DecimalType(18,2)))#79]
Results [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#68 as decimal(12,2))) * promote_precision(cast(ss_sales_price#69 as decimal(12,2)))), DecimalType(18,2)))#79 AS csales#80]

(119) HashAggregate [codegen id : 6]
Input [1]: [csales#80]
Keys: []
Functions [1]: [partial_max(csales#80)]
Aggregate Attributes [1]: [max#81]
Results [1]: [max#82]

(120) Exchange
Input [1]: [max#82]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#83]

(121) HashAggregate [codegen id : 7]
Input [1]: [max#82]
Keys: []
Functions [1]: [max(csales#80)]
Aggregate Attributes [1]: [max(csales#80)#84]
Results [1]: [max(csales#80)#84 AS tpcds_cmax#85]

Subquery:4 Hosting operator id = 105 Hosting Expression = ss_sold_date_sk#70 IN dynamicpruning#71
BroadcastExchange (126)
+- * Project (125)
   +- * Filter (124)
      +- * ColumnarToRow (123)
         +- Scan parquet default.date_dim (122)


(122) Scan parquet default.date_dim
Output [2]: [d_date_sk#72, d_year#86]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(123) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#72, d_year#86]

(124) Filter [codegen id : 1]
Input [2]: [d_date_sk#72, d_year#86]
Condition : (d_year#86 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#72))

(125) Project [codegen id : 1]
Output [1]: [d_date_sk#72]
Input [2]: [d_date_sk#72, d_year#86]

(126) BroadcastExchange
Input [1]: [d_date_sk#72]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#87]

Subquery:5 Hosting operator id = 54 Hosting Expression = ws_sold_date_sk#45 IN dynamicpruning#6

Subquery:6 Hosting operator id = 82 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


