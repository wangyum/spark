== Physical Plan ==
* Sort (46)
+- Exchange (45)
   +- * HashAggregate (44)
      +- Exchange (43)
         +- * HashAggregate (42)
            +- * Project (41)
               +- * BroadcastHashJoin Inner BuildRight (40)
                  :- * Project (34)
                  :  +- HashAggregate (33)
                  :     +- Project (32)
                  :        +- SortMergeJoin Inner (31)
                  :           :- * Sort (12)
                  :           :  +- Exchange (11)
                  :           :     +- * BroadcastHashJoin Inner BuildRight (10)
                  :           :        :- * BroadcastHashJoin Inner BuildRight (5)
                  :           :        :  :- * Filter (3)
                  :           :        :  :  +- * ColumnarToRow (2)
                  :           :        :  :     +- Scan parquet default.catalog_returns (1)
                  :           :        :  +- ReusedExchange (4)
                  :           :        +- BroadcastExchange (9)
                  :           :           +- * Filter (8)
                  :           :              +- * ColumnarToRow (7)
                  :           :                 +- Scan parquet default.call_center (6)
                  :           +- * Sort (30)
                  :              +- Exchange (29)
                  :                 +- * SortMergeJoin Inner (28)
                  :                    :- * Sort (22)
                  :                    :  +- Exchange (21)
                  :                    :     +- * BroadcastHashJoin Inner BuildRight (20)
                  :                    :        :- * Filter (15)
                  :                    :        :  +- * ColumnarToRow (14)
                  :                    :        :     +- Scan parquet default.customer (13)
                  :                    :        +- BroadcastExchange (19)
                  :                    :           +- * Filter (18)
                  :                    :              +- * ColumnarToRow (17)
                  :                    :                 +- Scan parquet default.customer_demographics (16)
                  :                    +- * Sort (27)
                  :                       +- Exchange (26)
                  :                          +- * Filter (25)
                  :                             +- * ColumnarToRow (24)
                  :                                +- Scan parquet default.customer_address (23)
                  +- BroadcastExchange (39)
                     +- * HashAggregate (38)
                        +- * Filter (37)
                           +- * ColumnarToRow (36)
                              +- Scan parquet default.household_demographics (35)


(1) Scan parquet default.catalog_returns
Output [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#27), dynamicpruningexpression(cr_returned_date_sk#27 IN dynamicpruning#28)]
PushedFilters: [IsNotNull(cr_call_center_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returned_time_sk:int,cr_item_sk:int,cr_refunded_customer_sk:int,cr_refunded_cdemo_sk:int,cr_refunded_hdemo_sk:int,cr_refunded_addr_sk:int,cr_returning_customer_sk:int,cr_returning_cdemo_sk:int,cr_returning_hdemo_sk:int,cr_returning_addr_sk:int,cr_call_center_sk:int,cr_catalog_page_sk:int,cr_ship_mode_sk:int,cr_warehouse_sk:int,cr_reason_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2),cr_return_tax:decimal(7,2),cr_return_amt_inc_tax:decimal(7,2),cr_fee:decimal(7,2),cr_return_ship_cost:decimal(7,2),cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2),cr_net_loss:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]

(3) Filter [codegen id : 3]
Input [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]
Condition : (isnotnull(cr_call_center_sk#11) AND isnotnull(cr_returning_customer_sk#7))

(4) ReusedExchange [Reuses operator id: 50]
Output [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cr_returned_date_sk#27]
Right keys [1]: [d_date_sk#29]
Join condition: None

(6) Scan parquet default.call_center
Output [31]: [cc_call_center_sk#57, cc_call_center_id#58, cc_rec_start_date#59, cc_rec_end_date#60, cc_closed_date_sk#61, cc_open_date_sk#62, cc_name#63, cc_class#64, cc_employees#65, cc_sq_ft#66, cc_hours#67, cc_manager#68, cc_mkt_id#69, cc_mkt_class#70, cc_mkt_desc#71, cc_market_manager#72, cc_division#73, cc_division_name#74, cc_company#75, cc_company_name#76, cc_street_number#77, cc_street_name#78, cc_street_type#79, cc_suite_number#80, cc_city#81, cc_county#82, cc_state#83, cc_zip#84, cc_country#85, cc_gmt_offset#86, cc_tax_percentage#87]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_call_center_id:string,cc_rec_start_date:date,cc_rec_end_date:date,cc_closed_date_sk:int,cc_open_date_sk:int,cc_name:string,cc_class:string,cc_employees:int,cc_sq_ft:int,cc_hours:string,cc_manager:string,cc_mkt_id:int,cc_mkt_class:string,cc_mkt_desc:string,cc_market_manager:string,cc_division:int,cc_division_name:string,cc_company:int,cc_company_name:string,cc_street_number:string,cc_street_name:string,cc_street_type:string,cc_suite_number:string,cc_city:string,cc_county:string,cc_state:string,cc_zip:string,cc_country:string,cc_gmt_offset:decimal(5,2),cc_tax_percentage:decimal(5,2)>

(7) ColumnarToRow [codegen id : 2]
Input [31]: [cc_call_center_sk#57, cc_call_center_id#58, cc_rec_start_date#59, cc_rec_end_date#60, cc_closed_date_sk#61, cc_open_date_sk#62, cc_name#63, cc_class#64, cc_employees#65, cc_sq_ft#66, cc_hours#67, cc_manager#68, cc_mkt_id#69, cc_mkt_class#70, cc_mkt_desc#71, cc_market_manager#72, cc_division#73, cc_division_name#74, cc_company#75, cc_company_name#76, cc_street_number#77, cc_street_name#78, cc_street_type#79, cc_suite_number#80, cc_city#81, cc_county#82, cc_state#83, cc_zip#84, cc_country#85, cc_gmt_offset#86, cc_tax_percentage#87]

(8) Filter [codegen id : 2]
Input [31]: [cc_call_center_sk#57, cc_call_center_id#58, cc_rec_start_date#59, cc_rec_end_date#60, cc_closed_date_sk#61, cc_open_date_sk#62, cc_name#63, cc_class#64, cc_employees#65, cc_sq_ft#66, cc_hours#67, cc_manager#68, cc_mkt_id#69, cc_mkt_class#70, cc_mkt_desc#71, cc_market_manager#72, cc_division#73, cc_division_name#74, cc_company#75, cc_company_name#76, cc_street_number#77, cc_street_name#78, cc_street_type#79, cc_suite_number#80, cc_city#81, cc_county#82, cc_state#83, cc_zip#84, cc_country#85, cc_gmt_offset#86, cc_tax_percentage#87]
Condition : isnotnull(cc_call_center_sk#57)

(9) BroadcastExchange
Input [31]: [cc_call_center_sk#57, cc_call_center_id#58, cc_rec_start_date#59, cc_rec_end_date#60, cc_closed_date_sk#61, cc_open_date_sk#62, cc_name#63, cc_class#64, cc_employees#65, cc_sq_ft#66, cc_hours#67, cc_manager#68, cc_mkt_id#69, cc_mkt_class#70, cc_mkt_desc#71, cc_market_manager#72, cc_division#73, cc_division_name#74, cc_company#75, cc_company_name#76, cc_street_number#77, cc_street_name#78, cc_street_type#79, cc_suite_number#80, cc_city#81, cc_county#82, cc_state#83, cc_zip#84, cc_country#85, cc_gmt_offset#86, cc_tax_percentage#87]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#88]

(10) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cr_call_center_sk#11]
Right keys [1]: [cc_call_center_sk#57]
Join condition: None

(11) Exchange
Input [86]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27, d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56, cc_call_center_sk#57, cc_call_center_id#58, cc_rec_start_date#59, cc_rec_end_date#60, cc_closed_date_sk#61, cc_open_date_sk#62, cc_name#63, cc_class#64, cc_employees#65, cc_sq_ft#66, cc_hours#67, cc_manager#68, cc_mkt_id#69, cc_mkt_class#70, cc_mkt_desc#71, cc_market_manager#72, cc_division#73, cc_division_name#74, cc_company#75, cc_company_name#76, cc_street_number#77, cc_street_name#78, cc_street_type#79, cc_suite_number#80, cc_city#81, cc_county#82, cc_state#83, cc_zip#84, cc_country#85, cc_gmt_offset#86, cc_tax_percentage#87]
Arguments: hashpartitioning(cr_returning_customer_sk#7, 5), ENSURE_REQUIREMENTS, [id=#89]

(12) Sort [codegen id : 4]
Input [86]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27, d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56, cc_call_center_sk#57, cc_call_center_id#58, cc_rec_start_date#59, cc_rec_end_date#60, cc_closed_date_sk#61, cc_open_date_sk#62, cc_name#63, cc_class#64, cc_employees#65, cc_sq_ft#66, cc_hours#67, cc_manager#68, cc_mkt_id#69, cc_mkt_class#70, cc_mkt_desc#71, cc_market_manager#72, cc_division#73, cc_division_name#74, cc_company#75, cc_company_name#76, cc_street_number#77, cc_street_name#78, cc_street_type#79, cc_suite_number#80, cc_city#81, cc_county#82, cc_state#83, cc_zip#84, cc_country#85, cc_gmt_offset#86, cc_tax_percentage#87]
Arguments: [cr_returning_customer_sk#7 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer
Output [18]: [c_customer_sk#90, c_customer_id#91, c_current_cdemo_sk#92, c_current_hdemo_sk#93, c_current_addr_sk#94, c_first_shipto_date_sk#95, c_first_sales_date_sk#96, c_salutation#97, c_first_name#98, c_last_name#99, c_preferred_cust_flag#100, c_birth_day#101, c_birth_month#102, c_birth_year#103, c_birth_country#104, c_login#105, c_email_address#106, c_last_review_date#107]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_hdemo_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(14) ColumnarToRow [codegen id : 6]
Input [18]: [c_customer_sk#90, c_customer_id#91, c_current_cdemo_sk#92, c_current_hdemo_sk#93, c_current_addr_sk#94, c_first_shipto_date_sk#95, c_first_sales_date_sk#96, c_salutation#97, c_first_name#98, c_last_name#99, c_preferred_cust_flag#100, c_birth_day#101, c_birth_month#102, c_birth_year#103, c_birth_country#104, c_login#105, c_email_address#106, c_last_review_date#107]

(15) Filter [codegen id : 6]
Input [18]: [c_customer_sk#90, c_customer_id#91, c_current_cdemo_sk#92, c_current_hdemo_sk#93, c_current_addr_sk#94, c_first_shipto_date_sk#95, c_first_sales_date_sk#96, c_salutation#97, c_first_name#98, c_last_name#99, c_preferred_cust_flag#100, c_birth_day#101, c_birth_month#102, c_birth_year#103, c_birth_country#104, c_login#105, c_email_address#106, c_last_review_date#107]
Condition : (((isnotnull(c_customer_sk#90) AND isnotnull(c_current_hdemo_sk#93)) AND isnotnull(c_current_addr_sk#94)) AND isnotnull(c_current_cdemo_sk#92))

(16) Scan parquet default.customer_demographics
Output [9]: [cd_demo_sk#108, cd_gender#109, cd_marital_status#110, cd_education_status#111, cd_purchase_estimate#112, cd_credit_rating#113, cd_dep_count#114, cd_dep_employed_count#115, cd_dep_college_count#116]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Unknown             )),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,Advanced Degree     ))), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(17) ColumnarToRow [codegen id : 5]
Input [9]: [cd_demo_sk#108, cd_gender#109, cd_marital_status#110, cd_education_status#111, cd_purchase_estimate#112, cd_credit_rating#113, cd_dep_count#114, cd_dep_employed_count#115, cd_dep_college_count#116]

(18) Filter [codegen id : 5]
Input [9]: [cd_demo_sk#108, cd_gender#109, cd_marital_status#110, cd_education_status#111, cd_purchase_estimate#112, cd_credit_rating#113, cd_dep_count#114, cd_dep_employed_count#115, cd_dep_college_count#116]
Condition : ((((cd_marital_status#110 = M) AND (cd_education_status#111 = Unknown             )) OR ((cd_marital_status#110 = W) AND (cd_education_status#111 = Advanced Degree     ))) AND isnotnull(cd_demo_sk#108))

(19) BroadcastExchange
Input [9]: [cd_demo_sk#108, cd_gender#109, cd_marital_status#110, cd_education_status#111, cd_purchase_estimate#112, cd_credit_rating#113, cd_dep_count#114, cd_dep_employed_count#115, cd_dep_college_count#116]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#117]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_current_cdemo_sk#92]
Right keys [1]: [cd_demo_sk#108]
Join condition: None

(21) Exchange
Input [27]: [c_customer_sk#90, c_customer_id#91, c_current_cdemo_sk#92, c_current_hdemo_sk#93, c_current_addr_sk#94, c_first_shipto_date_sk#95, c_first_sales_date_sk#96, c_salutation#97, c_first_name#98, c_last_name#99, c_preferred_cust_flag#100, c_birth_day#101, c_birth_month#102, c_birth_year#103, c_birth_country#104, c_login#105, c_email_address#106, c_last_review_date#107, cd_demo_sk#108, cd_gender#109, cd_marital_status#110, cd_education_status#111, cd_purchase_estimate#112, cd_credit_rating#113, cd_dep_count#114, cd_dep_employed_count#115, cd_dep_college_count#116]
Arguments: hashpartitioning(c_current_addr_sk#94, 5), ENSURE_REQUIREMENTS, [id=#118]

(22) Sort [codegen id : 7]
Input [27]: [c_customer_sk#90, c_customer_id#91, c_current_cdemo_sk#92, c_current_hdemo_sk#93, c_current_addr_sk#94, c_first_shipto_date_sk#95, c_first_sales_date_sk#96, c_salutation#97, c_first_name#98, c_last_name#99, c_preferred_cust_flag#100, c_birth_day#101, c_birth_month#102, c_birth_year#103, c_birth_country#104, c_login#105, c_email_address#106, c_last_review_date#107, cd_demo_sk#108, cd_gender#109, cd_marital_status#110, cd_education_status#111, cd_purchase_estimate#112, cd_credit_rating#113, cd_dep_count#114, cd_dep_employed_count#115, cd_dep_college_count#116]
Arguments: [c_current_addr_sk#94 ASC NULLS FIRST], false, 0

(23) Scan parquet default.customer_address
Output [13]: [ca_address_sk#119, ca_address_id#120, ca_street_number#121, ca_street_name#122, ca_street_type#123, ca_suite_number#124, ca_city#125, ca_county#126, ca_state#127, ca_zip#128, ca_country#129, ca_gmt_offset#130, ca_location_type#131]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-7.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(24) ColumnarToRow [codegen id : 8]
Input [13]: [ca_address_sk#119, ca_address_id#120, ca_street_number#121, ca_street_name#122, ca_street_type#123, ca_suite_number#124, ca_city#125, ca_county#126, ca_state#127, ca_zip#128, ca_country#129, ca_gmt_offset#130, ca_location_type#131]

(25) Filter [codegen id : 8]
Input [13]: [ca_address_sk#119, ca_address_id#120, ca_street_number#121, ca_street_name#122, ca_street_type#123, ca_suite_number#124, ca_city#125, ca_county#126, ca_state#127, ca_zip#128, ca_country#129, ca_gmt_offset#130, ca_location_type#131]
Condition : ((isnotnull(ca_gmt_offset#130) AND (ca_gmt_offset#130 = -7.00)) AND isnotnull(ca_address_sk#119))

(26) Exchange
Input [13]: [ca_address_sk#119, ca_address_id#120, ca_street_number#121, ca_street_name#122, ca_street_type#123, ca_suite_number#124, ca_city#125, ca_county#126, ca_state#127, ca_zip#128, ca_country#129, ca_gmt_offset#130, ca_location_type#131]
Arguments: hashpartitioning(ca_address_sk#119, 5), ENSURE_REQUIREMENTS, [id=#132]

(27) Sort [codegen id : 9]
Input [13]: [ca_address_sk#119, ca_address_id#120, ca_street_number#121, ca_street_name#122, ca_street_type#123, ca_suite_number#124, ca_city#125, ca_county#126, ca_state#127, ca_zip#128, ca_country#129, ca_gmt_offset#130, ca_location_type#131]
Arguments: [ca_address_sk#119 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_current_addr_sk#94]
Right keys [1]: [ca_address_sk#119]
Join condition: None

(29) Exchange
Input [40]: [c_customer_sk#90, c_customer_id#91, c_current_cdemo_sk#92, c_current_hdemo_sk#93, c_current_addr_sk#94, c_first_shipto_date_sk#95, c_first_sales_date_sk#96, c_salutation#97, c_first_name#98, c_last_name#99, c_preferred_cust_flag#100, c_birth_day#101, c_birth_month#102, c_birth_year#103, c_birth_country#104, c_login#105, c_email_address#106, c_last_review_date#107, cd_demo_sk#108, cd_gender#109, cd_marital_status#110, cd_education_status#111, cd_purchase_estimate#112, cd_credit_rating#113, cd_dep_count#114, cd_dep_employed_count#115, cd_dep_college_count#116, ca_address_sk#119, ca_address_id#120, ca_street_number#121, ca_street_name#122, ca_street_type#123, ca_suite_number#124, ca_city#125, ca_county#126, ca_state#127, ca_zip#128, ca_country#129, ca_gmt_offset#130, ca_location_type#131]
Arguments: hashpartitioning(c_customer_sk#90, 5), ENSURE_REQUIREMENTS, [id=#133]

(30) Sort [codegen id : 11]
Input [40]: [c_customer_sk#90, c_customer_id#91, c_current_cdemo_sk#92, c_current_hdemo_sk#93, c_current_addr_sk#94, c_first_shipto_date_sk#95, c_first_sales_date_sk#96, c_salutation#97, c_first_name#98, c_last_name#99, c_preferred_cust_flag#100, c_birth_day#101, c_birth_month#102, c_birth_year#103, c_birth_country#104, c_login#105, c_email_address#106, c_last_review_date#107, cd_demo_sk#108, cd_gender#109, cd_marital_status#110, cd_education_status#111, cd_purchase_estimate#112, cd_credit_rating#113, cd_dep_count#114, cd_dep_employed_count#115, cd_dep_college_count#116, ca_address_sk#119, ca_address_id#120, ca_street_number#121, ca_street_name#122, ca_street_type#123, ca_suite_number#124, ca_city#125, ca_county#126, ca_state#127, ca_zip#128, ca_country#129, ca_gmt_offset#130, ca_location_type#131]
Arguments: [c_customer_sk#90 ASC NULLS FIRST], false, 0

(31) SortMergeJoin
Left keys [1]: [cr_returning_customer_sk#7]
Right keys [1]: [c_customer_sk#90]
Join condition: None

(32) Project
Output [126]: [cc_call_center_sk#57, cc_call_center_id#58, cc_rec_start_date#59, cc_rec_end_date#60, cc_closed_date_sk#61, cc_open_date_sk#62, cc_name#63, cc_class#64, cc_employees#65, cc_sq_ft#66, cc_hours#67, cc_manager#68, cc_mkt_id#69, cc_mkt_class#70, cc_mkt_desc#71, cc_market_manager#72, cc_division#73, cc_division_name#74, cc_company#75, cc_company_name#76, cc_street_number#77, cc_street_name#78, cc_street_type#79, cc_suite_number#80, cc_city#81, cc_county#82, cc_state#83, cc_zip#84, cc_country#85, cc_gmt_offset#86, cc_tax_percentage#87, cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27, d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56, c_customer_sk#90, c_customer_id#91, c_current_cdemo_sk#92, c_current_hdemo_sk#93, c_current_addr_sk#94, c_first_shipto_date_sk#95, c_first_sales_date_sk#96, c_salutation#97, c_first_name#98, c_last_name#99, c_preferred_cust_flag#100, c_birth_day#101, c_birth_month#102, c_birth_year#103, c_birth_country#104, c_login#105, c_email_address#106, c_last_review_date#107, ca_address_sk#119, ca_address_id#120, ca_street_number#121, ca_street_name#122, ca_street_type#123, ca_suite_number#124, ca_city#125, ca_county#126, ca_state#127, ca_zip#128, ca_country#129, ca_gmt_offset#130, ca_location_type#131, cd_demo_sk#108, cd_gender#109, cd_marital_status#110, cd_education_status#111, cd_purchase_estimate#112, cd_credit_rating#113, cd_dep_count#114, cd_dep_employed_count#115, cd_dep_college_count#116]
Input [126]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27, d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56, cc_call_center_sk#57, cc_call_center_id#58, cc_rec_start_date#59, cc_rec_end_date#60, cc_closed_date_sk#61, cc_open_date_sk#62, cc_name#63, cc_class#64, cc_employees#65, cc_sq_ft#66, cc_hours#67, cc_manager#68, cc_mkt_id#69, cc_mkt_class#70, cc_mkt_desc#71, cc_market_manager#72, cc_division#73, cc_division_name#74, cc_company#75, cc_company_name#76, cc_street_number#77, cc_street_name#78, cc_street_type#79, cc_suite_number#80, cc_city#81, cc_county#82, cc_state#83, cc_zip#84, cc_country#85, cc_gmt_offset#86, cc_tax_percentage#87, c_customer_sk#90, c_customer_id#91, c_current_cdemo_sk#92, c_current_hdemo_sk#93, c_current_addr_sk#94, c_first_shipto_date_sk#95, c_first_sales_date_sk#96, c_salutation#97, c_first_name#98, c_last_name#99, c_preferred_cust_flag#100, c_birth_day#101, c_birth_month#102, c_birth_year#103, c_birth_country#104, c_login#105, c_email_address#106, c_last_review_date#107, cd_demo_sk#108, cd_gender#109, cd_marital_status#110, cd_education_status#111, cd_purchase_estimate#112, cd_credit_rating#113, cd_dep_count#114, cd_dep_employed_count#115, cd_dep_college_count#116, ca_address_sk#119, ca_address_id#120, ca_street_number#121, ca_street_name#122, ca_street_type#123, ca_suite_number#124, ca_city#125, ca_county#126, ca_state#127, ca_zip#128, ca_country#129, ca_gmt_offset#130, ca_location_type#131]

(33) HashAggregate
Input [126]: [cc_call_center_sk#57, cc_call_center_id#58, cc_rec_start_date#59, cc_rec_end_date#60, cc_closed_date_sk#61, cc_open_date_sk#62, cc_name#63, cc_class#64, cc_employees#65, cc_sq_ft#66, cc_hours#67, cc_manager#68, cc_mkt_id#69, cc_mkt_class#70, cc_mkt_desc#71, cc_market_manager#72, cc_division#73, cc_division_name#74, cc_company#75, cc_company_name#76, cc_street_number#77, cc_street_name#78, cc_street_type#79, cc_suite_number#80, cc_city#81, cc_county#82, cc_state#83, cc_zip#84, cc_country#85, cc_gmt_offset#86, cc_tax_percentage#87, cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27, d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56, c_customer_sk#90, c_customer_id#91, c_current_cdemo_sk#92, c_current_hdemo_sk#93, c_current_addr_sk#94, c_first_shipto_date_sk#95, c_first_sales_date_sk#96, c_salutation#97, c_first_name#98, c_last_name#99, c_preferred_cust_flag#100, c_birth_day#101, c_birth_month#102, c_birth_year#103, c_birth_country#104, c_login#105, c_email_address#106, c_last_review_date#107, ca_address_sk#119, ca_address_id#120, ca_street_number#121, ca_street_name#122, ca_street_type#123, ca_suite_number#124, ca_city#125, ca_county#126, ca_state#127, ca_zip#128, ca_country#129, ca_gmt_offset#130, ca_location_type#131, cd_demo_sk#108, cd_gender#109, cd_marital_status#110, cd_education_status#111, cd_purchase_estimate#112, cd_credit_rating#113, cd_dep_count#114, cd_dep_employed_count#115, cd_dep_college_count#116]
Keys [6]: [c_current_hdemo_sk#93, cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111]
Functions [1]: [partial_sum(UnscaledValue(cr_net_loss#26))]
Aggregate Attributes [1]: [sum#134]
Results [7]: [c_current_hdemo_sk#93, cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111, sum#135]

(34) Project [codegen id : 13]
Output [7]: [c_current_hdemo_sk#93, cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111, sum#135 AS _pushedexpression#136]
Input [7]: [c_current_hdemo_sk#93, cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111, sum#135]

(35) Scan parquet default.household_demographics
Output [5]: [hd_demo_sk#137, hd_income_band_sk#138, hd_buy_potential#139, hd_dep_count#140, hd_vehicle_count#141]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), StringStartsWith(hd_buy_potential,Unknown), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int,hd_buy_potential:string,hd_dep_count:int,hd_vehicle_count:int>

(36) ColumnarToRow [codegen id : 12]
Input [5]: [hd_demo_sk#137, hd_income_band_sk#138, hd_buy_potential#139, hd_dep_count#140, hd_vehicle_count#141]

(37) Filter [codegen id : 12]
Input [5]: [hd_demo_sk#137, hd_income_band_sk#138, hd_buy_potential#139, hd_dep_count#140, hd_vehicle_count#141]
Condition : ((isnotnull(hd_buy_potential#139) AND StartsWith(hd_buy_potential#139, Unknown)) AND isnotnull(hd_demo_sk#137))

(38) HashAggregate [codegen id : 12]
Input [5]: [hd_demo_sk#137, hd_income_band_sk#138, hd_buy_potential#139, hd_dep_count#140, hd_vehicle_count#141]
Keys [1]: [hd_demo_sk#137]
Functions: []
Aggregate Attributes: []
Results [1]: [hd_demo_sk#137]

(39) BroadcastExchange
Input [1]: [hd_demo_sk#137]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#142]

(40) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [c_current_hdemo_sk#93]
Right keys [1]: [hd_demo_sk#137]
Join condition: None

(41) Project [codegen id : 13]
Output [6]: [cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111, _pushedexpression#143]
Input [8]: [c_current_hdemo_sk#93, cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111, _pushedexpression#136, hd_demo_sk#137]

(42) HashAggregate [codegen id : 13]
Input [6]: [cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111, _pushedexpression#143]
Keys [5]: [cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111]
Functions [1]: [partial_sum(_pushedexpression#143)]
Aggregate Attributes [2]: [sum#144, isEmpty#145]
Results [7]: [cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111, sum#146, isEmpty#147]

(43) Exchange
Input [7]: [cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111, sum#146, isEmpty#147]
Arguments: hashpartitioning(cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111, 5), ENSURE_REQUIREMENTS, [id=#148]

(44) HashAggregate [codegen id : 14]
Input [7]: [cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111, sum#146, isEmpty#147]
Keys [5]: [cc_call_center_id#58, cc_name#63, cc_manager#68, cd_marital_status#110, cd_education_status#111]
Functions [1]: [sum(_pushedexpression#143)]
Aggregate Attributes [1]: [sum(_pushedexpression#143)#149]
Results [4]: [cc_call_center_id#58 AS Call_Center#150, cc_name#63 AS Call_Center_Name#151, cc_manager#68 AS Manager#152, cast(sum(_pushedexpression#143)#149 as decimal(17,2)) AS Returns_Loss#153]

(45) Exchange
Input [4]: [Call_Center#150, Call_Center_Name#151, Manager#152, Returns_Loss#153]
Arguments: rangepartitioning(Returns_Loss#153 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, [id=#154]

(46) Sort [codegen id : 15]
Input [4]: [Call_Center#150, Call_Center_Name#151, Manager#152, Returns_Loss#153]
Arguments: [Returns_Loss#153 DESC NULLS LAST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cr_returned_date_sk#27 IN dynamicpruning#28
BroadcastExchange (50)
+- * Filter (49)
   +- * ColumnarToRow (48)
      +- Scan parquet default.date_dim (47)


(47) Scan parquet default.date_dim
Output [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(48) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]

(49) Filter [codegen id : 1]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Condition : ((((isnotnull(d_year#35) AND isnotnull(d_moy#37)) AND (d_year#35 = 1998)) AND (d_moy#37 = 11)) AND isnotnull(d_date_sk#29))

(50) BroadcastExchange
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#155]


