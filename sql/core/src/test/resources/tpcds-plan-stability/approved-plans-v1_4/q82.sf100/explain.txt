== Physical Plan ==
TakeOrderedAndProject (31)
+- * HashAggregate (30)
   +- Exchange (29)
      +- * HashAggregate (28)
         +- * Project (27)
            +- * SortMergeJoin Inner (26)
               :- * Sort (19)
               :  +- Exchange (18)
               :     +- * HashAggregate (17)
               :        +- * SortMergeJoin Inner (16)
               :           :- * Sort (10)
               :           :  +- Exchange (9)
               :           :     +- * BroadcastHashJoin Inner BuildLeft (8)
               :           :        :- BroadcastExchange (4)
               :           :        :  +- * Filter (3)
               :           :        :     +- * ColumnarToRow (2)
               :           :        :        +- Scan parquet default.item (1)
               :           :        +- * Filter (7)
               :           :           +- * ColumnarToRow (6)
               :           :              +- Scan parquet default.inventory (5)
               :           +- * Sort (15)
               :              +- Exchange (14)
               :                 +- * Filter (13)
               :                    +- * ColumnarToRow (12)
               :                       +- Scan parquet default.date_dim (11)
               +- * Sort (25)
                  +- Exchange (24)
                     +- * HashAggregate (23)
                        +- * Filter (22)
                           +- * ColumnarToRow (21)
                              +- Scan parquet default.store_sales (20)


(1) Scan parquet default.item
Output [22]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,62.00), LessThanOrEqual(i_current_price,92.00), In(i_manufact_id, [129,270,423,821]), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(2) ColumnarToRow [codegen id : 1]
Input [22]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22]

(3) Filter [codegen id : 1]
Input [22]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22]
Condition : ((((isnotnull(i_current_price#6) AND (i_current_price#6 >= 62.00)) AND (i_current_price#6 <= 92.00)) AND i_manufact_id#14 IN (129,270,821,423)) AND isnotnull(i_item_sk#1))

(4) BroadcastExchange
Input [22]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(5) Scan parquet default.inventory
Output [4]: [inv_item_sk#24, inv_warehouse_sk#25, inv_quantity_on_hand#26, inv_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#27), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(inv_quantity_on_hand,500), IsNotNull(inv_item_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(6) ColumnarToRow
Input [4]: [inv_item_sk#24, inv_warehouse_sk#25, inv_quantity_on_hand#26, inv_date_sk#27]

(7) Filter
Input [4]: [inv_item_sk#24, inv_warehouse_sk#25, inv_quantity_on_hand#26, inv_date_sk#27]
Condition : (((isnotnull(inv_quantity_on_hand#26) AND (inv_quantity_on_hand#26 >= 100)) AND (inv_quantity_on_hand#26 <= 500)) AND isnotnull(inv_item_sk#24))

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [inv_item_sk#24]
Join condition: None

(9) Exchange
Input [26]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22, inv_item_sk#24, inv_warehouse_sk#25, inv_quantity_on_hand#26, inv_date_sk#27]
Arguments: hashpartitioning(inv_date_sk#27, 5), ENSURE_REQUIREMENTS, [id=#28]

(10) Sort [codegen id : 3]
Input [26]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22, inv_item_sk#24, inv_warehouse_sk#25, inv_quantity_on_hand#26, inv_date_sk#27]
Arguments: [inv_date_sk#27 ASC NULLS FIRST], false, 0

(11) Scan parquet default.date_dim
Output [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-05-25), LessThanOrEqual(d_date,2000-07-24), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(12) ColumnarToRow [codegen id : 4]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]

(13) Filter [codegen id : 4]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Condition : (((isnotnull(d_date#31) AND (d_date#31 >= 2000-05-25)) AND (d_date#31 <= 2000-07-24)) AND isnotnull(d_date_sk#29))

(14) Exchange
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Arguments: hashpartitioning(d_date_sk#29, 5), ENSURE_REQUIREMENTS, [id=#57]

(15) Sort [codegen id : 5]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Arguments: [d_date_sk#29 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 6]
Left keys [1]: [inv_date_sk#27]
Right keys [1]: [d_date_sk#29]
Join condition: None

(17) HashAggregate [codegen id : 6]
Input [54]: [i_item_sk#1, i_item_id#2, i_rec_start_date#3, i_rec_end_date#4, i_item_desc#5, i_current_price#6, i_wholesale_cost#7, i_brand_id#8, i_brand#9, i_class_id#10, i_class#11, i_category_id#12, i_category#13, i_manufact_id#14, i_manufact#15, i_size#16, i_formulation#17, i_color#18, i_units#19, i_container#20, i_manager_id#21, i_product_name#22, inv_item_sk#24, inv_warehouse_sk#25, inv_quantity_on_hand#26, inv_date_sk#27, d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Keys [4]: [i_item_sk#1, i_item_id#2, i_item_desc#5, i_current_price#6]
Functions: []
Aggregate Attributes: []
Results [4]: [i_item_sk#1, i_item_id#2, i_item_desc#5, i_current_price#6]

(18) Exchange
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#5, i_current_price#6]
Arguments: hashpartitioning(i_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#58]

(19) Sort [codegen id : 7]
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#5, i_current_price#6]
Arguments: [i_item_sk#1 ASC NULLS FIRST], false, 0

(20) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#59, ss_item_sk#60, ss_customer_sk#61, ss_cdemo_sk#62, ss_hdemo_sk#63, ss_addr_sk#64, ss_store_sk#65, ss_promo_sk#66, ss_ticket_number#67, ss_quantity#68, ss_wholesale_cost#69, ss_list_price#70, ss_sales_price#71, ss_ext_discount_amt#72, ss_ext_sales_price#73, ss_ext_wholesale_cost#74, ss_ext_list_price#75, ss_ext_tax#76, ss_coupon_amt#77, ss_net_paid#78, ss_net_paid_inc_tax#79, ss_net_profit#80, ss_sold_date_sk#81]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(21) ColumnarToRow [codegen id : 8]
Input [23]: [ss_sold_time_sk#59, ss_item_sk#60, ss_customer_sk#61, ss_cdemo_sk#62, ss_hdemo_sk#63, ss_addr_sk#64, ss_store_sk#65, ss_promo_sk#66, ss_ticket_number#67, ss_quantity#68, ss_wholesale_cost#69, ss_list_price#70, ss_sales_price#71, ss_ext_discount_amt#72, ss_ext_sales_price#73, ss_ext_wholesale_cost#74, ss_ext_list_price#75, ss_ext_tax#76, ss_coupon_amt#77, ss_net_paid#78, ss_net_paid_inc_tax#79, ss_net_profit#80, ss_sold_date_sk#81]

(22) Filter [codegen id : 8]
Input [23]: [ss_sold_time_sk#59, ss_item_sk#60, ss_customer_sk#61, ss_cdemo_sk#62, ss_hdemo_sk#63, ss_addr_sk#64, ss_store_sk#65, ss_promo_sk#66, ss_ticket_number#67, ss_quantity#68, ss_wholesale_cost#69, ss_list_price#70, ss_sales_price#71, ss_ext_discount_amt#72, ss_ext_sales_price#73, ss_ext_wholesale_cost#74, ss_ext_list_price#75, ss_ext_tax#76, ss_coupon_amt#77, ss_net_paid#78, ss_net_paid_inc_tax#79, ss_net_profit#80, ss_sold_date_sk#81]
Condition : isnotnull(ss_item_sk#60)

(23) HashAggregate [codegen id : 8]
Input [23]: [ss_sold_time_sk#59, ss_item_sk#60, ss_customer_sk#61, ss_cdemo_sk#62, ss_hdemo_sk#63, ss_addr_sk#64, ss_store_sk#65, ss_promo_sk#66, ss_ticket_number#67, ss_quantity#68, ss_wholesale_cost#69, ss_list_price#70, ss_sales_price#71, ss_ext_discount_amt#72, ss_ext_sales_price#73, ss_ext_wholesale_cost#74, ss_ext_list_price#75, ss_ext_tax#76, ss_coupon_amt#77, ss_net_paid#78, ss_net_paid_inc_tax#79, ss_net_profit#80, ss_sold_date_sk#81]
Keys [1]: [ss_item_sk#60]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_item_sk#60]

(24) Exchange
Input [1]: [ss_item_sk#60]
Arguments: hashpartitioning(ss_item_sk#60, 5), ENSURE_REQUIREMENTS, [id=#82]

(25) Sort [codegen id : 9]
Input [1]: [ss_item_sk#60]
Arguments: [ss_item_sk#60 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 10]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [ss_item_sk#60]
Join condition: None

(27) Project [codegen id : 10]
Output [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#5, i_current_price#6, ss_item_sk#60]

(28) HashAggregate [codegen id : 10]
Input [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Keys [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]

(29) Exchange
Input [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Arguments: hashpartitioning(i_item_id#2, i_item_desc#5, i_current_price#6, 5), ENSURE_REQUIREMENTS, [id=#83]

(30) HashAggregate [codegen id : 11]
Input [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Keys [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]

(31) TakeOrderedAndProject
Input [3]: [i_item_id#2, i_item_desc#5, i_current_price#6]
Arguments: 100, [i_item_id#2 ASC NULLS FIRST], [i_item_id#2, i_item_desc#5, i_current_price#6]

