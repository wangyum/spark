== Physical Plan ==
TakeOrderedAndProject (21)
+- * HashAggregate (20)
   +- Exchange (19)
      +- * HashAggregate (18)
         +- * Project (17)
            +- * BroadcastHashJoin Inner BuildRight (16)
               :- * Project (10)
               :  +- * HashAggregate (9)
               :     +- * BroadcastHashJoin Inner BuildRight (8)
               :        :- * Filter (3)
               :        :  +- * ColumnarToRow (2)
               :        :     +- Scan parquet default.date_dim (1)
               :        +- BroadcastExchange (7)
               :           +- * Filter (6)
               :              +- * ColumnarToRow (5)
               :                 +- Scan parquet default.store_sales (4)
               +- BroadcastExchange (15)
                  +- * HashAggregate (14)
                     +- * Filter (13)
                        +- * ColumnarToRow (12)
                           +- Scan parquet default.item (11)


(1) Scan parquet default.date_dim
Output [28]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(2) ColumnarToRow [codegen id : 3]
Input [28]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28]

(3) Filter [codegen id : 3]
Input [28]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28]
Condition : ((((isnotnull(d_moy#9) AND isnotnull(d_year#7)) AND (d_moy#9 = 11)) AND (d_year#7 = 2000)) AND isnotnull(d_date_sk#1))

(4) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#29, ss_item_sk#30, ss_customer_sk#31, ss_cdemo_sk#32, ss_hdemo_sk#33, ss_addr_sk#34, ss_store_sk#35, ss_promo_sk#36, ss_ticket_number#37, ss_quantity#38, ss_wholesale_cost#39, ss_list_price#40, ss_sales_price#41, ss_ext_discount_amt#42, ss_ext_sales_price#43, ss_ext_wholesale_cost#44, ss_ext_list_price#45, ss_ext_tax#46, ss_coupon_amt#47, ss_net_paid#48, ss_net_paid_inc_tax#49, ss_net_profit#50, ss_sold_date_sk#51]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#51), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [23]: [ss_sold_time_sk#29, ss_item_sk#30, ss_customer_sk#31, ss_cdemo_sk#32, ss_hdemo_sk#33, ss_addr_sk#34, ss_store_sk#35, ss_promo_sk#36, ss_ticket_number#37, ss_quantity#38, ss_wholesale_cost#39, ss_list_price#40, ss_sales_price#41, ss_ext_discount_amt#42, ss_ext_sales_price#43, ss_ext_wholesale_cost#44, ss_ext_list_price#45, ss_ext_tax#46, ss_coupon_amt#47, ss_net_paid#48, ss_net_paid_inc_tax#49, ss_net_profit#50, ss_sold_date_sk#51]

(6) Filter [codegen id : 1]
Input [23]: [ss_sold_time_sk#29, ss_item_sk#30, ss_customer_sk#31, ss_cdemo_sk#32, ss_hdemo_sk#33, ss_addr_sk#34, ss_store_sk#35, ss_promo_sk#36, ss_ticket_number#37, ss_quantity#38, ss_wholesale_cost#39, ss_list_price#40, ss_sales_price#41, ss_ext_discount_amt#42, ss_ext_sales_price#43, ss_ext_wholesale_cost#44, ss_ext_list_price#45, ss_ext_tax#46, ss_coupon_amt#47, ss_net_paid#48, ss_net_paid_inc_tax#49, ss_net_profit#50, ss_sold_date_sk#51]
Condition : isnotnull(ss_item_sk#30)

(7) BroadcastExchange
Input [23]: [ss_sold_time_sk#29, ss_item_sk#30, ss_customer_sk#31, ss_cdemo_sk#32, ss_hdemo_sk#33, ss_addr_sk#34, ss_store_sk#35, ss_promo_sk#36, ss_ticket_number#37, ss_quantity#38, ss_wholesale_cost#39, ss_list_price#40, ss_sales_price#41, ss_ext_discount_amt#42, ss_ext_sales_price#43, ss_ext_wholesale_cost#44, ss_ext_list_price#45, ss_ext_tax#46, ss_coupon_amt#47, ss_net_paid#48, ss_net_paid_inc_tax#49, ss_net_profit#50, ss_sold_date_sk#51]
Arguments: HashedRelationBroadcastMode(List(cast(input[22, int, true] as bigint)),false), [id=#52]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#51]
Join condition: None

(9) HashAggregate [codegen id : 3]
Input [51]: [d_date_sk#1, d_date_id#2, d_date#3, d_month_seq#4, d_week_seq#5, d_quarter_seq#6, d_year#7, d_dow#8, d_moy#9, d_dom#10, d_qoy#11, d_fy_year#12, d_fy_quarter_seq#13, d_fy_week_seq#14, d_day_name#15, d_quarter_name#16, d_holiday#17, d_weekend#18, d_following_holiday#19, d_first_dom#20, d_last_dom#21, d_same_day_ly#22, d_same_day_lq#23, d_current_day#24, d_current_week#25, d_current_month#26, d_current_quarter#27, d_current_year#28, ss_sold_time_sk#29, ss_item_sk#30, ss_customer_sk#31, ss_cdemo_sk#32, ss_hdemo_sk#33, ss_addr_sk#34, ss_store_sk#35, ss_promo_sk#36, ss_ticket_number#37, ss_quantity#38, ss_wholesale_cost#39, ss_list_price#40, ss_sales_price#41, ss_ext_discount_amt#42, ss_ext_sales_price#43, ss_ext_wholesale_cost#44, ss_ext_list_price#45, ss_ext_tax#46, ss_coupon_amt#47, ss_net_paid#48, ss_net_paid_inc_tax#49, ss_net_profit#50, ss_sold_date_sk#51]
Keys [2]: [ss_item_sk#30, d_year#7]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#43))]
Aggregate Attributes [1]: [sum#53]
Results [3]: [ss_item_sk#30, d_year#7, sum#54]

(10) Project [codegen id : 3]
Output [3]: [ss_item_sk#30, d_year#7, sum#54 AS _pushedexpression#55]
Input [3]: [ss_item_sk#30, d_year#7, sum#54]

(11) Scan parquet default.item
Output [22]: [i_item_sk#56, i_item_id#57, i_rec_start_date#58, i_rec_end_date#59, i_item_desc#60, i_current_price#61, i_wholesale_cost#62, i_brand_id#63, i_brand#64, i_class_id#65, i_class#66, i_category_id#67, i_category#68, i_manufact_id#69, i_manufact#70, i_size#71, i_formulation#72, i_color#73, i_units#74, i_container#75, i_manager_id#76, i_product_name#77]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(12) ColumnarToRow [codegen id : 2]
Input [22]: [i_item_sk#56, i_item_id#57, i_rec_start_date#58, i_rec_end_date#59, i_item_desc#60, i_current_price#61, i_wholesale_cost#62, i_brand_id#63, i_brand#64, i_class_id#65, i_class#66, i_category_id#67, i_category#68, i_manufact_id#69, i_manufact#70, i_size#71, i_formulation#72, i_color#73, i_units#74, i_container#75, i_manager_id#76, i_product_name#77]

(13) Filter [codegen id : 2]
Input [22]: [i_item_sk#56, i_item_id#57, i_rec_start_date#58, i_rec_end_date#59, i_item_desc#60, i_current_price#61, i_wholesale_cost#62, i_brand_id#63, i_brand#64, i_class_id#65, i_class#66, i_category_id#67, i_category#68, i_manufact_id#69, i_manufact#70, i_size#71, i_formulation#72, i_color#73, i_units#74, i_container#75, i_manager_id#76, i_product_name#77]
Condition : ((isnotnull(i_manager_id#76) AND (i_manager_id#76 = 1)) AND isnotnull(i_item_sk#56))

(14) HashAggregate [codegen id : 2]
Input [22]: [i_item_sk#56, i_item_id#57, i_rec_start_date#58, i_rec_end_date#59, i_item_desc#60, i_current_price#61, i_wholesale_cost#62, i_brand_id#63, i_brand#64, i_class_id#65, i_class#66, i_category_id#67, i_category#68, i_manufact_id#69, i_manufact#70, i_size#71, i_formulation#72, i_color#73, i_units#74, i_container#75, i_manager_id#76, i_product_name#77]
Keys [3]: [i_item_sk#56, i_category_id#67, i_category#68]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_sk#56, i_category_id#67, i_category#68]

(15) BroadcastExchange
Input [3]: [i_item_sk#56, i_category_id#67, i_category#68]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#78]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#30]
Right keys [1]: [i_item_sk#56]
Join condition: None

(17) Project [codegen id : 3]
Output [4]: [d_year#7, _pushedexpression#79, i_category_id#67, i_category#68]
Input [6]: [ss_item_sk#30, d_year#7, _pushedexpression#55, i_item_sk#56, i_category_id#67, i_category#68]

(18) HashAggregate [codegen id : 3]
Input [4]: [d_year#7, _pushedexpression#79, i_category_id#67, i_category#68]
Keys [3]: [d_year#7, i_category_id#67, i_category#68]
Functions [1]: [partial_sum(_pushedexpression#79)]
Aggregate Attributes [2]: [sum#80, isEmpty#81]
Results [5]: [d_year#7, i_category_id#67, i_category#68, sum#82, isEmpty#83]

(19) Exchange
Input [5]: [d_year#7, i_category_id#67, i_category#68, sum#82, isEmpty#83]
Arguments: hashpartitioning(d_year#7, i_category_id#67, i_category#68, 5), ENSURE_REQUIREMENTS, [id=#84]

(20) HashAggregate [codegen id : 4]
Input [5]: [d_year#7, i_category_id#67, i_category#68, sum#82, isEmpty#83]
Keys [3]: [d_year#7, i_category_id#67, i_category#68]
Functions [1]: [sum(_pushedexpression#79)]
Aggregate Attributes [1]: [sum(_pushedexpression#79)#85]
Results [4]: [d_year#7, i_category_id#67, i_category#68, cast(sum(_pushedexpression#79)#85 as decimal(17,2)) AS sum(ss_ext_sales_price)#86]

(21) TakeOrderedAndProject
Input [4]: [d_year#7, i_category_id#67, i_category#68, sum(ss_ext_sales_price)#86]
Arguments: 100, [sum(ss_ext_sales_price)#86 DESC NULLS LAST, d_year#7 ASC NULLS FIRST, i_category_id#67 ASC NULLS FIRST, i_category#68 ASC NULLS FIRST], [d_year#7, i_category_id#67, i_category#68, sum(ss_ext_sales_price)#86]

