== Physical Plan ==
* Filter (42)
+- * HashAggregate (41)
   +- Exchange (40)
      +- * HashAggregate (39)
         +- * HashAggregate (38)
            +- Exchange (37)
               +- * HashAggregate (36)
                  +- * Project (35)
                     +- * BroadcastHashJoin Inner BuildRight (34)
                        :- * Project (28)
                        :  +- HashAggregate (27)
                        :     +- BroadcastHashJoin Inner BuildRight (26)
                        :        :- * BroadcastHashJoin Inner BuildRight (21)
                        :        :  :- * BroadcastHashJoin Inner BuildRight (16)
                        :        :  :  :- * SortMergeJoin Inner (11)
                        :        :  :  :  :- * Sort (5)
                        :        :  :  :  :  +- Exchange (4)
                        :        :  :  :  :     +- * Filter (3)
                        :        :  :  :  :        +- * ColumnarToRow (2)
                        :        :  :  :  :           +- Scan parquet default.store_sales (1)
                        :        :  :  :  +- * Sort (10)
                        :        :  :  :     +- Exchange (9)
                        :        :  :  :        +- * Filter (8)
                        :        :  :  :           +- * ColumnarToRow (7)
                        :        :  :  :              +- Scan parquet default.store_returns (6)
                        :        :  :  +- BroadcastExchange (15)
                        :        :  :     +- * Filter (14)
                        :        :  :        +- * ColumnarToRow (13)
                        :        :  :           +- Scan parquet default.store (12)
                        :        :  +- BroadcastExchange (20)
                        :        :     +- * Filter (19)
                        :        :        +- * ColumnarToRow (18)
                        :        :           +- Scan parquet default.item (17)
                        :        +- BroadcastExchange (25)
                        :           +- * Filter (24)
                        :              +- * ColumnarToRow (23)
                        :                 +- Scan parquet default.customer (22)
                        +- BroadcastExchange (33)
                           +- * HashAggregate (32)
                              +- * Filter (31)
                                 +- * ColumnarToRow (30)
                                    +- Scan parquet default.customer_address (29)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 1]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : (((isnotnull(ss_ticket_number#9) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_store_sk#7)) AND isnotnull(ss_customer_sk#3))

(4) Exchange
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Arguments: hashpartitioning(ss_ticket_number#9, ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#24]

(5) Sort [codegen id : 2]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Arguments: [ss_ticket_number#9 ASC NULLS FIRST, ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [20]: [sr_return_time_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_cdemo_sk#28, sr_hdemo_sk#29, sr_addr_sk#30, sr_store_sk#31, sr_reason_sk#32, sr_ticket_number#33, sr_return_quantity#34, sr_return_amt#35, sr_return_tax#36, sr_return_amt_inc_tax#37, sr_fee#38, sr_return_ship_cost#39, sr_refunded_cash#40, sr_reversed_charge#41, sr_store_credit#42, sr_net_loss#43, sr_returned_date_sk#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_return_time_sk:int,sr_item_sk:int,sr_customer_sk:int,sr_cdemo_sk:int,sr_hdemo_sk:int,sr_addr_sk:int,sr_store_sk:int,sr_reason_sk:int,sr_ticket_number:int,sr_return_quantity:int,sr_return_amt:decimal(7,2),sr_return_tax:decimal(7,2),sr_return_amt_inc_tax:decimal(7,2),sr_fee:decimal(7,2),sr_return_ship_cost:decimal(7,2),sr_refunded_cash:decimal(7,2),sr_reversed_charge:decimal(7,2),sr_store_credit:decimal(7,2),sr_net_loss:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [20]: [sr_return_time_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_cdemo_sk#28, sr_hdemo_sk#29, sr_addr_sk#30, sr_store_sk#31, sr_reason_sk#32, sr_ticket_number#33, sr_return_quantity#34, sr_return_amt#35, sr_return_tax#36, sr_return_amt_inc_tax#37, sr_fee#38, sr_return_ship_cost#39, sr_refunded_cash#40, sr_reversed_charge#41, sr_store_credit#42, sr_net_loss#43, sr_returned_date_sk#44]

(8) Filter [codegen id : 3]
Input [20]: [sr_return_time_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_cdemo_sk#28, sr_hdemo_sk#29, sr_addr_sk#30, sr_store_sk#31, sr_reason_sk#32, sr_ticket_number#33, sr_return_quantity#34, sr_return_amt#35, sr_return_tax#36, sr_return_amt_inc_tax#37, sr_fee#38, sr_return_ship_cost#39, sr_refunded_cash#40, sr_reversed_charge#41, sr_store_credit#42, sr_net_loss#43, sr_returned_date_sk#44]
Condition : (isnotnull(sr_ticket_number#33) AND isnotnull(sr_item_sk#26))

(9) Exchange
Input [20]: [sr_return_time_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_cdemo_sk#28, sr_hdemo_sk#29, sr_addr_sk#30, sr_store_sk#31, sr_reason_sk#32, sr_ticket_number#33, sr_return_quantity#34, sr_return_amt#35, sr_return_tax#36, sr_return_amt_inc_tax#37, sr_fee#38, sr_return_ship_cost#39, sr_refunded_cash#40, sr_reversed_charge#41, sr_store_credit#42, sr_net_loss#43, sr_returned_date_sk#44]
Arguments: hashpartitioning(sr_ticket_number#33, sr_item_sk#26, 5), ENSURE_REQUIREMENTS, [id=#45]

(10) Sort [codegen id : 4]
Input [20]: [sr_return_time_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_cdemo_sk#28, sr_hdemo_sk#29, sr_addr_sk#30, sr_store_sk#31, sr_reason_sk#32, sr_ticket_number#33, sr_return_quantity#34, sr_return_amt#35, sr_return_tax#36, sr_return_amt_inc_tax#37, sr_fee#38, sr_return_ship_cost#39, sr_refunded_cash#40, sr_reversed_charge#41, sr_store_credit#42, sr_net_loss#43, sr_returned_date_sk#44]
Arguments: [sr_ticket_number#33 ASC NULLS FIRST, sr_item_sk#26 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 7]
Left keys [2]: [ss_ticket_number#9, ss_item_sk#2]
Right keys [2]: [sr_ticket_number#33, sr_item_sk#26]
Join condition: None

(12) Scan parquet default.store
Output [29]: [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, s_state#70, s_zip#71, s_country#72, s_gmt_offset#73, s_tax_percentage#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(13) ColumnarToRow [codegen id : 5]
Input [29]: [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, s_state#70, s_zip#71, s_country#72, s_gmt_offset#73, s_tax_percentage#74]

(14) Filter [codegen id : 5]
Input [29]: [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, s_state#70, s_zip#71, s_country#72, s_gmt_offset#73, s_tax_percentage#74]
Condition : (((isnotnull(s_market_id#56) AND (s_market_id#56 = 8)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))

(15) BroadcastExchange
Input [29]: [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, s_state#70, s_zip#71, s_country#72, s_gmt_offset#73, s_tax_percentage#74]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#75]

(16) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#46]
Join condition: None

(17) Scan parquet default.item
Output [22]: [i_item_sk#76, i_item_id#77, i_rec_start_date#78, i_rec_end_date#79, i_item_desc#80, i_current_price#81, i_wholesale_cost#82, i_brand_id#83, i_brand#84, i_class_id#85, i_class#86, i_category_id#87, i_category#88, i_manufact_id#89, i_manufact#90, i_size#91, i_formulation#92, i_color#93, i_units#94, i_container#95, i_manager_id#96, i_product_name#97]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon             ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(18) ColumnarToRow [codegen id : 6]
Input [22]: [i_item_sk#76, i_item_id#77, i_rec_start_date#78, i_rec_end_date#79, i_item_desc#80, i_current_price#81, i_wholesale_cost#82, i_brand_id#83, i_brand#84, i_class_id#85, i_class#86, i_category_id#87, i_category#88, i_manufact_id#89, i_manufact#90, i_size#91, i_formulation#92, i_color#93, i_units#94, i_container#95, i_manager_id#96, i_product_name#97]

(19) Filter [codegen id : 6]
Input [22]: [i_item_sk#76, i_item_id#77, i_rec_start_date#78, i_rec_end_date#79, i_item_desc#80, i_current_price#81, i_wholesale_cost#82, i_brand_id#83, i_brand#84, i_class_id#85, i_class#86, i_category_id#87, i_category#88, i_manufact_id#89, i_manufact#90, i_size#91, i_formulation#92, i_color#93, i_units#94, i_container#95, i_manager_id#96, i_product_name#97]
Condition : ((isnotnull(i_color#93) AND (i_color#93 = chiffon             )) AND isnotnull(i_item_sk#76))

(20) BroadcastExchange
Input [22]: [i_item_sk#76, i_item_id#77, i_rec_start_date#78, i_rec_end_date#79, i_item_desc#80, i_current_price#81, i_wholesale_cost#82, i_brand_id#83, i_brand#84, i_class_id#85, i_class#86, i_category_id#87, i_category#88, i_manufact_id#89, i_manufact#90, i_size#91, i_formulation#92, i_color#93, i_units#94, i_container#95, i_manager_id#96, i_product_name#97]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#98]

(21) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#76]
Join condition: None

(22) Scan parquet default.customer
Output [18]: [c_customer_sk#99, c_customer_id#100, c_current_cdemo_sk#101, c_current_hdemo_sk#102, c_current_addr_sk#103, c_first_shipto_date_sk#104, c_first_sales_date_sk#105, c_salutation#106, c_first_name#107, c_last_name#108, c_preferred_cust_flag#109, c_birth_day#110, c_birth_month#111, c_birth_year#112, c_birth_country#113, c_login#114, c_email_address#115, c_last_review_date#116]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(23) ColumnarToRow [codegen id : 8]
Input [18]: [c_customer_sk#99, c_customer_id#100, c_current_cdemo_sk#101, c_current_hdemo_sk#102, c_current_addr_sk#103, c_first_shipto_date_sk#104, c_first_sales_date_sk#105, c_salutation#106, c_first_name#107, c_last_name#108, c_preferred_cust_flag#109, c_birth_day#110, c_birth_month#111, c_birth_year#112, c_birth_country#113, c_login#114, c_email_address#115, c_last_review_date#116]

(24) Filter [codegen id : 8]
Input [18]: [c_customer_sk#99, c_customer_id#100, c_current_cdemo_sk#101, c_current_hdemo_sk#102, c_current_addr_sk#103, c_first_shipto_date_sk#104, c_first_sales_date_sk#105, c_salutation#106, c_first_name#107, c_last_name#108, c_preferred_cust_flag#109, c_birth_day#110, c_birth_month#111, c_birth_year#112, c_birth_country#113, c_login#114, c_email_address#115, c_last_review_date#116]
Condition : (isnotnull(c_customer_sk#99) AND isnotnull(c_birth_country#113))

(25) BroadcastExchange
Input [18]: [c_customer_sk#99, c_customer_id#100, c_current_cdemo_sk#101, c_current_hdemo_sk#102, c_current_addr_sk#103, c_first_shipto_date_sk#104, c_first_sales_date_sk#105, c_salutation#106, c_first_name#107, c_last_name#108, c_preferred_cust_flag#109, c_birth_day#110, c_birth_month#111, c_birth_year#112, c_birth_country#113, c_login#114, c_email_address#115, c_last_review_date#116]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#117]

(26) BroadcastHashJoin
Left keys [1]: [ss_customer_sk#3]
Right keys [1]: [c_customer_sk#99]
Join condition: None

(27) HashAggregate
Input [112]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, sr_return_time_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_cdemo_sk#28, sr_hdemo_sk#29, sr_addr_sk#30, sr_store_sk#31, sr_reason_sk#32, sr_ticket_number#33, sr_return_quantity#34, sr_return_amt#35, sr_return_tax#36, sr_return_amt_inc_tax#37, sr_fee#38, sr_return_ship_cost#39, sr_refunded_cash#40, sr_reversed_charge#41, sr_store_credit#42, sr_net_loss#43, sr_returned_date_sk#44, s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, s_state#70, s_zip#71, s_country#72, s_gmt_offset#73, s_tax_percentage#74, i_item_sk#76, i_item_id#77, i_rec_start_date#78, i_rec_end_date#79, i_item_desc#80, i_current_price#81, i_wholesale_cost#82, i_brand_id#83, i_brand#84, i_class_id#85, i_class#86, i_category_id#87, i_category#88, i_manufact_id#89, i_manufact#90, i_size#91, i_formulation#92, i_color#93, i_units#94, i_container#95, i_manager_id#96, i_product_name#97, c_customer_sk#99, c_customer_id#100, c_current_cdemo_sk#101, c_current_hdemo_sk#102, c_current_addr_sk#103, c_first_shipto_date_sk#104, c_first_sales_date_sk#105, c_salutation#106, c_first_name#107, c_last_name#108, c_preferred_cust_flag#109, c_birth_day#110, c_birth_month#111, c_birth_year#112, c_birth_country#113, c_login#114, c_email_address#115, c_last_review_date#116]
Keys [11]: [c_birth_country#113, s_zip#71, c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#20))]
Aggregate Attributes [1]: [sum#118]
Results [12]: [c_birth_country#113, s_zip#71, c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, sum#119]

(28) Project [codegen id : 10]
Output [12]: [c_birth_country#113, s_zip#71, c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, sum#119 AS _pushedexpression#120]
Input [12]: [c_birth_country#113, s_zip#71, c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, sum#119]

(29) Scan parquet default.customer_address
Output [13]: [ca_address_sk#121, ca_address_id#122, ca_street_number#123, ca_street_name#124, ca_street_type#125, ca_suite_number#126, ca_city#127, ca_county#128, ca_state#129, ca_zip#130, ca_country#131, ca_gmt_offset#132, ca_location_type#133]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(30) ColumnarToRow [codegen id : 9]
Input [13]: [ca_address_sk#121, ca_address_id#122, ca_street_number#123, ca_street_name#124, ca_street_type#125, ca_suite_number#126, ca_city#127, ca_county#128, ca_state#129, ca_zip#130, ca_country#131, ca_gmt_offset#132, ca_location_type#133]

(31) Filter [codegen id : 9]
Input [13]: [ca_address_sk#121, ca_address_id#122, ca_street_number#123, ca_street_name#124, ca_street_type#125, ca_suite_number#126, ca_city#127, ca_county#128, ca_state#129, ca_zip#130, ca_country#131, ca_gmt_offset#132, ca_location_type#133]
Condition : (isnotnull(ca_country#131) AND isnotnull(ca_zip#130))

(32) HashAggregate [codegen id : 9]
Input [13]: [ca_address_sk#121, ca_address_id#122, ca_street_number#123, ca_street_name#124, ca_street_type#125, ca_suite_number#126, ca_city#127, ca_county#128, ca_state#129, ca_zip#130, ca_country#131, ca_gmt_offset#132, ca_location_type#133]
Keys [3]: [ca_country#131, ca_zip#130, ca_state#129]
Functions: []
Aggregate Attributes: []
Results [3]: [ca_country#131, ca_zip#130, ca_state#129]

(33) BroadcastExchange
Input [3]: [ca_country#131, ca_zip#130, ca_state#129]
Arguments: HashedRelationBroadcastMode(List(upper(input[0, string, true]), input[1, string, true]),false), [id=#134]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [c_birth_country#113, s_zip#71]
Right keys [2]: [upper(ca_country#131), ca_zip#130]
Join condition: None

(35) Project [codegen id : 10]
Output [11]: [c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, _pushedexpression#135, ca_state#129]
Input [15]: [c_birth_country#113, s_zip#71, c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, _pushedexpression#120, ca_country#131, ca_zip#130, ca_state#129]

(36) HashAggregate [codegen id : 10]
Input [11]: [c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, _pushedexpression#135, ca_state#129]
Keys [10]: [c_last_name#108, c_first_name#107, s_store_name#51, ca_state#129, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91]
Functions [1]: [partial_sum(_pushedexpression#135)]
Aggregate Attributes [2]: [sum#136, isEmpty#137]
Results [12]: [c_last_name#108, c_first_name#107, s_store_name#51, ca_state#129, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, sum#138, isEmpty#139]

(37) Exchange
Input [12]: [c_last_name#108, c_first_name#107, s_store_name#51, ca_state#129, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, sum#138, isEmpty#139]
Arguments: hashpartitioning(c_last_name#108, c_first_name#107, s_store_name#51, ca_state#129, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, 5), ENSURE_REQUIREMENTS, [id=#140]

(38) HashAggregate [codegen id : 11]
Input [12]: [c_last_name#108, c_first_name#107, s_store_name#51, ca_state#129, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, sum#138, isEmpty#139]
Keys [10]: [c_last_name#108, c_first_name#107, s_store_name#51, ca_state#129, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91]
Functions [1]: [sum(_pushedexpression#135)]
Aggregate Attributes [1]: [sum(_pushedexpression#135)#141]
Results [4]: [c_last_name#108, c_first_name#107, s_store_name#51, cast(sum(_pushedexpression#135)#141 as decimal(17,2)) AS netpaid#142]

(39) HashAggregate [codegen id : 11]
Input [4]: [c_last_name#108, c_first_name#107, s_store_name#51, netpaid#142]
Keys [3]: [c_last_name#108, c_first_name#107, s_store_name#51]
Functions [1]: [partial_sum(netpaid#142)]
Aggregate Attributes [2]: [sum#143, isEmpty#144]
Results [5]: [c_last_name#108, c_first_name#107, s_store_name#51, sum#145, isEmpty#146]

(40) Exchange
Input [5]: [c_last_name#108, c_first_name#107, s_store_name#51, sum#145, isEmpty#146]
Arguments: hashpartitioning(c_last_name#108, c_first_name#107, s_store_name#51, 5), ENSURE_REQUIREMENTS, [id=#147]

(41) HashAggregate [codegen id : 12]
Input [5]: [c_last_name#108, c_first_name#107, s_store_name#51, sum#145, isEmpty#146]
Keys [3]: [c_last_name#108, c_first_name#107, s_store_name#51]
Functions [1]: [sum(netpaid#142)]
Aggregate Attributes [1]: [sum(netpaid#142)#148]
Results [4]: [c_last_name#108, c_first_name#107, s_store_name#51, sum(netpaid#142)#148 AS paid#149]

(42) Filter [codegen id : 12]
Input [4]: [c_last_name#108, c_first_name#107, s_store_name#51, paid#149]
Condition : (isnotnull(paid#149) AND (cast(paid#149 as decimal(33,8)) > cast(Subquery scalar-subquery#150, [id=#151] as decimal(33,8))))

===== Subqueries =====

Subquery:1 Hosting operator id = 42 Hosting Expression = Subquery scalar-subquery#150, [id=#151]
* HashAggregate (67)
+- Exchange (66)
   +- * HashAggregate (65)
      +- * HashAggregate (64)
         +- Exchange (63)
            +- * HashAggregate (62)
               +- * Project (61)
                  +- * BroadcastHashJoin Inner BuildRight (60)
                     :- * Project (58)
                     :  +- HashAggregate (57)
                     :     +- BroadcastHashJoin Inner BuildRight (56)
                     :        :- * BroadcastHashJoin Inner BuildRight (54)
                     :        :  :- * BroadcastHashJoin Inner BuildRight (49)
                     :        :  :  :- * SortMergeJoin Inner (47)
                     :        :  :  :  :- * Sort (44)
                     :        :  :  :  :  +- ReusedExchange (43)
                     :        :  :  :  +- * Sort (46)
                     :        :  :  :     +- ReusedExchange (45)
                     :        :  :  +- ReusedExchange (48)
                     :        :  +- BroadcastExchange (53)
                     :        :     +- * Filter (52)
                     :        :        +- * ColumnarToRow (51)
                     :        :           +- Scan parquet default.item (50)
                     :        +- ReusedExchange (55)
                     +- ReusedExchange (59)


(43) ReusedExchange [Reuses operator id: 4]
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(44) Sort [codegen id : 2]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Arguments: [ss_ticket_number#9 ASC NULLS FIRST, ss_item_sk#2 ASC NULLS FIRST], false, 0

(45) ReusedExchange [Reuses operator id: 9]
Output [20]: [sr_return_time_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_cdemo_sk#28, sr_hdemo_sk#29, sr_addr_sk#30, sr_store_sk#31, sr_reason_sk#32, sr_ticket_number#33, sr_return_quantity#34, sr_return_amt#35, sr_return_tax#36, sr_return_amt_inc_tax#37, sr_fee#38, sr_return_ship_cost#39, sr_refunded_cash#40, sr_reversed_charge#41, sr_store_credit#42, sr_net_loss#43, sr_returned_date_sk#44]

(46) Sort [codegen id : 4]
Input [20]: [sr_return_time_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_cdemo_sk#28, sr_hdemo_sk#29, sr_addr_sk#30, sr_store_sk#31, sr_reason_sk#32, sr_ticket_number#33, sr_return_quantity#34, sr_return_amt#35, sr_return_tax#36, sr_return_amt_inc_tax#37, sr_fee#38, sr_return_ship_cost#39, sr_refunded_cash#40, sr_reversed_charge#41, sr_store_credit#42, sr_net_loss#43, sr_returned_date_sk#44]
Arguments: [sr_ticket_number#33 ASC NULLS FIRST, sr_item_sk#26 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 7]
Left keys [2]: [ss_ticket_number#9, ss_item_sk#2]
Right keys [2]: [sr_ticket_number#33, sr_item_sk#26]
Join condition: None

(48) ReusedExchange [Reuses operator id: 15]
Output [29]: [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, s_state#70, s_zip#71, s_country#72, s_gmt_offset#73, s_tax_percentage#74]

(49) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#46]
Join condition: None

(50) Scan parquet default.item
Output [22]: [i_item_sk#76, i_item_id#77, i_rec_start_date#78, i_rec_end_date#79, i_item_desc#80, i_current_price#81, i_wholesale_cost#82, i_brand_id#83, i_brand#84, i_class_id#85, i_class#86, i_category_id#87, i_category#88, i_manufact_id#89, i_manufact#90, i_size#91, i_formulation#92, i_color#93, i_units#94, i_container#95, i_manager_id#96, i_product_name#97]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(51) ColumnarToRow [codegen id : 6]
Input [22]: [i_item_sk#76, i_item_id#77, i_rec_start_date#78, i_rec_end_date#79, i_item_desc#80, i_current_price#81, i_wholesale_cost#82, i_brand_id#83, i_brand#84, i_class_id#85, i_class#86, i_category_id#87, i_category#88, i_manufact_id#89, i_manufact#90, i_size#91, i_formulation#92, i_color#93, i_units#94, i_container#95, i_manager_id#96, i_product_name#97]

(52) Filter [codegen id : 6]
Input [22]: [i_item_sk#76, i_item_id#77, i_rec_start_date#78, i_rec_end_date#79, i_item_desc#80, i_current_price#81, i_wholesale_cost#82, i_brand_id#83, i_brand#84, i_class_id#85, i_class#86, i_category_id#87, i_category#88, i_manufact_id#89, i_manufact#90, i_size#91, i_formulation#92, i_color#93, i_units#94, i_container#95, i_manager_id#96, i_product_name#97]
Condition : isnotnull(i_item_sk#76)

(53) BroadcastExchange
Input [22]: [i_item_sk#76, i_item_id#77, i_rec_start_date#78, i_rec_end_date#79, i_item_desc#80, i_current_price#81, i_wholesale_cost#82, i_brand_id#83, i_brand#84, i_class_id#85, i_class#86, i_category_id#87, i_category#88, i_manufact_id#89, i_manufact#90, i_size#91, i_formulation#92, i_color#93, i_units#94, i_container#95, i_manager_id#96, i_product_name#97]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#152]

(54) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#76]
Join condition: None

(55) ReusedExchange [Reuses operator id: 25]
Output [18]: [c_customer_sk#99, c_customer_id#100, c_current_cdemo_sk#101, c_current_hdemo_sk#102, c_current_addr_sk#103, c_first_shipto_date_sk#104, c_first_sales_date_sk#105, c_salutation#106, c_first_name#107, c_last_name#108, c_preferred_cust_flag#109, c_birth_day#110, c_birth_month#111, c_birth_year#112, c_birth_country#113, c_login#114, c_email_address#115, c_last_review_date#116]

(56) BroadcastHashJoin
Left keys [1]: [ss_customer_sk#3]
Right keys [1]: [c_customer_sk#99]
Join condition: None

(57) HashAggregate
Input [112]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, sr_return_time_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_cdemo_sk#28, sr_hdemo_sk#29, sr_addr_sk#30, sr_store_sk#31, sr_reason_sk#32, sr_ticket_number#33, sr_return_quantity#34, sr_return_amt#35, sr_return_tax#36, sr_return_amt_inc_tax#37, sr_fee#38, sr_return_ship_cost#39, sr_refunded_cash#40, sr_reversed_charge#41, sr_store_credit#42, sr_net_loss#43, sr_returned_date_sk#44, s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, s_state#70, s_zip#71, s_country#72, s_gmt_offset#73, s_tax_percentage#74, i_item_sk#76, i_item_id#77, i_rec_start_date#78, i_rec_end_date#79, i_item_desc#80, i_current_price#81, i_wholesale_cost#82, i_brand_id#83, i_brand#84, i_class_id#85, i_class#86, i_category_id#87, i_category#88, i_manufact_id#89, i_manufact#90, i_size#91, i_formulation#92, i_color#93, i_units#94, i_container#95, i_manager_id#96, i_product_name#97, c_customer_sk#99, c_customer_id#100, c_current_cdemo_sk#101, c_current_hdemo_sk#102, c_current_addr_sk#103, c_first_shipto_date_sk#104, c_first_sales_date_sk#105, c_salutation#106, c_first_name#107, c_last_name#108, c_preferred_cust_flag#109, c_birth_day#110, c_birth_month#111, c_birth_year#112, c_birth_country#113, c_login#114, c_email_address#115, c_last_review_date#116]
Keys [11]: [c_birth_country#113, s_zip#71, c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#20))]
Aggregate Attributes [1]: [sum#153]
Results [12]: [c_birth_country#113, s_zip#71, c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, sum#154]

(58) Project [codegen id : 10]
Output [12]: [c_birth_country#113, s_zip#71, c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, sum#154 AS _pushedexpression#155]
Input [12]: [c_birth_country#113, s_zip#71, c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, sum#154]

(59) ReusedExchange [Reuses operator id: 33]
Output [3]: [ca_country#131, ca_zip#130, ca_state#129]

(60) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [c_birth_country#113, s_zip#71]
Right keys [2]: [upper(ca_country#131), ca_zip#130]
Join condition: None

(61) Project [codegen id : 10]
Output [11]: [c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, _pushedexpression#156, ca_state#129]
Input [15]: [c_birth_country#113, s_zip#71, c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, _pushedexpression#155, ca_country#131, ca_zip#130, ca_state#129]

(62) HashAggregate [codegen id : 10]
Input [11]: [c_last_name#108, c_first_name#107, s_store_name#51, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, _pushedexpression#156, ca_state#129]
Keys [10]: [c_last_name#108, c_first_name#107, s_store_name#51, ca_state#129, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91]
Functions [1]: [partial_sum(_pushedexpression#156)]
Aggregate Attributes [2]: [sum#157, isEmpty#158]
Results [12]: [c_last_name#108, c_first_name#107, s_store_name#51, ca_state#129, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, sum#159, isEmpty#160]

(63) Exchange
Input [12]: [c_last_name#108, c_first_name#107, s_store_name#51, ca_state#129, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, sum#159, isEmpty#160]
Arguments: hashpartitioning(c_last_name#108, c_first_name#107, s_store_name#51, ca_state#129, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, 5), ENSURE_REQUIREMENTS, [id=#161]

(64) HashAggregate [codegen id : 11]
Input [12]: [c_last_name#108, c_first_name#107, s_store_name#51, ca_state#129, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91, sum#159, isEmpty#160]
Keys [10]: [c_last_name#108, c_first_name#107, s_store_name#51, ca_state#129, s_state#70, i_color#93, i_current_price#81, i_manager_id#96, i_units#94, i_size#91]
Functions [1]: [sum(_pushedexpression#156)]
Aggregate Attributes [1]: [sum(_pushedexpression#156)#141]
Results [1]: [cast(sum(_pushedexpression#156)#141 as decimal(17,2)) AS netpaid#142]

(65) HashAggregate [codegen id : 11]
Input [1]: [netpaid#142]
Keys: []
Functions [1]: [partial_avg(netpaid#142)]
Aggregate Attributes [2]: [sum#162, count#163]
Results [2]: [sum#164, count#165]

(66) Exchange
Input [2]: [sum#164, count#165]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#166]

(67) HashAggregate [codegen id : 12]
Input [2]: [sum#164, count#165]
Keys: []
Functions [1]: [avg(netpaid#142)]
Aggregate Attributes [1]: [avg(netpaid#142)#167]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#142)#167)), DecimalType(24,8)) AS (0.05 * avg(netpaid))#168]


