== Physical Plan ==
TakeOrderedAndProject (62)
+- * Project (61)
   +- * BroadcastHashJoin Inner BuildRight (60)
      :- * Project (55)
      :  +- * SortMergeJoin Inner (54)
      :     :- * Sort (48)
      :     :  +- Exchange (47)
      :     :     +- * Project (46)
      :     :        +- * SortMergeJoin Inner (45)
      :     :           :- * Sort (23)
      :     :           :  +- Exchange (22)
      :     :           :     +- * Filter (21)
      :     :           :        +- * HashAggregate (20)
      :     :           :           +- Exchange (19)
      :     :           :              +- * HashAggregate (18)
      :     :           :                 +- * Project (17)
      :     :           :                    +- * SortMergeJoin Inner (16)
      :     :           :                       :- * Sort (9)
      :     :           :                       :  +- Exchange (8)
      :     :           :                       :     +- * Project (7)
      :     :           :                       :        +- * HashAggregate (6)
      :     :           :                       :           +- * BroadcastHashJoin Inner BuildRight (5)
      :     :           :                       :              :- * Filter (3)
      :     :           :                       :              :  +- * ColumnarToRow (2)
      :     :           :                       :              :     +- Scan parquet default.catalog_returns (1)
      :     :           :                       :              +- ReusedExchange (4)
      :     :           :                       +- * Sort (15)
      :     :           :                          +- Exchange (14)
      :     :           :                             +- * HashAggregate (13)
      :     :           :                                +- * Filter (12)
      :     :           :                                   +- * ColumnarToRow (11)
      :     :           :                                      +- Scan parquet default.customer_address (10)
      :     :           +- * Sort (44)
      :     :              +- * Filter (43)
      :     :                 +- * HashAggregate (42)
      :     :                    +- Exchange (41)
      :     :                       +- * HashAggregate (40)
      :     :                          +- * HashAggregate (39)
      :     :                             +- Exchange (38)
      :     :                                +- * HashAggregate (37)
      :     :                                   +- * Project (36)
      :     :                                      +- * SortMergeJoin Inner (35)
      :     :                                         :- * Sort (32)
      :     :                                         :  +- Exchange (31)
      :     :                                         :     +- * Project (30)
      :     :                                         :        +- * HashAggregate (29)
      :     :                                         :           +- * BroadcastHashJoin Inner BuildRight (28)
      :     :                                         :              :- * Filter (26)
      :     :                                         :              :  +- * ColumnarToRow (25)
      :     :                                         :              :     +- Scan parquet default.catalog_returns (24)
      :     :                                         :              +- ReusedExchange (27)
      :     :                                         +- * Sort (34)
      :     :                                            +- ReusedExchange (33)
      :     +- * Sort (53)
      :        +- Exchange (52)
      :           +- * Filter (51)
      :              +- * ColumnarToRow (50)
      :                 +- Scan parquet default.customer (49)
      +- BroadcastExchange (59)
         +- * Filter (58)
            +- * ColumnarToRow (57)
               +- Scan parquet default.customer_address (56)


(1) Scan parquet default.catalog_returns
Output [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#27), dynamicpruningexpression(cr_returned_date_sk#27 IN dynamicpruning#28)]
PushedFilters: [IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returned_time_sk:int,cr_item_sk:int,cr_refunded_customer_sk:int,cr_refunded_cdemo_sk:int,cr_refunded_hdemo_sk:int,cr_refunded_addr_sk:int,cr_returning_customer_sk:int,cr_returning_cdemo_sk:int,cr_returning_hdemo_sk:int,cr_returning_addr_sk:int,cr_call_center_sk:int,cr_catalog_page_sk:int,cr_ship_mode_sk:int,cr_warehouse_sk:int,cr_reason_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2),cr_return_tax:decimal(7,2),cr_return_amt_inc_tax:decimal(7,2),cr_fee:decimal(7,2),cr_return_ship_cost:decimal(7,2),cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2),cr_net_loss:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]

(3) Filter [codegen id : 2]
Input [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]
Condition : (isnotnull(cr_returning_addr_sk#10) AND isnotnull(cr_returning_customer_sk#7))

(4) ReusedExchange [Reuses operator id: 66]
Output [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cr_returned_date_sk#27]
Right keys [1]: [d_date_sk#29]
Join condition: None

(6) HashAggregate [codegen id : 2]
Input [55]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27, d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Keys [2]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#20))]
Aggregate Attributes [1]: [sum#57]
Results [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, sum#58]

(7) Project [codegen id : 2]
Output [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, sum#58 AS _pushedexpression#59]
Input [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, sum#58]

(8) Exchange
Input [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, _pushedexpression#59]
Arguments: hashpartitioning(cr_returning_addr_sk#10, 5), ENSURE_REQUIREMENTS, [id=#60]

(9) Sort [codegen id : 3]
Input [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, _pushedexpression#59]
Arguments: [cr_returning_addr_sk#10 ASC NULLS FIRST], false, 0

(10) Scan parquet default.customer_address
Output [13]: [ca_address_sk#61, ca_address_id#62, ca_street_number#63, ca_street_name#64, ca_street_type#65, ca_suite_number#66, ca_city#67, ca_county#68, ca_state#69, ca_zip#70, ca_country#71, ca_gmt_offset#72, ca_location_type#73]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(11) ColumnarToRow [codegen id : 4]
Input [13]: [ca_address_sk#61, ca_address_id#62, ca_street_number#63, ca_street_name#64, ca_street_type#65, ca_suite_number#66, ca_city#67, ca_county#68, ca_state#69, ca_zip#70, ca_country#71, ca_gmt_offset#72, ca_location_type#73]

(12) Filter [codegen id : 4]
Input [13]: [ca_address_sk#61, ca_address_id#62, ca_street_number#63, ca_street_name#64, ca_street_type#65, ca_suite_number#66, ca_city#67, ca_county#68, ca_state#69, ca_zip#70, ca_country#71, ca_gmt_offset#72, ca_location_type#73]
Condition : (isnotnull(ca_address_sk#61) AND isnotnull(ca_state#69))

(13) HashAggregate [codegen id : 4]
Input [13]: [ca_address_sk#61, ca_address_id#62, ca_street_number#63, ca_street_name#64, ca_street_type#65, ca_suite_number#66, ca_city#67, ca_county#68, ca_state#69, ca_zip#70, ca_country#71, ca_gmt_offset#72, ca_location_type#73]
Keys [2]: [ca_address_sk#61, ca_state#69]
Functions: []
Aggregate Attributes: []
Results [2]: [ca_address_sk#61, ca_state#69]

(14) Exchange
Input [2]: [ca_address_sk#61, ca_state#69]
Arguments: hashpartitioning(ca_address_sk#61, 5), ENSURE_REQUIREMENTS, [id=#74]

(15) Sort [codegen id : 5]
Input [2]: [ca_address_sk#61, ca_state#69]
Arguments: [ca_address_sk#61 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 6]
Left keys [1]: [cr_returning_addr_sk#10]
Right keys [1]: [ca_address_sk#61]
Join condition: None

(17) Project [codegen id : 6]
Output [3]: [cr_returning_customer_sk#7, _pushedexpression#75, ca_state#69]
Input [5]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, _pushedexpression#59, ca_address_sk#61, ca_state#69]

(18) HashAggregate [codegen id : 6]
Input [3]: [cr_returning_customer_sk#7, _pushedexpression#75, ca_state#69]
Keys [2]: [cr_returning_customer_sk#7, ca_state#69]
Functions [1]: [partial_sum(_pushedexpression#75)]
Aggregate Attributes [2]: [sum#76, isEmpty#77]
Results [4]: [cr_returning_customer_sk#7, ca_state#69, sum#78, isEmpty#79]

(19) Exchange
Input [4]: [cr_returning_customer_sk#7, ca_state#69, sum#78, isEmpty#79]
Arguments: hashpartitioning(cr_returning_customer_sk#7, ca_state#69, 5), ENSURE_REQUIREMENTS, [id=#80]

(20) HashAggregate [codegen id : 7]
Input [4]: [cr_returning_customer_sk#7, ca_state#69, sum#78, isEmpty#79]
Keys [2]: [cr_returning_customer_sk#7, ca_state#69]
Functions [1]: [sum(_pushedexpression#75)]
Aggregate Attributes [1]: [sum(_pushedexpression#75)#81]
Results [3]: [cr_returning_customer_sk#7 AS ctr_customer_sk#82, ca_state#69 AS ctr_state#83, cast(sum(_pushedexpression#75)#81 as decimal(17,2)) AS ctr_total_return#84]

(21) Filter [codegen id : 7]
Input [3]: [ctr_customer_sk#82, ctr_state#83, ctr_total_return#84]
Condition : isnotnull(ctr_total_return#84)

(22) Exchange
Input [3]: [ctr_customer_sk#82, ctr_state#83, ctr_total_return#84]
Arguments: hashpartitioning(ctr_state#83, 5), ENSURE_REQUIREMENTS, [id=#85]

(23) Sort [codegen id : 8]
Input [3]: [ctr_customer_sk#82, ctr_state#83, ctr_total_return#84]
Arguments: [ctr_state#83 ASC NULLS FIRST], false, 0

(24) Scan parquet default.catalog_returns
Output [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#27), dynamicpruningexpression(cr_returned_date_sk#27 IN dynamicpruning#28)]
PushedFilters: [IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returned_time_sk:int,cr_item_sk:int,cr_refunded_customer_sk:int,cr_refunded_cdemo_sk:int,cr_refunded_hdemo_sk:int,cr_refunded_addr_sk:int,cr_returning_customer_sk:int,cr_returning_cdemo_sk:int,cr_returning_hdemo_sk:int,cr_returning_addr_sk:int,cr_call_center_sk:int,cr_catalog_page_sk:int,cr_ship_mode_sk:int,cr_warehouse_sk:int,cr_reason_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2),cr_return_tax:decimal(7,2),cr_return_amt_inc_tax:decimal(7,2),cr_fee:decimal(7,2),cr_return_ship_cost:decimal(7,2),cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2),cr_net_loss:decimal(7,2)>

(25) ColumnarToRow [codegen id : 10]
Input [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]

(26) Filter [codegen id : 10]
Input [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]
Condition : isnotnull(cr_returning_addr_sk#10)

(27) ReusedExchange [Reuses operator id: 66]
Output [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]

(28) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cr_returned_date_sk#27]
Right keys [1]: [d_date_sk#29]
Join condition: None

(29) HashAggregate [codegen id : 10]
Input [55]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27, d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Keys [2]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#20))]
Aggregate Attributes [1]: [sum#86]
Results [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, sum#87]

(30) Project [codegen id : 10]
Output [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, sum#87 AS _pushedexpression#88]
Input [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, sum#87]

(31) Exchange
Input [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, _pushedexpression#88]
Arguments: hashpartitioning(cr_returning_addr_sk#10, 5), ENSURE_REQUIREMENTS, [id=#89]

(32) Sort [codegen id : 11]
Input [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, _pushedexpression#88]
Arguments: [cr_returning_addr_sk#10 ASC NULLS FIRST], false, 0

(33) ReusedExchange [Reuses operator id: 14]
Output [2]: [ca_address_sk#61, ca_state#69]

(34) Sort [codegen id : 13]
Input [2]: [ca_address_sk#61, ca_state#69]
Arguments: [ca_address_sk#61 ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 14]
Left keys [1]: [cr_returning_addr_sk#10]
Right keys [1]: [ca_address_sk#61]
Join condition: None

(36) Project [codegen id : 14]
Output [3]: [cr_returning_customer_sk#7, _pushedexpression#90, ca_state#69]
Input [5]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, _pushedexpression#88, ca_address_sk#61, ca_state#69]

(37) HashAggregate [codegen id : 14]
Input [3]: [cr_returning_customer_sk#7, _pushedexpression#90, ca_state#69]
Keys [2]: [cr_returning_customer_sk#7, ca_state#69]
Functions [1]: [partial_sum(_pushedexpression#90)]
Aggregate Attributes [2]: [sum#91, isEmpty#92]
Results [4]: [cr_returning_customer_sk#7, ca_state#69, sum#93, isEmpty#94]

(38) Exchange
Input [4]: [cr_returning_customer_sk#7, ca_state#69, sum#93, isEmpty#94]
Arguments: hashpartitioning(cr_returning_customer_sk#7, ca_state#69, 5), ENSURE_REQUIREMENTS, [id=#95]

(39) HashAggregate [codegen id : 15]
Input [4]: [cr_returning_customer_sk#7, ca_state#69, sum#93, isEmpty#94]
Keys [2]: [cr_returning_customer_sk#7, ca_state#69]
Functions [1]: [sum(_pushedexpression#90)]
Aggregate Attributes [1]: [sum(_pushedexpression#90)#81]
Results [2]: [ca_state#69 AS ctr_state#83, cast(sum(_pushedexpression#90)#81 as decimal(17,2)) AS ctr_total_return#84]

(40) HashAggregate [codegen id : 15]
Input [2]: [ctr_state#83, ctr_total_return#84]
Keys [1]: [ctr_state#83]
Functions [1]: [partial_avg(ctr_total_return#84)]
Aggregate Attributes [2]: [sum#96, count#97]
Results [3]: [ctr_state#83, sum#98, count#99]

(41) Exchange
Input [3]: [ctr_state#83, sum#98, count#99]
Arguments: hashpartitioning(ctr_state#83, 5), ENSURE_REQUIREMENTS, [id=#100]

(42) HashAggregate [codegen id : 16]
Input [3]: [ctr_state#83, sum#98, count#99]
Keys [1]: [ctr_state#83]
Functions [1]: [avg(ctr_total_return#84)]
Aggregate Attributes [1]: [avg(ctr_total_return#84)#101]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#84)#101) * 1.200000), DecimalType(24,7)) AS (avg(ctr_total_return) * 1.2)#102, ctr_state#83 AS ctr_state#83#103]

(43) Filter [codegen id : 16]
Input [2]: [(avg(ctr_total_return) * 1.2)#102, ctr_state#83#103]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#102)

(44) Sort [codegen id : 16]
Input [2]: [(avg(ctr_total_return) * 1.2)#102, ctr_state#83#103]
Arguments: [ctr_state#83#103 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 17]
Left keys [1]: [ctr_state#83]
Right keys [1]: [ctr_state#83#103]
Join condition: (cast(ctr_total_return#84 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#102)

(46) Project [codegen id : 17]
Output [2]: [ctr_customer_sk#82, ctr_total_return#84]
Input [5]: [ctr_customer_sk#82, ctr_state#83, ctr_total_return#84, (avg(ctr_total_return) * 1.2)#102, ctr_state#83#103]

(47) Exchange
Input [2]: [ctr_customer_sk#82, ctr_total_return#84]
Arguments: hashpartitioning(ctr_customer_sk#82, 5), ENSURE_REQUIREMENTS, [id=#104]

(48) Sort [codegen id : 18]
Input [2]: [ctr_customer_sk#82, ctr_total_return#84]
Arguments: [ctr_customer_sk#82 ASC NULLS FIRST], false, 0

(49) Scan parquet default.customer
Output [6]: [c_customer_sk#105, c_customer_id#106, c_current_addr_sk#107, c_salutation#108, c_first_name#109, c_last_name#110]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(50) ColumnarToRow [codegen id : 19]
Input [6]: [c_customer_sk#105, c_customer_id#106, c_current_addr_sk#107, c_salutation#108, c_first_name#109, c_last_name#110]

(51) Filter [codegen id : 19]
Input [6]: [c_customer_sk#105, c_customer_id#106, c_current_addr_sk#107, c_salutation#108, c_first_name#109, c_last_name#110]
Condition : (isnotnull(c_customer_sk#105) AND isnotnull(c_current_addr_sk#107))

(52) Exchange
Input [6]: [c_customer_sk#105, c_customer_id#106, c_current_addr_sk#107, c_salutation#108, c_first_name#109, c_last_name#110]
Arguments: hashpartitioning(c_customer_sk#105, 5), ENSURE_REQUIREMENTS, [id=#111]

(53) Sort [codegen id : 20]
Input [6]: [c_customer_sk#105, c_customer_id#106, c_current_addr_sk#107, c_salutation#108, c_first_name#109, c_last_name#110]
Arguments: [c_customer_sk#105 ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 22]
Left keys [1]: [ctr_customer_sk#82]
Right keys [1]: [c_customer_sk#105]
Join condition: None

(55) Project [codegen id : 22]
Output [6]: [ctr_total_return#84, c_customer_id#106, c_current_addr_sk#107, c_salutation#108, c_first_name#109, c_last_name#110]
Input [8]: [ctr_customer_sk#82, ctr_total_return#84, c_customer_sk#105, c_customer_id#106, c_current_addr_sk#107, c_salutation#108, c_first_name#109, c_last_name#110]

(56) Scan parquet default.customer_address
Output [12]: [ca_address_sk#112, ca_street_number#113, ca_street_name#114, ca_street_type#115, ca_suite_number#116, ca_city#117, ca_county#118, ca_state#119, ca_zip#120, ca_country#121, ca_gmt_offset#122, ca_location_type#123]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(57) ColumnarToRow [codegen id : 21]
Input [12]: [ca_address_sk#112, ca_street_number#113, ca_street_name#114, ca_street_type#115, ca_suite_number#116, ca_city#117, ca_county#118, ca_state#119, ca_zip#120, ca_country#121, ca_gmt_offset#122, ca_location_type#123]

(58) Filter [codegen id : 21]
Input [12]: [ca_address_sk#112, ca_street_number#113, ca_street_name#114, ca_street_type#115, ca_suite_number#116, ca_city#117, ca_county#118, ca_state#119, ca_zip#120, ca_country#121, ca_gmt_offset#122, ca_location_type#123]
Condition : ((isnotnull(ca_state#119) AND (ca_state#119 = GA)) AND isnotnull(ca_address_sk#112))

(59) BroadcastExchange
Input [12]: [ca_address_sk#112, ca_street_number#113, ca_street_name#114, ca_street_type#115, ca_suite_number#116, ca_city#117, ca_county#118, ca_state#119, ca_zip#120, ca_country#121, ca_gmt_offset#122, ca_location_type#123]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#124]

(60) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [c_current_addr_sk#107]
Right keys [1]: [ca_address_sk#112]
Join condition: None

(61) Project [codegen id : 22]
Output [16]: [c_customer_id#106, c_salutation#108, c_first_name#109, c_last_name#110, ca_street_number#113, ca_street_name#114, ca_street_type#115, ca_suite_number#116, ca_city#117, ca_county#118, ca_state#119, ca_zip#120, ca_country#121, ca_gmt_offset#122, ca_location_type#123, ctr_total_return#84]
Input [18]: [ctr_total_return#84, c_customer_id#106, c_current_addr_sk#107, c_salutation#108, c_first_name#109, c_last_name#110, ca_address_sk#112, ca_street_number#113, ca_street_name#114, ca_street_type#115, ca_suite_number#116, ca_city#117, ca_county#118, ca_state#119, ca_zip#120, ca_country#121, ca_gmt_offset#122, ca_location_type#123]

(62) TakeOrderedAndProject
Input [16]: [c_customer_id#106, c_salutation#108, c_first_name#109, c_last_name#110, ca_street_number#113, ca_street_name#114, ca_street_type#115, ca_suite_number#116, ca_city#117, ca_county#118, ca_state#119, ca_zip#120, ca_country#121, ca_gmt_offset#122, ca_location_type#123, ctr_total_return#84]
Arguments: 100, [c_customer_id#106 ASC NULLS FIRST, c_salutation#108 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, c_last_name#110 ASC NULLS FIRST, ca_street_number#113 ASC NULLS FIRST, ca_street_name#114 ASC NULLS FIRST, ca_street_type#115 ASC NULLS FIRST, ca_suite_number#116 ASC NULLS FIRST, ca_city#117 ASC NULLS FIRST, ca_county#118 ASC NULLS FIRST, ca_state#119 ASC NULLS FIRST, ca_zip#120 ASC NULLS FIRST, ca_country#121 ASC NULLS FIRST, ca_gmt_offset#122 ASC NULLS FIRST, ca_location_type#123 ASC NULLS FIRST, ctr_total_return#84 ASC NULLS FIRST], [c_customer_id#106, c_salutation#108, c_first_name#109, c_last_name#110, ca_street_number#113, ca_street_name#114, ca_street_type#115, ca_suite_number#116, ca_city#117, ca_county#118, ca_state#119, ca_zip#120, ca_country#121, ca_gmt_offset#122, ca_location_type#123, ctr_total_return#84]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cr_returned_date_sk#27 IN dynamicpruning#28
BroadcastExchange (66)
+- * Filter (65)
   +- * ColumnarToRow (64)
      +- Scan parquet default.date_dim (63)


(63) Scan parquet default.date_dim
Output [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(64) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]

(65) Filter [codegen id : 1]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Condition : ((isnotnull(d_year#35) AND (d_year#35 = 2000)) AND isnotnull(d_date_sk#29))

(66) BroadcastExchange
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#125]

Subquery:2 Hosting operator id = 24 Hosting Expression = cr_returned_date_sk#27 IN dynamicpruning#28


