== Physical Plan ==
TakeOrderedAndProject (49)
+- * Project (48)
   +- * SortMergeJoin Inner (47)
      :- * Sort (41)
      :  +- Exchange (40)
      :     +- * Project (39)
      :        +- * SortMergeJoin Inner (38)
      :           :- * Sort (32)
      :           :  +- Exchange (31)
      :           :     +- * HashAggregate (30)
      :           :        +- * HashAggregate (29)
      :           :           +- * Project (28)
      :           :              +- * SortMergeJoin Inner (27)
      :           :                 :- * Sort (20)
      :           :                 :  +- Exchange (19)
      :           :                 :     +- * Project (18)
      :           :                 :        +- * HashAggregate (17)
      :           :                 :           +- * Project (16)
      :           :                 :              +- * BroadcastHashJoin Inner BuildRight (15)
      :           :                 :                 :- * BroadcastHashJoin Inner BuildRight (10)
      :           :                 :                 :  :- * BroadcastHashJoin Inner BuildRight (5)
      :           :                 :                 :  :  :- * Filter (3)
      :           :                 :                 :  :  :  +- * ColumnarToRow (2)
      :           :                 :                 :  :  :     +- Scan parquet default.store_sales (1)
      :           :                 :                 :  :  +- ReusedExchange (4)
      :           :                 :                 :  +- BroadcastExchange (9)
      :           :                 :                 :     +- * Filter (8)
      :           :                 :                 :        +- * ColumnarToRow (7)
      :           :                 :                 :           +- Scan parquet default.household_demographics (6)
      :           :                 :                 +- BroadcastExchange (14)
      :           :                 :                    +- * Filter (13)
      :           :                 :                       +- * ColumnarToRow (12)
      :           :                 :                          +- Scan parquet default.store (11)
      :           :                 +- * Sort (26)
      :           :                    +- Exchange (25)
      :           :                       +- * HashAggregate (24)
      :           :                          +- * Filter (23)
      :           :                             +- * ColumnarToRow (22)
      :           :                                +- Scan parquet default.customer_address (21)
      :           +- * Sort (37)
      :              +- Exchange (36)
      :                 +- * Filter (35)
      :                    +- * ColumnarToRow (34)
      :                       +- Scan parquet default.customer (33)
      +- * Sort (46)
         +- Exchange (45)
            +- * Filter (44)
               +- * ColumnarToRow (43)
                  +- Scan parquet default.customer_address (42)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23), dynamicpruningexpression(ss_sold_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 4]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : (((isnotnull(ss_addr_sk#6) AND isnotnull(ss_customer_sk#3)) AND isnotnull(ss_store_sk#7)) AND isnotnull(ss_hdemo_sk#5))

(4) ReusedExchange [Reuses operator id: 53]
Output [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#25]
Join condition: None

(6) Scan parquet default.household_demographics
Output [5]: [hd_demo_sk#53, hd_income_band_sk#54, hd_buy_potential#55, hd_dep_count#56, hd_vehicle_count#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,4),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int,hd_buy_potential:string,hd_dep_count:int,hd_vehicle_count:int>

(7) ColumnarToRow [codegen id : 2]
Input [5]: [hd_demo_sk#53, hd_income_band_sk#54, hd_buy_potential#55, hd_dep_count#56, hd_vehicle_count#57]

(8) Filter [codegen id : 2]
Input [5]: [hd_demo_sk#53, hd_income_band_sk#54, hd_buy_potential#55, hd_dep_count#56, hd_vehicle_count#57]
Condition : (((hd_dep_count#56 = 4) OR (hd_vehicle_count#57 = 3)) AND isnotnull(hd_demo_sk#53))

(9) BroadcastExchange
Input [5]: [hd_demo_sk#53, hd_income_band_sk#54, hd_buy_potential#55, hd_dep_count#56, hd_vehicle_count#57]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_hdemo_sk#5]
Right keys [1]: [hd_demo_sk#53]
Join condition: None

(11) Scan parquet default.store
Output [29]: [s_store_sk#59, s_store_id#60, s_rec_start_date#61, s_rec_end_date#62, s_closed_date_sk#63, s_store_name#64, s_number_employees#65, s_floor_space#66, s_hours#67, s_manager#68, s_market_id#69, s_geography_class#70, s_market_desc#71, s_market_manager#72, s_division_id#73, s_division_name#74, s_company_id#75, s_company_name#76, s_street_number#77, s_street_name#78, s_street_type#79, s_suite_number#80, s_city#81, s_county#82, s_state#83, s_zip#84, s_country#85, s_gmt_offset#86, s_tax_percentage#87]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Fairview,Midway]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(12) ColumnarToRow [codegen id : 3]
Input [29]: [s_store_sk#59, s_store_id#60, s_rec_start_date#61, s_rec_end_date#62, s_closed_date_sk#63, s_store_name#64, s_number_employees#65, s_floor_space#66, s_hours#67, s_manager#68, s_market_id#69, s_geography_class#70, s_market_desc#71, s_market_manager#72, s_division_id#73, s_division_name#74, s_company_id#75, s_company_name#76, s_street_number#77, s_street_name#78, s_street_type#79, s_suite_number#80, s_city#81, s_county#82, s_state#83, s_zip#84, s_country#85, s_gmt_offset#86, s_tax_percentage#87]

(13) Filter [codegen id : 3]
Input [29]: [s_store_sk#59, s_store_id#60, s_rec_start_date#61, s_rec_end_date#62, s_closed_date_sk#63, s_store_name#64, s_number_employees#65, s_floor_space#66, s_hours#67, s_manager#68, s_market_id#69, s_geography_class#70, s_market_desc#71, s_market_manager#72, s_division_id#73, s_division_name#74, s_company_id#75, s_company_name#76, s_street_number#77, s_street_name#78, s_street_type#79, s_suite_number#80, s_city#81, s_county#82, s_state#83, s_zip#84, s_country#85, s_gmt_offset#86, s_tax_percentage#87]
Condition : (s_city#81 IN (Fairview,Midway) AND isnotnull(s_store_sk#59))

(14) BroadcastExchange
Input [29]: [s_store_sk#59, s_store_id#60, s_rec_start_date#61, s_rec_end_date#62, s_closed_date_sk#63, s_store_name#64, s_number_employees#65, s_floor_space#66, s_hours#67, s_manager#68, s_market_id#69, s_geography_class#70, s_market_desc#71, s_market_manager#72, s_division_id#73, s_division_name#74, s_company_id#75, s_company_name#76, s_street_number#77, s_street_name#78, s_street_type#79, s_suite_number#80, s_city#81, s_county#82, s_state#83, s_zip#84, s_country#85, s_gmt_offset#86, s_tax_percentage#87]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#88]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#59]
Join condition: None

(16) Project [codegen id : 4]
Output [85]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52, s_store_sk#59, s_store_id#60, s_rec_start_date#61, s_rec_end_date#62, s_closed_date_sk#63, s_store_name#64, s_number_employees#65, s_floor_space#66, s_hours#67, s_manager#68, s_market_id#69, s_geography_class#70, s_market_desc#71, s_market_manager#72, s_division_id#73, s_division_name#74, s_company_id#75, s_company_name#76, s_street_number#77, s_street_name#78, s_street_type#79, s_suite_number#80, s_city#81, s_county#82, s_state#83, s_zip#84, s_country#85, s_gmt_offset#86, s_tax_percentage#87, hd_demo_sk#53, hd_income_band_sk#54, hd_buy_potential#55, hd_dep_count#56, hd_vehicle_count#57]
Input [85]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52, hd_demo_sk#53, hd_income_band_sk#54, hd_buy_potential#55, hd_dep_count#56, hd_vehicle_count#57, s_store_sk#59, s_store_id#60, s_rec_start_date#61, s_rec_end_date#62, s_closed_date_sk#63, s_store_name#64, s_number_employees#65, s_floor_space#66, s_hours#67, s_manager#68, s_market_id#69, s_geography_class#70, s_market_desc#71, s_market_manager#72, s_division_id#73, s_division_name#74, s_company_id#75, s_company_name#76, s_street_number#77, s_street_name#78, s_street_type#79, s_suite_number#80, s_city#81, s_county#82, s_state#83, s_zip#84, s_country#85, s_gmt_offset#86, s_tax_percentage#87]

(17) HashAggregate [codegen id : 4]
Input [85]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52, s_store_sk#59, s_store_id#60, s_rec_start_date#61, s_rec_end_date#62, s_closed_date_sk#63, s_store_name#64, s_number_employees#65, s_floor_space#66, s_hours#67, s_manager#68, s_market_id#69, s_geography_class#70, s_market_desc#71, s_market_manager#72, s_division_id#73, s_division_name#74, s_company_id#75, s_company_name#76, s_street_number#77, s_street_name#78, s_street_type#79, s_suite_number#80, s_city#81, s_county#82, s_state#83, s_zip#84, s_country#85, s_gmt_offset#86, s_tax_percentage#87, hd_demo_sk#53, hd_income_band_sk#54, hd_buy_potential#55, hd_dep_count#56, hd_vehicle_count#57]
Keys [4]: [ss_addr_sk#6, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#19)), partial_sum(UnscaledValue(ss_net_profit#22))]
Aggregate Attributes [2]: [sum#89, sum#90]
Results [6]: [ss_addr_sk#6, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, sum#91, sum#92]

(18) Project [codegen id : 4]
Output [6]: [ss_addr_sk#6, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, sum#91 AS _pushedexpression#93, sum#92 AS _pushedexpression#94]
Input [6]: [ss_addr_sk#6, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, sum#91, sum#92]

(19) Exchange
Input [6]: [ss_addr_sk#6, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, _pushedexpression#93, _pushedexpression#94]
Arguments: hashpartitioning(ss_addr_sk#6, 5), ENSURE_REQUIREMENTS, [id=#95]

(20) Sort [codegen id : 5]
Input [6]: [ss_addr_sk#6, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, _pushedexpression#93, _pushedexpression#94]
Arguments: [ss_addr_sk#6 ASC NULLS FIRST], false, 0

(21) Scan parquet default.customer_address
Output [13]: [ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(22) ColumnarToRow [codegen id : 6]
Input [13]: [ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]

(23) Filter [codegen id : 6]
Input [13]: [ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]
Condition : (isnotnull(ca_address_sk#96) AND isnotnull(ca_city#102))

(24) HashAggregate [codegen id : 6]
Input [13]: [ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]
Keys [2]: [ca_address_sk#96, ca_city#102]
Functions: []
Aggregate Attributes: []
Results [2]: [ca_address_sk#96, ca_city#102]

(25) Exchange
Input [2]: [ca_address_sk#96, ca_city#102]
Arguments: hashpartitioning(ca_address_sk#96, 5), ENSURE_REQUIREMENTS, [id=#109]

(26) Sort [codegen id : 7]
Input [2]: [ca_address_sk#96, ca_city#102]
Arguments: [ca_address_sk#96 ASC NULLS FIRST], false, 0

(27) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_addr_sk#6]
Right keys [1]: [ca_address_sk#96]
Join condition: None

(28) Project [codegen id : 8]
Output [7]: [ss_addr_sk#6, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, _pushedexpression#110, _pushedexpression#111, ca_city#102]
Input [8]: [ss_addr_sk#6, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, _pushedexpression#93, _pushedexpression#94, ca_address_sk#96, ca_city#102]

(29) HashAggregate [codegen id : 8]
Input [7]: [ss_addr_sk#6, ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, _pushedexpression#110, _pushedexpression#111, ca_city#102]
Keys [4]: [ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, ca_city#102]
Functions [2]: [partial_sum(_pushedexpression#110), partial_sum(_pushedexpression#111)]
Aggregate Attributes [4]: [sum#112, isEmpty#113, sum#114, isEmpty#115]
Results [8]: [ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, ca_city#102, sum#116, isEmpty#117, sum#118, isEmpty#119]

(30) HashAggregate [codegen id : 8]
Input [8]: [ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, ca_city#102, sum#116, isEmpty#117, sum#118, isEmpty#119]
Keys [4]: [ss_ticket_number#9, ss_customer_sk#3, ss_addr_sk#6, ca_city#102]
Functions [2]: [sum(_pushedexpression#110), sum(_pushedexpression#111)]
Aggregate Attributes [2]: [sum(_pushedexpression#110)#120, sum(_pushedexpression#111)#121]
Results [5]: [ss_ticket_number#9, ss_customer_sk#3, ca_city#102 AS bought_city#122, cast(sum(_pushedexpression#110)#120 as decimal(17,2)) AS amt#123, cast(sum(_pushedexpression#111)#121 as decimal(17,2)) AS profit#124]

(31) Exchange
Input [5]: [ss_ticket_number#9, ss_customer_sk#3, bought_city#122, amt#123, profit#124]
Arguments: hashpartitioning(ss_customer_sk#3, 5), ENSURE_REQUIREMENTS, [id=#125]

(32) Sort [codegen id : 9]
Input [5]: [ss_ticket_number#9, ss_customer_sk#3, bought_city#122, amt#123, profit#124]
Arguments: [ss_customer_sk#3 ASC NULLS FIRST], false, 0

(33) Scan parquet default.customer
Output [4]: [c_customer_sk#126, c_current_addr_sk#127, c_first_name#128, c_last_name#129]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(34) ColumnarToRow [codegen id : 10]
Input [4]: [c_customer_sk#126, c_current_addr_sk#127, c_first_name#128, c_last_name#129]

(35) Filter [codegen id : 10]
Input [4]: [c_customer_sk#126, c_current_addr_sk#127, c_first_name#128, c_last_name#129]
Condition : (isnotnull(c_customer_sk#126) AND isnotnull(c_current_addr_sk#127))

(36) Exchange
Input [4]: [c_customer_sk#126, c_current_addr_sk#127, c_first_name#128, c_last_name#129]
Arguments: hashpartitioning(c_customer_sk#126, 5), ENSURE_REQUIREMENTS, [id=#130]

(37) Sort [codegen id : 11]
Input [4]: [c_customer_sk#126, c_current_addr_sk#127, c_first_name#128, c_last_name#129]
Arguments: [c_customer_sk#126 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_customer_sk#3]
Right keys [1]: [c_customer_sk#126]
Join condition: None

(39) Project [codegen id : 12]
Output [7]: [ss_ticket_number#9, bought_city#122, amt#123, profit#124, c_current_addr_sk#127, c_first_name#128, c_last_name#129]
Input [9]: [ss_ticket_number#9, ss_customer_sk#3, bought_city#122, amt#123, profit#124, c_customer_sk#126, c_current_addr_sk#127, c_first_name#128, c_last_name#129]

(40) Exchange
Input [7]: [ss_ticket_number#9, bought_city#122, amt#123, profit#124, c_current_addr_sk#127, c_first_name#128, c_last_name#129]
Arguments: hashpartitioning(c_current_addr_sk#127, 5), ENSURE_REQUIREMENTS, [id=#131]

(41) Sort [codegen id : 13]
Input [7]: [ss_ticket_number#9, bought_city#122, amt#123, profit#124, c_current_addr_sk#127, c_first_name#128, c_last_name#129]
Arguments: [c_current_addr_sk#127 ASC NULLS FIRST], false, 0

(42) Scan parquet default.customer_address
Output [2]: [ca_address_sk#132, ca_city#133]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(43) ColumnarToRow [codegen id : 14]
Input [2]: [ca_address_sk#132, ca_city#133]

(44) Filter [codegen id : 14]
Input [2]: [ca_address_sk#132, ca_city#133]
Condition : (isnotnull(ca_address_sk#132) AND isnotnull(ca_city#133))

(45) Exchange
Input [2]: [ca_address_sk#132, ca_city#133]
Arguments: hashpartitioning(ca_address_sk#132, 5), ENSURE_REQUIREMENTS, [id=#134]

(46) Sort [codegen id : 15]
Input [2]: [ca_address_sk#132, ca_city#133]
Arguments: [ca_address_sk#132 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 16]
Left keys [1]: [c_current_addr_sk#127]
Right keys [1]: [ca_address_sk#132]
Join condition: NOT (ca_city#133 = bought_city#122)

(48) Project [codegen id : 16]
Output [7]: [c_last_name#129, c_first_name#128, ca_city#133, bought_city#122, ss_ticket_number#9, amt#123, profit#124]
Input [9]: [ss_ticket_number#9, bought_city#122, amt#123, profit#124, c_current_addr_sk#127, c_first_name#128, c_last_name#129, ca_address_sk#132, ca_city#133]

(49) TakeOrderedAndProject
Input [7]: [c_last_name#129, c_first_name#128, ca_city#133, bought_city#122, ss_ticket_number#9, amt#123, profit#124]
Arguments: 100, [c_last_name#129 ASC NULLS FIRST, c_first_name#128 ASC NULLS FIRST, ca_city#133 ASC NULLS FIRST, bought_city#122 ASC NULLS FIRST, ss_ticket_number#9 ASC NULLS FIRST], [c_last_name#129, c_first_name#128, ca_city#133, bought_city#122, ss_ticket_number#9, amt#123, profit#124]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#23 IN dynamicpruning#24
BroadcastExchange (53)
+- * Filter (52)
   +- * ColumnarToRow (51)
      +- Scan parquet default.date_dim (50)


(50) Scan parquet default.date_dim
Output [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(51) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]

(52) Filter [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Condition : ((d_dow#32 IN (6,0) AND d_year#31 IN (1999,2000,2001)) AND isnotnull(d_date_sk#25))

(53) BroadcastExchange
Input [28]: [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, d_current_week#49, d_current_month#50, d_current_quarter#51, d_current_year#52]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#135]


