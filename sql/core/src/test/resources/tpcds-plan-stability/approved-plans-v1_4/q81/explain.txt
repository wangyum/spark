== Physical Plan ==
TakeOrderedAndProject (51)
+- * Project (50)
   +- * BroadcastHashJoin Inner BuildRight (49)
      :- * Project (44)
      :  +- * BroadcastHashJoin Inner BuildRight (43)
      :     :- * Project (38)
      :     :  +- * BroadcastHashJoin Inner BuildRight (37)
      :     :     :- * Filter (18)
      :     :     :  +- * HashAggregate (17)
      :     :     :     +- Exchange (16)
      :     :     :        +- * HashAggregate (15)
      :     :     :           +- * Project (14)
      :     :     :              +- * BroadcastHashJoin Inner BuildRight (13)
      :     :     :                 :- * Project (7)
      :     :     :                 :  +- * HashAggregate (6)
      :     :     :                 :     +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :                 :        :- * Filter (3)
      :     :     :                 :        :  +- * ColumnarToRow (2)
      :     :     :                 :        :     +- Scan parquet default.catalog_returns (1)
      :     :     :                 :        +- ReusedExchange (4)
      :     :     :                 +- BroadcastExchange (12)
      :     :     :                    +- * HashAggregate (11)
      :     :     :                       +- * Filter (10)
      :     :     :                          +- * ColumnarToRow (9)
      :     :     :                             +- Scan parquet default.customer_address (8)
      :     :     +- BroadcastExchange (36)
      :     :        +- * Filter (35)
      :     :           +- * HashAggregate (34)
      :     :              +- Exchange (33)
      :     :                 +- * HashAggregate (32)
      :     :                    +- * HashAggregate (31)
      :     :                       +- Exchange (30)
      :     :                          +- * HashAggregate (29)
      :     :                             +- * Project (28)
      :     :                                +- * BroadcastHashJoin Inner BuildRight (27)
      :     :                                   :- * Project (25)
      :     :                                   :  +- * HashAggregate (24)
      :     :                                   :     +- * BroadcastHashJoin Inner BuildRight (23)
      :     :                                   :        :- * Filter (21)
      :     :                                   :        :  +- * ColumnarToRow (20)
      :     :                                   :        :     +- Scan parquet default.catalog_returns (19)
      :     :                                   :        +- ReusedExchange (22)
      :     :                                   +- ReusedExchange (26)
      :     +- BroadcastExchange (42)
      :        +- * Filter (41)
      :           +- * ColumnarToRow (40)
      :              +- Scan parquet default.customer (39)
      +- BroadcastExchange (48)
         +- * Filter (47)
            +- * ColumnarToRow (46)
               +- Scan parquet default.customer_address (45)


(1) Scan parquet default.catalog_returns
Output [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#27), dynamicpruningexpression(cr_returned_date_sk#27 IN dynamicpruning#28)]
PushedFilters: [IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returned_time_sk:int,cr_item_sk:int,cr_refunded_customer_sk:int,cr_refunded_cdemo_sk:int,cr_refunded_hdemo_sk:int,cr_refunded_addr_sk:int,cr_returning_customer_sk:int,cr_returning_cdemo_sk:int,cr_returning_hdemo_sk:int,cr_returning_addr_sk:int,cr_call_center_sk:int,cr_catalog_page_sk:int,cr_ship_mode_sk:int,cr_warehouse_sk:int,cr_reason_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2),cr_return_tax:decimal(7,2),cr_return_amt_inc_tax:decimal(7,2),cr_fee:decimal(7,2),cr_return_ship_cost:decimal(7,2),cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2),cr_net_loss:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]

(3) Filter [codegen id : 3]
Input [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]
Condition : (isnotnull(cr_returning_addr_sk#10) AND isnotnull(cr_returning_customer_sk#7))

(4) ReusedExchange [Reuses operator id: 55]
Output [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cr_returned_date_sk#27]
Right keys [1]: [d_date_sk#29]
Join condition: None

(6) HashAggregate [codegen id : 3]
Input [55]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27, d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Keys [2]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#20))]
Aggregate Attributes [1]: [sum#57]
Results [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, sum#58]

(7) Project [codegen id : 3]
Output [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, sum#58 AS _pushedexpression#59]
Input [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, sum#58]

(8) Scan parquet default.customer_address
Output [13]: [ca_address_sk#60, ca_address_id#61, ca_street_number#62, ca_street_name#63, ca_street_type#64, ca_suite_number#65, ca_city#66, ca_county#67, ca_state#68, ca_zip#69, ca_country#70, ca_gmt_offset#71, ca_location_type#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(9) ColumnarToRow [codegen id : 2]
Input [13]: [ca_address_sk#60, ca_address_id#61, ca_street_number#62, ca_street_name#63, ca_street_type#64, ca_suite_number#65, ca_city#66, ca_county#67, ca_state#68, ca_zip#69, ca_country#70, ca_gmt_offset#71, ca_location_type#72]

(10) Filter [codegen id : 2]
Input [13]: [ca_address_sk#60, ca_address_id#61, ca_street_number#62, ca_street_name#63, ca_street_type#64, ca_suite_number#65, ca_city#66, ca_county#67, ca_state#68, ca_zip#69, ca_country#70, ca_gmt_offset#71, ca_location_type#72]
Condition : (isnotnull(ca_address_sk#60) AND isnotnull(ca_state#68))

(11) HashAggregate [codegen id : 2]
Input [13]: [ca_address_sk#60, ca_address_id#61, ca_street_number#62, ca_street_name#63, ca_street_type#64, ca_suite_number#65, ca_city#66, ca_county#67, ca_state#68, ca_zip#69, ca_country#70, ca_gmt_offset#71, ca_location_type#72]
Keys [2]: [ca_address_sk#60, ca_state#68]
Functions: []
Aggregate Attributes: []
Results [2]: [ca_address_sk#60, ca_state#68]

(12) BroadcastExchange
Input [2]: [ca_address_sk#60, ca_state#68]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#73]

(13) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cr_returning_addr_sk#10]
Right keys [1]: [ca_address_sk#60]
Join condition: None

(14) Project [codegen id : 3]
Output [3]: [cr_returning_customer_sk#7, _pushedexpression#74, ca_state#68]
Input [5]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, _pushedexpression#59, ca_address_sk#60, ca_state#68]

(15) HashAggregate [codegen id : 3]
Input [3]: [cr_returning_customer_sk#7, _pushedexpression#74, ca_state#68]
Keys [2]: [cr_returning_customer_sk#7, ca_state#68]
Functions [1]: [partial_sum(_pushedexpression#74)]
Aggregate Attributes [2]: [sum#75, isEmpty#76]
Results [4]: [cr_returning_customer_sk#7, ca_state#68, sum#77, isEmpty#78]

(16) Exchange
Input [4]: [cr_returning_customer_sk#7, ca_state#68, sum#77, isEmpty#78]
Arguments: hashpartitioning(cr_returning_customer_sk#7, ca_state#68, 5), ENSURE_REQUIREMENTS, [id=#79]

(17) HashAggregate [codegen id : 11]
Input [4]: [cr_returning_customer_sk#7, ca_state#68, sum#77, isEmpty#78]
Keys [2]: [cr_returning_customer_sk#7, ca_state#68]
Functions [1]: [sum(_pushedexpression#74)]
Aggregate Attributes [1]: [sum(_pushedexpression#74)#80]
Results [3]: [cr_returning_customer_sk#7 AS ctr_customer_sk#81, ca_state#68 AS ctr_state#82, cast(sum(_pushedexpression#74)#80 as decimal(17,2)) AS ctr_total_return#83]

(18) Filter [codegen id : 11]
Input [3]: [ctr_customer_sk#81, ctr_state#82, ctr_total_return#83]
Condition : isnotnull(ctr_total_return#83)

(19) Scan parquet default.catalog_returns
Output [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#27), dynamicpruningexpression(cr_returned_date_sk#27 IN dynamicpruning#28)]
PushedFilters: [IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returned_time_sk:int,cr_item_sk:int,cr_refunded_customer_sk:int,cr_refunded_cdemo_sk:int,cr_refunded_hdemo_sk:int,cr_refunded_addr_sk:int,cr_returning_customer_sk:int,cr_returning_cdemo_sk:int,cr_returning_hdemo_sk:int,cr_returning_addr_sk:int,cr_call_center_sk:int,cr_catalog_page_sk:int,cr_ship_mode_sk:int,cr_warehouse_sk:int,cr_reason_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2),cr_return_tax:decimal(7,2),cr_return_amt_inc_tax:decimal(7,2),cr_fee:decimal(7,2),cr_return_ship_cost:decimal(7,2),cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2),cr_net_loss:decimal(7,2)>

(20) ColumnarToRow [codegen id : 6]
Input [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]

(21) Filter [codegen id : 6]
Input [27]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27]
Condition : isnotnull(cr_returning_addr_sk#10)

(22) ReusedExchange [Reuses operator id: 55]
Output [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cr_returned_date_sk#27]
Right keys [1]: [d_date_sk#29]
Join condition: None

(24) HashAggregate [codegen id : 6]
Input [55]: [cr_returned_time_sk#1, cr_item_sk#2, cr_refunded_customer_sk#3, cr_refunded_cdemo_sk#4, cr_refunded_hdemo_sk#5, cr_refunded_addr_sk#6, cr_returning_customer_sk#7, cr_returning_cdemo_sk#8, cr_returning_hdemo_sk#9, cr_returning_addr_sk#10, cr_call_center_sk#11, cr_catalog_page_sk#12, cr_ship_mode_sk#13, cr_warehouse_sk#14, cr_reason_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_return_tax#19, cr_return_amt_inc_tax#20, cr_fee#21, cr_return_ship_cost#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25, cr_net_loss#26, cr_returned_date_sk#27, d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Keys [2]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#20))]
Aggregate Attributes [1]: [sum#84]
Results [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, sum#85]

(25) Project [codegen id : 6]
Output [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, sum#85 AS _pushedexpression#86]
Input [3]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, sum#85]

(26) ReusedExchange [Reuses operator id: 12]
Output [2]: [ca_address_sk#60, ca_state#68]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cr_returning_addr_sk#10]
Right keys [1]: [ca_address_sk#60]
Join condition: None

(28) Project [codegen id : 6]
Output [3]: [cr_returning_customer_sk#7, _pushedexpression#87, ca_state#68]
Input [5]: [cr_returning_addr_sk#10, cr_returning_customer_sk#7, _pushedexpression#86, ca_address_sk#60, ca_state#68]

(29) HashAggregate [codegen id : 6]
Input [3]: [cr_returning_customer_sk#7, _pushedexpression#87, ca_state#68]
Keys [2]: [cr_returning_customer_sk#7, ca_state#68]
Functions [1]: [partial_sum(_pushedexpression#87)]
Aggregate Attributes [2]: [sum#88, isEmpty#89]
Results [4]: [cr_returning_customer_sk#7, ca_state#68, sum#90, isEmpty#91]

(30) Exchange
Input [4]: [cr_returning_customer_sk#7, ca_state#68, sum#90, isEmpty#91]
Arguments: hashpartitioning(cr_returning_customer_sk#7, ca_state#68, 5), ENSURE_REQUIREMENTS, [id=#92]

(31) HashAggregate [codegen id : 7]
Input [4]: [cr_returning_customer_sk#7, ca_state#68, sum#90, isEmpty#91]
Keys [2]: [cr_returning_customer_sk#7, ca_state#68]
Functions [1]: [sum(_pushedexpression#87)]
Aggregate Attributes [1]: [sum(_pushedexpression#87)#80]
Results [2]: [ca_state#68 AS ctr_state#82, cast(sum(_pushedexpression#87)#80 as decimal(17,2)) AS ctr_total_return#83]

(32) HashAggregate [codegen id : 7]
Input [2]: [ctr_state#82, ctr_total_return#83]
Keys [1]: [ctr_state#82]
Functions [1]: [partial_avg(ctr_total_return#83)]
Aggregate Attributes [2]: [sum#93, count#94]
Results [3]: [ctr_state#82, sum#95, count#96]

(33) Exchange
Input [3]: [ctr_state#82, sum#95, count#96]
Arguments: hashpartitioning(ctr_state#82, 5), ENSURE_REQUIREMENTS, [id=#97]

(34) HashAggregate [codegen id : 8]
Input [3]: [ctr_state#82, sum#95, count#96]
Keys [1]: [ctr_state#82]
Functions [1]: [avg(ctr_total_return#83)]
Aggregate Attributes [1]: [avg(ctr_total_return#83)#98]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#83)#98) * 1.200000), DecimalType(24,7)) AS (avg(ctr_total_return) * 1.2)#99, ctr_state#82 AS ctr_state#82#100]

(35) Filter [codegen id : 8]
Input [2]: [(avg(ctr_total_return) * 1.2)#99, ctr_state#82#100]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#99)

(36) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#99, ctr_state#82#100]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#101]

(37) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_state#82]
Right keys [1]: [ctr_state#82#100]
Join condition: (cast(ctr_total_return#83 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#99)

(38) Project [codegen id : 11]
Output [2]: [ctr_customer_sk#81, ctr_total_return#83]
Input [5]: [ctr_customer_sk#81, ctr_state#82, ctr_total_return#83, (avg(ctr_total_return) * 1.2)#99, ctr_state#82#100]

(39) Scan parquet default.customer
Output [6]: [c_customer_sk#102, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(40) ColumnarToRow [codegen id : 9]
Input [6]: [c_customer_sk#102, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107]

(41) Filter [codegen id : 9]
Input [6]: [c_customer_sk#102, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107]
Condition : (isnotnull(c_customer_sk#102) AND isnotnull(c_current_addr_sk#104))

(42) BroadcastExchange
Input [6]: [c_customer_sk#102, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#108]

(43) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_customer_sk#81]
Right keys [1]: [c_customer_sk#102]
Join condition: None

(44) Project [codegen id : 11]
Output [6]: [ctr_total_return#83, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107]
Input [8]: [ctr_customer_sk#81, ctr_total_return#83, c_customer_sk#102, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107]

(45) Scan parquet default.customer_address
Output [12]: [ca_address_sk#109, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(46) ColumnarToRow [codegen id : 10]
Input [12]: [ca_address_sk#109, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120]

(47) Filter [codegen id : 10]
Input [12]: [ca_address_sk#109, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120]
Condition : ((isnotnull(ca_state#116) AND (ca_state#116 = GA)) AND isnotnull(ca_address_sk#109))

(48) BroadcastExchange
Input [12]: [ca_address_sk#109, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#121]

(49) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#104]
Right keys [1]: [ca_address_sk#109]
Join condition: None

(50) Project [codegen id : 11]
Output [16]: [c_customer_id#103, c_salutation#105, c_first_name#106, c_last_name#107, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120, ctr_total_return#83]
Input [18]: [ctr_total_return#83, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107, ca_address_sk#109, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120]

(51) TakeOrderedAndProject
Input [16]: [c_customer_id#103, c_salutation#105, c_first_name#106, c_last_name#107, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120, ctr_total_return#83]
Arguments: 100, [c_customer_id#103 ASC NULLS FIRST, c_salutation#105 ASC NULLS FIRST, c_first_name#106 ASC NULLS FIRST, c_last_name#107 ASC NULLS FIRST, ca_street_number#110 ASC NULLS FIRST, ca_street_name#111 ASC NULLS FIRST, ca_street_type#112 ASC NULLS FIRST, ca_suite_number#113 ASC NULLS FIRST, ca_city#114 ASC NULLS FIRST, ca_county#115 ASC NULLS FIRST, ca_state#116 ASC NULLS FIRST, ca_zip#117 ASC NULLS FIRST, ca_country#118 ASC NULLS FIRST, ca_gmt_offset#119 ASC NULLS FIRST, ca_location_type#120 ASC NULLS FIRST, ctr_total_return#83 ASC NULLS FIRST], [c_customer_id#103, c_salutation#105, c_first_name#106, c_last_name#107, ca_street_number#110, ca_street_name#111, ca_street_type#112, ca_suite_number#113, ca_city#114, ca_county#115, ca_state#116, ca_zip#117, ca_country#118, ca_gmt_offset#119, ca_location_type#120, ctr_total_return#83]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cr_returned_date_sk#27 IN dynamicpruning#28
BroadcastExchange (55)
+- * Filter (54)
   +- * ColumnarToRow (53)
      +- Scan parquet default.date_dim (52)


(52) Scan parquet default.date_dim
Output [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(53) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]

(54) Filter [codegen id : 1]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Condition : ((isnotnull(d_year#35) AND (d_year#35 = 2000)) AND isnotnull(d_date_sk#29))

(55) BroadcastExchange
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#122]

Subquery:2 Hosting operator id = 19 Hosting Expression = cr_returned_date_sk#27 IN dynamicpruning#28


