== Physical Plan ==
TakeOrderedAndProject (49)
+- * Project (48)
   +- * SortMergeJoin Inner (47)
      :- * Sort (41)
      :  +- Exchange (40)
      :     +- * Project (39)
      :        +- * BroadcastHashJoin Inner BuildRight (38)
      :           :- * Project (32)
      :           :  +- * SortMergeJoin Inner (31)
      :           :     :- * Sort (14)
      :           :     :  +- Exchange (13)
      :           :     :     +- * Filter (12)
      :           :     :        +- * HashAggregate (11)
      :           :     :           +- Exchange (10)
      :           :     :              +- * HashAggregate (9)
      :           :     :                 +- * Project (8)
      :           :     :                    +- * BroadcastHashJoin Inner BuildRight (7)
      :           :     :                       :- * Project (5)
      :           :     :                       :  +- * HashAggregate (4)
      :           :     :                       :     +- * Filter (3)
      :           :     :                       :        +- * ColumnarToRow (2)
      :           :     :                       :           +- Scan parquet default.store_returns (1)
      :           :     :                       +- ReusedExchange (6)
      :           :     +- * Sort (30)
      :           :        +- * Filter (29)
      :           :           +- * HashAggregate (28)
      :           :              +- Exchange (27)
      :           :                 +- * HashAggregate (26)
      :           :                    +- * HashAggregate (25)
      :           :                       +- Exchange (24)
      :           :                          +- * HashAggregate (23)
      :           :                             +- * Project (22)
      :           :                                +- * BroadcastHashJoin Inner BuildRight (21)
      :           :                                   :- * Project (19)
      :           :                                   :  +- * HashAggregate (18)
      :           :                                   :     +- * Filter (17)
      :           :                                   :        +- * ColumnarToRow (16)
      :           :                                   :           +- Scan parquet default.store_returns (15)
      :           :                                   +- ReusedExchange (20)
      :           +- BroadcastExchange (37)
      :              +- * Project (36)
      :                 +- * Filter (35)
      :                    +- * ColumnarToRow (34)
      :                       +- Scan parquet default.store (33)
      +- * Sort (46)
         +- Exchange (45)
            +- * Filter (44)
               +- * ColumnarToRow (43)
                  +- Scan parquet default.customer (42)


(1) Scan parquet default.store_returns
Output [20]: [sr_return_time_sk#1, sr_item_sk#2, sr_customer_sk#3, sr_cdemo_sk#4, sr_hdemo_sk#5, sr_addr_sk#6, sr_store_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_return_amt#11, sr_return_tax#12, sr_return_amt_inc_tax#13, sr_fee#14, sr_return_ship_cost#15, sr_refunded_cash#16, sr_reversed_charge#17, sr_store_credit#18, sr_net_loss#19, sr_returned_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#20), dynamicpruningexpression(sr_returned_date_sk#20 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)]
ReadSchema: struct<sr_return_time_sk:int,sr_item_sk:int,sr_customer_sk:int,sr_cdemo_sk:int,sr_hdemo_sk:int,sr_addr_sk:int,sr_store_sk:int,sr_reason_sk:int,sr_ticket_number:int,sr_return_quantity:int,sr_return_amt:decimal(7,2),sr_return_tax:decimal(7,2),sr_return_amt_inc_tax:decimal(7,2),sr_fee:decimal(7,2),sr_return_ship_cost:decimal(7,2),sr_refunded_cash:decimal(7,2),sr_reversed_charge:decimal(7,2),sr_store_credit:decimal(7,2),sr_net_loss:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [20]: [sr_return_time_sk#1, sr_item_sk#2, sr_customer_sk#3, sr_cdemo_sk#4, sr_hdemo_sk#5, sr_addr_sk#6, sr_store_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_return_amt#11, sr_return_tax#12, sr_return_amt_inc_tax#13, sr_fee#14, sr_return_ship_cost#15, sr_refunded_cash#16, sr_reversed_charge#17, sr_store_credit#18, sr_net_loss#19, sr_returned_date_sk#20]

(3) Filter [codegen id : 2]
Input [20]: [sr_return_time_sk#1, sr_item_sk#2, sr_customer_sk#3, sr_cdemo_sk#4, sr_hdemo_sk#5, sr_addr_sk#6, sr_store_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_return_amt#11, sr_return_tax#12, sr_return_amt_inc_tax#13, sr_fee#14, sr_return_ship_cost#15, sr_refunded_cash#16, sr_reversed_charge#17, sr_store_credit#18, sr_net_loss#19, sr_returned_date_sk#20]
Condition : (isnotnull(sr_store_sk#7) AND isnotnull(sr_customer_sk#3))

(4) HashAggregate [codegen id : 2]
Input [20]: [sr_return_time_sk#1, sr_item_sk#2, sr_customer_sk#3, sr_cdemo_sk#4, sr_hdemo_sk#5, sr_addr_sk#6, sr_store_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_return_amt#11, sr_return_tax#12, sr_return_amt_inc_tax#13, sr_fee#14, sr_return_ship_cost#15, sr_refunded_cash#16, sr_reversed_charge#17, sr_store_credit#18, sr_net_loss#19, sr_returned_date_sk#20]
Keys [3]: [sr_returned_date_sk#20, sr_customer_sk#3, sr_store_sk#7]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#11))]
Aggregate Attributes [1]: [sum#22]
Results [4]: [sr_returned_date_sk#20, sr_customer_sk#3, sr_store_sk#7, sum#23]

(5) Project [codegen id : 2]
Output [4]: [sr_returned_date_sk#20, sr_customer_sk#3, sr_store_sk#7, sum#23 AS _pushedexpression#24]
Input [4]: [sr_returned_date_sk#20, sr_customer_sk#3, sr_store_sk#7, sum#23]

(6) ReusedExchange [Reuses operator id: 54]
Output [1]: [d_date_sk#25]

(7) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [sr_returned_date_sk#20]
Right keys [1]: [d_date_sk#25]
Join condition: None

(8) Project [codegen id : 2]
Output [3]: [sr_customer_sk#3, sr_store_sk#7, _pushedexpression#26]
Input [5]: [sr_returned_date_sk#20, sr_customer_sk#3, sr_store_sk#7, _pushedexpression#24, d_date_sk#25]

(9) HashAggregate [codegen id : 2]
Input [3]: [sr_customer_sk#3, sr_store_sk#7, _pushedexpression#26]
Keys [2]: [sr_customer_sk#3, sr_store_sk#7]
Functions [1]: [partial_sum(_pushedexpression#26)]
Aggregate Attributes [2]: [sum#27, isEmpty#28]
Results [4]: [sr_customer_sk#3, sr_store_sk#7, sum#29, isEmpty#30]

(10) Exchange
Input [4]: [sr_customer_sk#3, sr_store_sk#7, sum#29, isEmpty#30]
Arguments: hashpartitioning(sr_customer_sk#3, sr_store_sk#7, 5), ENSURE_REQUIREMENTS, [id=#31]

(11) HashAggregate [codegen id : 3]
Input [4]: [sr_customer_sk#3, sr_store_sk#7, sum#29, isEmpty#30]
Keys [2]: [sr_customer_sk#3, sr_store_sk#7]
Functions [1]: [sum(_pushedexpression#26)]
Aggregate Attributes [1]: [sum(_pushedexpression#26)#32]
Results [3]: [sr_customer_sk#3 AS ctr_customer_sk#33, sr_store_sk#7 AS ctr_store_sk#34, cast(sum(_pushedexpression#26)#32 as decimal(17,2)) AS ctr_total_return#35]

(12) Filter [codegen id : 3]
Input [3]: [ctr_customer_sk#33, ctr_store_sk#34, ctr_total_return#35]
Condition : isnotnull(ctr_total_return#35)

(13) Exchange
Input [3]: [ctr_customer_sk#33, ctr_store_sk#34, ctr_total_return#35]
Arguments: hashpartitioning(ctr_store_sk#34, 5), ENSURE_REQUIREMENTS, [id=#36]

(14) Sort [codegen id : 4]
Input [3]: [ctr_customer_sk#33, ctr_store_sk#34, ctr_total_return#35]
Arguments: [ctr_store_sk#34 ASC NULLS FIRST], false, 0

(15) Scan parquet default.store_returns
Output [20]: [sr_return_time_sk#1, sr_item_sk#2, sr_customer_sk#3, sr_cdemo_sk#4, sr_hdemo_sk#5, sr_addr_sk#6, sr_store_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_return_amt#11, sr_return_tax#12, sr_return_amt_inc_tax#13, sr_fee#14, sr_return_ship_cost#15, sr_refunded_cash#16, sr_reversed_charge#17, sr_store_credit#18, sr_net_loss#19, sr_returned_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#20), dynamicpruningexpression(sr_returned_date_sk#20 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_return_time_sk:int,sr_item_sk:int,sr_customer_sk:int,sr_cdemo_sk:int,sr_hdemo_sk:int,sr_addr_sk:int,sr_store_sk:int,sr_reason_sk:int,sr_ticket_number:int,sr_return_quantity:int,sr_return_amt:decimal(7,2),sr_return_tax:decimal(7,2),sr_return_amt_inc_tax:decimal(7,2),sr_fee:decimal(7,2),sr_return_ship_cost:decimal(7,2),sr_refunded_cash:decimal(7,2),sr_reversed_charge:decimal(7,2),sr_store_credit:decimal(7,2),sr_net_loss:decimal(7,2)>

(16) ColumnarToRow [codegen id : 6]
Input [20]: [sr_return_time_sk#1, sr_item_sk#2, sr_customer_sk#3, sr_cdemo_sk#4, sr_hdemo_sk#5, sr_addr_sk#6, sr_store_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_return_amt#11, sr_return_tax#12, sr_return_amt_inc_tax#13, sr_fee#14, sr_return_ship_cost#15, sr_refunded_cash#16, sr_reversed_charge#17, sr_store_credit#18, sr_net_loss#19, sr_returned_date_sk#20]

(17) Filter [codegen id : 6]
Input [20]: [sr_return_time_sk#1, sr_item_sk#2, sr_customer_sk#3, sr_cdemo_sk#4, sr_hdemo_sk#5, sr_addr_sk#6, sr_store_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_return_amt#11, sr_return_tax#12, sr_return_amt_inc_tax#13, sr_fee#14, sr_return_ship_cost#15, sr_refunded_cash#16, sr_reversed_charge#17, sr_store_credit#18, sr_net_loss#19, sr_returned_date_sk#20]
Condition : isnotnull(sr_store_sk#7)

(18) HashAggregate [codegen id : 6]
Input [20]: [sr_return_time_sk#1, sr_item_sk#2, sr_customer_sk#3, sr_cdemo_sk#4, sr_hdemo_sk#5, sr_addr_sk#6, sr_store_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_return_amt#11, sr_return_tax#12, sr_return_amt_inc_tax#13, sr_fee#14, sr_return_ship_cost#15, sr_refunded_cash#16, sr_reversed_charge#17, sr_store_credit#18, sr_net_loss#19, sr_returned_date_sk#20]
Keys [3]: [sr_returned_date_sk#20, sr_customer_sk#3, sr_store_sk#7]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#11))]
Aggregate Attributes [1]: [sum#37]
Results [4]: [sr_returned_date_sk#20, sr_customer_sk#3, sr_store_sk#7, sum#38]

(19) Project [codegen id : 6]
Output [4]: [sr_returned_date_sk#20, sr_customer_sk#3, sr_store_sk#7, sum#38 AS _pushedexpression#39]
Input [4]: [sr_returned_date_sk#20, sr_customer_sk#3, sr_store_sk#7, sum#38]

(20) ReusedExchange [Reuses operator id: 54]
Output [1]: [d_date_sk#25]

(21) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_returned_date_sk#20]
Right keys [1]: [d_date_sk#25]
Join condition: None

(22) Project [codegen id : 6]
Output [3]: [sr_customer_sk#3, sr_store_sk#7, _pushedexpression#40]
Input [5]: [sr_returned_date_sk#20, sr_customer_sk#3, sr_store_sk#7, _pushedexpression#39, d_date_sk#25]

(23) HashAggregate [codegen id : 6]
Input [3]: [sr_customer_sk#3, sr_store_sk#7, _pushedexpression#40]
Keys [2]: [sr_customer_sk#3, sr_store_sk#7]
Functions [1]: [partial_sum(_pushedexpression#40)]
Aggregate Attributes [2]: [sum#41, isEmpty#42]
Results [4]: [sr_customer_sk#3, sr_store_sk#7, sum#43, isEmpty#44]

(24) Exchange
Input [4]: [sr_customer_sk#3, sr_store_sk#7, sum#43, isEmpty#44]
Arguments: hashpartitioning(sr_customer_sk#3, sr_store_sk#7, 5), ENSURE_REQUIREMENTS, [id=#45]

(25) HashAggregate [codegen id : 7]
Input [4]: [sr_customer_sk#3, sr_store_sk#7, sum#43, isEmpty#44]
Keys [2]: [sr_customer_sk#3, sr_store_sk#7]
Functions [1]: [sum(_pushedexpression#40)]
Aggregate Attributes [1]: [sum(_pushedexpression#40)#32]
Results [2]: [sr_store_sk#7 AS ctr_store_sk#34, cast(sum(_pushedexpression#40)#32 as decimal(17,2)) AS ctr_total_return#35]

(26) HashAggregate [codegen id : 7]
Input [2]: [ctr_store_sk#34, ctr_total_return#35]
Keys [1]: [ctr_store_sk#34]
Functions [1]: [partial_avg(ctr_total_return#35)]
Aggregate Attributes [2]: [sum#46, count#47]
Results [3]: [ctr_store_sk#34, sum#48, count#49]

(27) Exchange
Input [3]: [ctr_store_sk#34, sum#48, count#49]
Arguments: hashpartitioning(ctr_store_sk#34, 5), ENSURE_REQUIREMENTS, [id=#50]

(28) HashAggregate [codegen id : 8]
Input [3]: [ctr_store_sk#34, sum#48, count#49]
Keys [1]: [ctr_store_sk#34]
Functions [1]: [avg(ctr_total_return#35)]
Aggregate Attributes [1]: [avg(ctr_total_return#35)#51]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#35)#51) * 1.200000), DecimalType(24,7)) AS (avg(ctr_total_return) * 1.2)#52, ctr_store_sk#34 AS ctr_store_sk#34#53]

(29) Filter [codegen id : 8]
Input [2]: [(avg(ctr_total_return) * 1.2)#52, ctr_store_sk#34#53]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#52)

(30) Sort [codegen id : 8]
Input [2]: [(avg(ctr_total_return) * 1.2)#52, ctr_store_sk#34#53]
Arguments: [ctr_store_sk#34#53 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 10]
Left keys [1]: [ctr_store_sk#34]
Right keys [1]: [ctr_store_sk#34#53]
Join condition: (cast(ctr_total_return#35 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#52)

(32) Project [codegen id : 10]
Output [2]: [ctr_customer_sk#33, ctr_store_sk#34]
Input [5]: [ctr_customer_sk#33, ctr_store_sk#34, ctr_total_return#35, (avg(ctr_total_return) * 1.2)#52, ctr_store_sk#34#53]

(33) Scan parquet default.store
Output [2]: [s_store_sk#54, s_state#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(34) ColumnarToRow [codegen id : 9]
Input [2]: [s_store_sk#54, s_state#55]

(35) Filter [codegen id : 9]
Input [2]: [s_store_sk#54, s_state#55]
Condition : ((isnotnull(s_state#55) AND (s_state#55 = TN)) AND isnotnull(s_store_sk#54))

(36) Project [codegen id : 9]
Output [1]: [s_store_sk#54]
Input [2]: [s_store_sk#54, s_state#55]

(37) BroadcastExchange
Input [1]: [s_store_sk#54]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ctr_store_sk#34]
Right keys [1]: [s_store_sk#54]
Join condition: None

(39) Project [codegen id : 10]
Output [1]: [ctr_customer_sk#33]
Input [3]: [ctr_customer_sk#33, ctr_store_sk#34, s_store_sk#54]

(40) Exchange
Input [1]: [ctr_customer_sk#33]
Arguments: hashpartitioning(ctr_customer_sk#33, 5), ENSURE_REQUIREMENTS, [id=#57]

(41) Sort [codegen id : 11]
Input [1]: [ctr_customer_sk#33]
Arguments: [ctr_customer_sk#33 ASC NULLS FIRST], false, 0

(42) Scan parquet default.customer
Output [2]: [c_customer_sk#58, c_customer_id#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string>

(43) ColumnarToRow [codegen id : 12]
Input [2]: [c_customer_sk#58, c_customer_id#59]

(44) Filter [codegen id : 12]
Input [2]: [c_customer_sk#58, c_customer_id#59]
Condition : isnotnull(c_customer_sk#58)

(45) Exchange
Input [2]: [c_customer_sk#58, c_customer_id#59]
Arguments: hashpartitioning(c_customer_sk#58, 5), ENSURE_REQUIREMENTS, [id=#60]

(46) Sort [codegen id : 13]
Input [2]: [c_customer_sk#58, c_customer_id#59]
Arguments: [c_customer_sk#58 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 14]
Left keys [1]: [ctr_customer_sk#33]
Right keys [1]: [c_customer_sk#58]
Join condition: None

(48) Project [codegen id : 14]
Output [1]: [c_customer_id#59]
Input [3]: [ctr_customer_sk#33, c_customer_sk#58, c_customer_id#59]

(49) TakeOrderedAndProject
Input [1]: [c_customer_id#59]
Arguments: 100, [c_customer_id#59 ASC NULLS FIRST], [c_customer_id#59]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = sr_returned_date_sk#20 IN dynamicpruning#21
BroadcastExchange (54)
+- * HashAggregate (53)
   +- * Filter (52)
      +- * ColumnarToRow (51)
         +- Scan parquet default.date_dim (50)


(50) Scan parquet default.date_dim
Output [28]: [d_date_sk#25, d_date_id#61, d_date#62, d_month_seq#63, d_week_seq#64, d_quarter_seq#65, d_year#66, d_dow#67, d_moy#68, d_dom#69, d_qoy#70, d_fy_year#71, d_fy_quarter_seq#72, d_fy_week_seq#73, d_day_name#74, d_quarter_name#75, d_holiday#76, d_weekend#77, d_following_holiday#78, d_first_dom#79, d_last_dom#80, d_same_day_ly#81, d_same_day_lq#82, d_current_day#83, d_current_week#84, d_current_month#85, d_current_quarter#86, d_current_year#87]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(51) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#61, d_date#62, d_month_seq#63, d_week_seq#64, d_quarter_seq#65, d_year#66, d_dow#67, d_moy#68, d_dom#69, d_qoy#70, d_fy_year#71, d_fy_quarter_seq#72, d_fy_week_seq#73, d_day_name#74, d_quarter_name#75, d_holiday#76, d_weekend#77, d_following_holiday#78, d_first_dom#79, d_last_dom#80, d_same_day_ly#81, d_same_day_lq#82, d_current_day#83, d_current_week#84, d_current_month#85, d_current_quarter#86, d_current_year#87]

(52) Filter [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#61, d_date#62, d_month_seq#63, d_week_seq#64, d_quarter_seq#65, d_year#66, d_dow#67, d_moy#68, d_dom#69, d_qoy#70, d_fy_year#71, d_fy_quarter_seq#72, d_fy_week_seq#73, d_day_name#74, d_quarter_name#75, d_holiday#76, d_weekend#77, d_following_holiday#78, d_first_dom#79, d_last_dom#80, d_same_day_ly#81, d_same_day_lq#82, d_current_day#83, d_current_week#84, d_current_month#85, d_current_quarter#86, d_current_year#87]
Condition : ((isnotnull(d_year#66) AND (d_year#66 = 2000)) AND isnotnull(d_date_sk#25))

(53) HashAggregate [codegen id : 1]
Input [28]: [d_date_sk#25, d_date_id#61, d_date#62, d_month_seq#63, d_week_seq#64, d_quarter_seq#65, d_year#66, d_dow#67, d_moy#68, d_dom#69, d_qoy#70, d_fy_year#71, d_fy_quarter_seq#72, d_fy_week_seq#73, d_day_name#74, d_quarter_name#75, d_holiday#76, d_weekend#77, d_following_holiday#78, d_first_dom#79, d_last_dom#80, d_same_day_ly#81, d_same_day_lq#82, d_current_day#83, d_current_week#84, d_current_month#85, d_current_quarter#86, d_current_year#87]
Keys [1]: [d_date_sk#25]
Functions: []
Aggregate Attributes: []
Results [1]: [d_date_sk#25]

(54) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#88]

Subquery:2 Hosting operator id = 15 Hosting Expression = sr_returned_date_sk#20 IN dynamicpruning#21


