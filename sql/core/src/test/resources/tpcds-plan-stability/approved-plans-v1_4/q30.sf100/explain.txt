== Physical Plan ==
TakeOrderedAndProject (63)
+- * Project (62)
   +- * BroadcastHashJoin Inner BuildRight (61)
      :- * Project (55)
      :  +- * SortMergeJoin Inner (54)
      :     :- * Sort (48)
      :     :  +- Exchange (47)
      :     :     +- * Project (46)
      :     :        +- * SortMergeJoin Inner (45)
      :     :           :- * Sort (23)
      :     :           :  +- Exchange (22)
      :     :           :     +- * Filter (21)
      :     :           :        +- * HashAggregate (20)
      :     :           :           +- Exchange (19)
      :     :           :              +- * HashAggregate (18)
      :     :           :                 +- * Project (17)
      :     :           :                    +- * SortMergeJoin Inner (16)
      :     :           :                       :- * Sort (9)
      :     :           :                       :  +- Exchange (8)
      :     :           :                       :     +- * Project (7)
      :     :           :                       :        +- * HashAggregate (6)
      :     :           :                       :           +- * BroadcastHashJoin Inner BuildRight (5)
      :     :           :                       :              :- * Filter (3)
      :     :           :                       :              :  +- * ColumnarToRow (2)
      :     :           :                       :              :     +- Scan parquet default.web_returns (1)
      :     :           :                       :              +- ReusedExchange (4)
      :     :           :                       +- * Sort (15)
      :     :           :                          +- Exchange (14)
      :     :           :                             +- * HashAggregate (13)
      :     :           :                                +- * Filter (12)
      :     :           :                                   +- * ColumnarToRow (11)
      :     :           :                                      +- Scan parquet default.customer_address (10)
      :     :           +- * Sort (44)
      :     :              +- * Filter (43)
      :     :                 +- * HashAggregate (42)
      :     :                    +- Exchange (41)
      :     :                       +- * HashAggregate (40)
      :     :                          +- * HashAggregate (39)
      :     :                             +- Exchange (38)
      :     :                                +- * HashAggregate (37)
      :     :                                   +- * Project (36)
      :     :                                      +- * SortMergeJoin Inner (35)
      :     :                                         :- * Sort (32)
      :     :                                         :  +- Exchange (31)
      :     :                                         :     +- * Project (30)
      :     :                                         :        +- * HashAggregate (29)
      :     :                                         :           +- * BroadcastHashJoin Inner BuildRight (28)
      :     :                                         :              :- * Filter (26)
      :     :                                         :              :  +- * ColumnarToRow (25)
      :     :                                         :              :     +- Scan parquet default.web_returns (24)
      :     :                                         :              +- ReusedExchange (27)
      :     :                                         +- * Sort (34)
      :     :                                            +- ReusedExchange (33)
      :     +- * Sort (53)
      :        +- Exchange (52)
      :           +- * Filter (51)
      :              +- * ColumnarToRow (50)
      :                 +- Scan parquet default.customer (49)
      +- BroadcastExchange (60)
         +- * Project (59)
            +- * Filter (58)
               +- * ColumnarToRow (57)
                  +- Scan parquet default.customer_address (56)


(1) Scan parquet default.web_returns
Output [24]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#24), dynamicpruningexpression(wr_returned_date_sk#24 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(wr_returning_addr_sk), IsNotNull(wr_returning_customer_sk)]
ReadSchema: struct<wr_returned_time_sk:int,wr_item_sk:int,wr_refunded_customer_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_hdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_customer_sk:int,wr_returning_cdemo_sk:int,wr_returning_hdemo_sk:int,wr_returning_addr_sk:int,wr_web_page_sk:int,wr_reason_sk:int,wr_order_number:int,wr_return_quantity:int,wr_return_amt:decimal(7,2),wr_return_tax:decimal(7,2),wr_return_amt_inc_tax:decimal(7,2),wr_fee:decimal(7,2),wr_return_ship_cost:decimal(7,2),wr_refunded_cash:decimal(7,2),wr_reversed_charge:decimal(7,2),wr_account_credit:decimal(7,2),wr_net_loss:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [24]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24]

(3) Filter [codegen id : 2]
Input [24]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24]
Condition : (isnotnull(wr_returning_addr_sk#10) AND isnotnull(wr_returning_customer_sk#7))

(4) ReusedExchange [Reuses operator id: 67]
Output [28]: [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [wr_returned_date_sk#24]
Right keys [1]: [d_date_sk#26]
Join condition: None

(6) HashAggregate [codegen id : 2]
Input [52]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24, d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]
Keys [2]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#15))]
Aggregate Attributes [1]: [sum#54]
Results [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, sum#55]

(7) Project [codegen id : 2]
Output [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, sum#55 AS _pushedexpression#56]
Input [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, sum#55]

(8) Exchange
Input [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, _pushedexpression#56]
Arguments: hashpartitioning(wr_returning_addr_sk#10, 5), ENSURE_REQUIREMENTS, [id=#57]

(9) Sort [codegen id : 3]
Input [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, _pushedexpression#56]
Arguments: [wr_returning_addr_sk#10 ASC NULLS FIRST], false, 0

(10) Scan parquet default.customer_address
Output [13]: [ca_address_sk#58, ca_address_id#59, ca_street_number#60, ca_street_name#61, ca_street_type#62, ca_suite_number#63, ca_city#64, ca_county#65, ca_state#66, ca_zip#67, ca_country#68, ca_gmt_offset#69, ca_location_type#70]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(11) ColumnarToRow [codegen id : 4]
Input [13]: [ca_address_sk#58, ca_address_id#59, ca_street_number#60, ca_street_name#61, ca_street_type#62, ca_suite_number#63, ca_city#64, ca_county#65, ca_state#66, ca_zip#67, ca_country#68, ca_gmt_offset#69, ca_location_type#70]

(12) Filter [codegen id : 4]
Input [13]: [ca_address_sk#58, ca_address_id#59, ca_street_number#60, ca_street_name#61, ca_street_type#62, ca_suite_number#63, ca_city#64, ca_county#65, ca_state#66, ca_zip#67, ca_country#68, ca_gmt_offset#69, ca_location_type#70]
Condition : (isnotnull(ca_address_sk#58) AND isnotnull(ca_state#66))

(13) HashAggregate [codegen id : 4]
Input [13]: [ca_address_sk#58, ca_address_id#59, ca_street_number#60, ca_street_name#61, ca_street_type#62, ca_suite_number#63, ca_city#64, ca_county#65, ca_state#66, ca_zip#67, ca_country#68, ca_gmt_offset#69, ca_location_type#70]
Keys [2]: [ca_address_sk#58, ca_state#66]
Functions: []
Aggregate Attributes: []
Results [2]: [ca_address_sk#58, ca_state#66]

(14) Exchange
Input [2]: [ca_address_sk#58, ca_state#66]
Arguments: hashpartitioning(ca_address_sk#58, 5), ENSURE_REQUIREMENTS, [id=#71]

(15) Sort [codegen id : 5]
Input [2]: [ca_address_sk#58, ca_state#66]
Arguments: [ca_address_sk#58 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 6]
Left keys [1]: [wr_returning_addr_sk#10]
Right keys [1]: [ca_address_sk#58]
Join condition: None

(17) Project [codegen id : 6]
Output [3]: [wr_returning_customer_sk#7, _pushedexpression#72, ca_state#66]
Input [5]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, _pushedexpression#56, ca_address_sk#58, ca_state#66]

(18) HashAggregate [codegen id : 6]
Input [3]: [wr_returning_customer_sk#7, _pushedexpression#72, ca_state#66]
Keys [2]: [wr_returning_customer_sk#7, ca_state#66]
Functions [1]: [partial_sum(_pushedexpression#72)]
Aggregate Attributes [2]: [sum#73, isEmpty#74]
Results [4]: [wr_returning_customer_sk#7, ca_state#66, sum#75, isEmpty#76]

(19) Exchange
Input [4]: [wr_returning_customer_sk#7, ca_state#66, sum#75, isEmpty#76]
Arguments: hashpartitioning(wr_returning_customer_sk#7, ca_state#66, 5), ENSURE_REQUIREMENTS, [id=#77]

(20) HashAggregate [codegen id : 7]
Input [4]: [wr_returning_customer_sk#7, ca_state#66, sum#75, isEmpty#76]
Keys [2]: [wr_returning_customer_sk#7, ca_state#66]
Functions [1]: [sum(_pushedexpression#72)]
Aggregate Attributes [1]: [sum(_pushedexpression#72)#78]
Results [3]: [wr_returning_customer_sk#7 AS ctr_customer_sk#79, ca_state#66 AS ctr_state#80, cast(sum(_pushedexpression#72)#78 as decimal(17,2)) AS ctr_total_return#81]

(21) Filter [codegen id : 7]
Input [3]: [ctr_customer_sk#79, ctr_state#80, ctr_total_return#81]
Condition : isnotnull(ctr_total_return#81)

(22) Exchange
Input [3]: [ctr_customer_sk#79, ctr_state#80, ctr_total_return#81]
Arguments: hashpartitioning(ctr_state#80, 5), ENSURE_REQUIREMENTS, [id=#82]

(23) Sort [codegen id : 8]
Input [3]: [ctr_customer_sk#79, ctr_state#80, ctr_total_return#81]
Arguments: [ctr_state#80 ASC NULLS FIRST], false, 0

(24) Scan parquet default.web_returns
Output [24]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#24), dynamicpruningexpression(wr_returned_date_sk#24 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(wr_returning_addr_sk)]
ReadSchema: struct<wr_returned_time_sk:int,wr_item_sk:int,wr_refunded_customer_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_hdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_customer_sk:int,wr_returning_cdemo_sk:int,wr_returning_hdemo_sk:int,wr_returning_addr_sk:int,wr_web_page_sk:int,wr_reason_sk:int,wr_order_number:int,wr_return_quantity:int,wr_return_amt:decimal(7,2),wr_return_tax:decimal(7,2),wr_return_amt_inc_tax:decimal(7,2),wr_fee:decimal(7,2),wr_return_ship_cost:decimal(7,2),wr_refunded_cash:decimal(7,2),wr_reversed_charge:decimal(7,2),wr_account_credit:decimal(7,2),wr_net_loss:decimal(7,2)>

(25) ColumnarToRow [codegen id : 10]
Input [24]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24]

(26) Filter [codegen id : 10]
Input [24]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24]
Condition : isnotnull(wr_returning_addr_sk#10)

(27) ReusedExchange [Reuses operator id: 67]
Output [28]: [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]

(28) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [wr_returned_date_sk#24]
Right keys [1]: [d_date_sk#26]
Join condition: None

(29) HashAggregate [codegen id : 10]
Input [52]: [wr_returned_time_sk#1, wr_item_sk#2, wr_refunded_customer_sk#3, wr_refunded_cdemo_sk#4, wr_refunded_hdemo_sk#5, wr_refunded_addr_sk#6, wr_returning_customer_sk#7, wr_returning_cdemo_sk#8, wr_returning_hdemo_sk#9, wr_returning_addr_sk#10, wr_web_page_sk#11, wr_reason_sk#12, wr_order_number#13, wr_return_quantity#14, wr_return_amt#15, wr_return_tax#16, wr_return_amt_inc_tax#17, wr_fee#18, wr_return_ship_cost#19, wr_refunded_cash#20, wr_reversed_charge#21, wr_account_credit#22, wr_net_loss#23, wr_returned_date_sk#24, d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]
Keys [2]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#15))]
Aggregate Attributes [1]: [sum#83]
Results [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, sum#84]

(30) Project [codegen id : 10]
Output [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, sum#84 AS _pushedexpression#85]
Input [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, sum#84]

(31) Exchange
Input [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, _pushedexpression#85]
Arguments: hashpartitioning(wr_returning_addr_sk#10, 5), ENSURE_REQUIREMENTS, [id=#86]

(32) Sort [codegen id : 11]
Input [3]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, _pushedexpression#85]
Arguments: [wr_returning_addr_sk#10 ASC NULLS FIRST], false, 0

(33) ReusedExchange [Reuses operator id: 14]
Output [2]: [ca_address_sk#58, ca_state#66]

(34) Sort [codegen id : 13]
Input [2]: [ca_address_sk#58, ca_state#66]
Arguments: [ca_address_sk#58 ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 14]
Left keys [1]: [wr_returning_addr_sk#10]
Right keys [1]: [ca_address_sk#58]
Join condition: None

(36) Project [codegen id : 14]
Output [3]: [wr_returning_customer_sk#7, _pushedexpression#87, ca_state#66]
Input [5]: [wr_returning_addr_sk#10, wr_returning_customer_sk#7, _pushedexpression#85, ca_address_sk#58, ca_state#66]

(37) HashAggregate [codegen id : 14]
Input [3]: [wr_returning_customer_sk#7, _pushedexpression#87, ca_state#66]
Keys [2]: [wr_returning_customer_sk#7, ca_state#66]
Functions [1]: [partial_sum(_pushedexpression#87)]
Aggregate Attributes [2]: [sum#88, isEmpty#89]
Results [4]: [wr_returning_customer_sk#7, ca_state#66, sum#90, isEmpty#91]

(38) Exchange
Input [4]: [wr_returning_customer_sk#7, ca_state#66, sum#90, isEmpty#91]
Arguments: hashpartitioning(wr_returning_customer_sk#7, ca_state#66, 5), ENSURE_REQUIREMENTS, [id=#92]

(39) HashAggregate [codegen id : 15]
Input [4]: [wr_returning_customer_sk#7, ca_state#66, sum#90, isEmpty#91]
Keys [2]: [wr_returning_customer_sk#7, ca_state#66]
Functions [1]: [sum(_pushedexpression#87)]
Aggregate Attributes [1]: [sum(_pushedexpression#87)#78]
Results [2]: [ca_state#66 AS ctr_state#80, cast(sum(_pushedexpression#87)#78 as decimal(17,2)) AS ctr_total_return#81]

(40) HashAggregate [codegen id : 15]
Input [2]: [ctr_state#80, ctr_total_return#81]
Keys [1]: [ctr_state#80]
Functions [1]: [partial_avg(ctr_total_return#81)]
Aggregate Attributes [2]: [sum#93, count#94]
Results [3]: [ctr_state#80, sum#95, count#96]

(41) Exchange
Input [3]: [ctr_state#80, sum#95, count#96]
Arguments: hashpartitioning(ctr_state#80, 5), ENSURE_REQUIREMENTS, [id=#97]

(42) HashAggregate [codegen id : 16]
Input [3]: [ctr_state#80, sum#95, count#96]
Keys [1]: [ctr_state#80]
Functions [1]: [avg(ctr_total_return#81)]
Aggregate Attributes [1]: [avg(ctr_total_return#81)#98]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#81)#98) * 1.200000), DecimalType(24,7)) AS (avg(ctr_total_return) * 1.2)#99, ctr_state#80 AS ctr_state#80#100]

(43) Filter [codegen id : 16]
Input [2]: [(avg(ctr_total_return) * 1.2)#99, ctr_state#80#100]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#99)

(44) Sort [codegen id : 16]
Input [2]: [(avg(ctr_total_return) * 1.2)#99, ctr_state#80#100]
Arguments: [ctr_state#80#100 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 17]
Left keys [1]: [ctr_state#80]
Right keys [1]: [ctr_state#80#100]
Join condition: (cast(ctr_total_return#81 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#99)

(46) Project [codegen id : 17]
Output [2]: [ctr_customer_sk#79, ctr_total_return#81]
Input [5]: [ctr_customer_sk#79, ctr_state#80, ctr_total_return#81, (avg(ctr_total_return) * 1.2)#99, ctr_state#80#100]

(47) Exchange
Input [2]: [ctr_customer_sk#79, ctr_total_return#81]
Arguments: hashpartitioning(ctr_customer_sk#79, 5), ENSURE_REQUIREMENTS, [id=#101]

(48) Sort [codegen id : 18]
Input [2]: [ctr_customer_sk#79, ctr_total_return#81]
Arguments: [ctr_customer_sk#79 ASC NULLS FIRST], false, 0

(49) Scan parquet default.customer
Output [14]: [c_customer_sk#102, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(50) ColumnarToRow [codegen id : 19]
Input [14]: [c_customer_sk#102, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115]

(51) Filter [codegen id : 19]
Input [14]: [c_customer_sk#102, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115]
Condition : (isnotnull(c_customer_sk#102) AND isnotnull(c_current_addr_sk#104))

(52) Exchange
Input [14]: [c_customer_sk#102, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115]
Arguments: hashpartitioning(c_customer_sk#102, 5), ENSURE_REQUIREMENTS, [id=#116]

(53) Sort [codegen id : 20]
Input [14]: [c_customer_sk#102, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115]
Arguments: [c_customer_sk#102 ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 22]
Left keys [1]: [ctr_customer_sk#79]
Right keys [1]: [c_customer_sk#102]
Join condition: None

(55) Project [codegen id : 22]
Output [14]: [ctr_total_return#81, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115]
Input [16]: [ctr_customer_sk#79, ctr_total_return#81, c_customer_sk#102, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115]

(56) Scan parquet default.customer_address
Output [2]: [ca_address_sk#117, ca_state#118]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(57) ColumnarToRow [codegen id : 21]
Input [2]: [ca_address_sk#117, ca_state#118]

(58) Filter [codegen id : 21]
Input [2]: [ca_address_sk#117, ca_state#118]
Condition : ((isnotnull(ca_state#118) AND (ca_state#118 = GA)) AND isnotnull(ca_address_sk#117))

(59) Project [codegen id : 21]
Output [1]: [ca_address_sk#117]
Input [2]: [ca_address_sk#117, ca_state#118]

(60) BroadcastExchange
Input [1]: [ca_address_sk#117]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#119]

(61) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [c_current_addr_sk#104]
Right keys [1]: [ca_address_sk#117]
Join condition: None

(62) Project [codegen id : 22]
Output [13]: [c_customer_id#103, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115, ctr_total_return#81]
Input [15]: [ctr_total_return#81, c_customer_id#103, c_current_addr_sk#104, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115, ca_address_sk#117]

(63) TakeOrderedAndProject
Input [13]: [c_customer_id#103, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115, ctr_total_return#81]
Arguments: 100, [c_customer_id#103 ASC NULLS FIRST, c_salutation#105 ASC NULLS FIRST, c_first_name#106 ASC NULLS FIRST, c_last_name#107 ASC NULLS FIRST, c_preferred_cust_flag#108 ASC NULLS FIRST, c_birth_day#109 ASC NULLS FIRST, c_birth_month#110 ASC NULLS FIRST, c_birth_year#111 ASC NULLS FIRST, c_birth_country#112 ASC NULLS FIRST, c_login#113 ASC NULLS FIRST, c_email_address#114 ASC NULLS FIRST, c_last_review_date#115 ASC NULLS FIRST, ctr_total_return#81 ASC NULLS FIRST], [c_customer_id#103, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115, ctr_total_return#81]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = wr_returned_date_sk#24 IN dynamicpruning#25
BroadcastExchange (67)
+- * Filter (66)
   +- * ColumnarToRow (65)
      +- Scan parquet default.date_dim (64)


(64) Scan parquet default.date_dim
Output [28]: [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(65) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]

(66) Filter [codegen id : 1]
Input [28]: [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]
Condition : ((isnotnull(d_year#32) AND (d_year#32 = 2002)) AND isnotnull(d_date_sk#26))

(67) BroadcastExchange
Input [28]: [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, d_current_week#50, d_current_month#51, d_current_quarter#52, d_current_year#53]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#120]

Subquery:2 Hosting operator id = 24 Hosting Expression = wr_returned_date_sk#24 IN dynamicpruning#25


