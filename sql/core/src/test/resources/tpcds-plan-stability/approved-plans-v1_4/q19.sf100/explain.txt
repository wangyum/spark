== Physical Plan ==
TakeOrderedAndProject (40)
+- * HashAggregate (39)
   +- Exchange (38)
      +- * HashAggregate (37)
         +- * Project (36)
            +- * BroadcastHashJoin Inner BuildRight (35)
               :- * Project (29)
               :  +- HashAggregate (28)
               :     +- Project (27)
               :        +- SortMergeJoin Inner (26)
               :           :- * Sort (12)
               :           :  +- Exchange (11)
               :           :     +- * BroadcastHashJoin Inner BuildRight (10)
               :           :        :- * BroadcastHashJoin Inner BuildRight (8)
               :           :        :  :- * Filter (3)
               :           :        :  :  +- * ColumnarToRow (2)
               :           :        :  :     +- Scan parquet default.store_sales (1)
               :           :        :  +- BroadcastExchange (7)
               :           :        :     +- * Filter (6)
               :           :        :        +- * ColumnarToRow (5)
               :           :        :           +- Scan parquet default.item (4)
               :           :        +- ReusedExchange (9)
               :           +- * Sort (25)
               :              +- Exchange (24)
               :                 +- * SortMergeJoin Inner (23)
               :                    :- * Sort (17)
               :                    :  +- Exchange (16)
               :                    :     +- * Filter (15)
               :                    :        +- * ColumnarToRow (14)
               :                    :           +- Scan parquet default.customer (13)
               :                    +- * Sort (22)
               :                       +- Exchange (21)
               :                          +- * Filter (20)
               :                             +- * ColumnarToRow (19)
               :                                +- Scan parquet default.customer_address (18)
               +- BroadcastExchange (34)
                  +- * HashAggregate (33)
                     +- * Filter (32)
                        +- * ColumnarToRow (31)
                           +- Scan parquet default.store (30)


(1) Scan parquet default.store_sales
Output [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#23), dynamicpruningexpression(ss_sold_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]

(3) Filter [codegen id : 3]
Input [23]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23]
Condition : ((isnotnull(ss_store_sk#7) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_customer_sk#3))

(4) Scan parquet default.item
Output [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,8), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_rec_start_date:date,i_rec_end_date:date,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand_id:int,i_brand:string,i_class_id:int,i_class:string,i_category_id:int,i_category:string,i_manufact_id:int,i_manufact:string,i_size:string,i_formulation:string,i_color:string,i_units:string,i_container:string,i_manager_id:int,i_product_name:string>

(5) ColumnarToRow [codegen id : 1]
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]

(6) Filter [codegen id : 1]
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Condition : ((isnotnull(i_manager_id#45) AND (i_manager_id#45 = 8)) AND isnotnull(i_item_sk#25))

(7) BroadcastExchange
Input [22]: [i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#25]
Join condition: None

(9) ReusedExchange [Reuses operator id: 44]
Output [28]: [d_date_sk#48, d_date_id#49, d_date#50, d_month_seq#51, d_week_seq#52, d_quarter_seq#53, d_year#54, d_dow#55, d_moy#56, d_dom#57, d_qoy#58, d_fy_year#59, d_fy_quarter_seq#60, d_fy_week_seq#61, d_day_name#62, d_quarter_name#63, d_holiday#64, d_weekend#65, d_following_holiday#66, d_first_dom#67, d_last_dom#68, d_same_day_ly#69, d_same_day_lq#70, d_current_day#71, d_current_week#72, d_current_month#73, d_current_quarter#74, d_current_year#75]

(10) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#48]
Join condition: None

(11) Exchange
Input [73]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46, d_date_sk#48, d_date_id#49, d_date#50, d_month_seq#51, d_week_seq#52, d_quarter_seq#53, d_year#54, d_dow#55, d_moy#56, d_dom#57, d_qoy#58, d_fy_year#59, d_fy_quarter_seq#60, d_fy_week_seq#61, d_day_name#62, d_quarter_name#63, d_holiday#64, d_weekend#65, d_following_holiday#66, d_first_dom#67, d_last_dom#68, d_same_day_ly#69, d_same_day_lq#70, d_current_day#71, d_current_week#72, d_current_month#73, d_current_quarter#74, d_current_year#75]
Arguments: hashpartitioning(ss_customer_sk#3, 5), ENSURE_REQUIREMENTS, [id=#76]

(12) Sort [codegen id : 4]
Input [73]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46, d_date_sk#48, d_date_id#49, d_date#50, d_month_seq#51, d_week_seq#52, d_quarter_seq#53, d_year#54, d_dow#55, d_moy#56, d_dom#57, d_qoy#58, d_fy_year#59, d_fy_quarter_seq#60, d_fy_week_seq#61, d_day_name#62, d_quarter_name#63, d_holiday#64, d_weekend#65, d_following_holiday#66, d_first_dom#67, d_last_dom#68, d_same_day_ly#69, d_same_day_lq#70, d_current_day#71, d_current_week#72, d_current_month#73, d_current_quarter#74, d_current_year#75]
Arguments: [ss_customer_sk#3 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer
Output [18]: [c_customer_sk#77, c_customer_id#78, c_current_cdemo_sk#79, c_current_hdemo_sk#80, c_current_addr_sk#81, c_first_shipto_date_sk#82, c_first_sales_date_sk#83, c_salutation#84, c_first_name#85, c_last_name#86, c_preferred_cust_flag#87, c_birth_day#88, c_birth_month#89, c_birth_year#90, c_birth_country#91, c_login#92, c_email_address#93, c_last_review_date#94]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(14) ColumnarToRow [codegen id : 5]
Input [18]: [c_customer_sk#77, c_customer_id#78, c_current_cdemo_sk#79, c_current_hdemo_sk#80, c_current_addr_sk#81, c_first_shipto_date_sk#82, c_first_sales_date_sk#83, c_salutation#84, c_first_name#85, c_last_name#86, c_preferred_cust_flag#87, c_birth_day#88, c_birth_month#89, c_birth_year#90, c_birth_country#91, c_login#92, c_email_address#93, c_last_review_date#94]

(15) Filter [codegen id : 5]
Input [18]: [c_customer_sk#77, c_customer_id#78, c_current_cdemo_sk#79, c_current_hdemo_sk#80, c_current_addr_sk#81, c_first_shipto_date_sk#82, c_first_sales_date_sk#83, c_salutation#84, c_first_name#85, c_last_name#86, c_preferred_cust_flag#87, c_birth_day#88, c_birth_month#89, c_birth_year#90, c_birth_country#91, c_login#92, c_email_address#93, c_last_review_date#94]
Condition : (isnotnull(c_customer_sk#77) AND isnotnull(c_current_addr_sk#81))

(16) Exchange
Input [18]: [c_customer_sk#77, c_customer_id#78, c_current_cdemo_sk#79, c_current_hdemo_sk#80, c_current_addr_sk#81, c_first_shipto_date_sk#82, c_first_sales_date_sk#83, c_salutation#84, c_first_name#85, c_last_name#86, c_preferred_cust_flag#87, c_birth_day#88, c_birth_month#89, c_birth_year#90, c_birth_country#91, c_login#92, c_email_address#93, c_last_review_date#94]
Arguments: hashpartitioning(c_current_addr_sk#81, 5), ENSURE_REQUIREMENTS, [id=#95]

(17) Sort [codegen id : 6]
Input [18]: [c_customer_sk#77, c_customer_id#78, c_current_cdemo_sk#79, c_current_hdemo_sk#80, c_current_addr_sk#81, c_first_shipto_date_sk#82, c_first_sales_date_sk#83, c_salutation#84, c_first_name#85, c_last_name#86, c_preferred_cust_flag#87, c_birth_day#88, c_birth_month#89, c_birth_year#90, c_birth_country#91, c_login#92, c_email_address#93, c_last_review_date#94]
Arguments: [c_current_addr_sk#81 ASC NULLS FIRST], false, 0

(18) Scan parquet default.customer_address
Output [13]: [ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_address_id:string,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(19) ColumnarToRow [codegen id : 7]
Input [13]: [ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]

(20) Filter [codegen id : 7]
Input [13]: [ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]
Condition : (isnotnull(ca_address_sk#96) AND isnotnull(ca_zip#105))

(21) Exchange
Input [13]: [ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]
Arguments: hashpartitioning(ca_address_sk#96, 5), ENSURE_REQUIREMENTS, [id=#109]

(22) Sort [codegen id : 8]
Input [13]: [ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]
Arguments: [ca_address_sk#96 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#81]
Right keys [1]: [ca_address_sk#96]
Join condition: None

(24) Exchange
Input [31]: [c_customer_sk#77, c_customer_id#78, c_current_cdemo_sk#79, c_current_hdemo_sk#80, c_current_addr_sk#81, c_first_shipto_date_sk#82, c_first_sales_date_sk#83, c_salutation#84, c_first_name#85, c_last_name#86, c_preferred_cust_flag#87, c_birth_day#88, c_birth_month#89, c_birth_year#90, c_birth_country#91, c_login#92, c_email_address#93, c_last_review_date#94, ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]
Arguments: hashpartitioning(c_customer_sk#77, 5), ENSURE_REQUIREMENTS, [id=#110]

(25) Sort [codegen id : 10]
Input [31]: [c_customer_sk#77, c_customer_id#78, c_current_cdemo_sk#79, c_current_hdemo_sk#80, c_current_addr_sk#81, c_first_shipto_date_sk#82, c_first_sales_date_sk#83, c_salutation#84, c_first_name#85, c_last_name#86, c_preferred_cust_flag#87, c_birth_day#88, c_birth_month#89, c_birth_year#90, c_birth_country#91, c_login#92, c_email_address#93, c_last_review_date#94, ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]
Arguments: [c_customer_sk#77 ASC NULLS FIRST], false, 0

(26) SortMergeJoin
Left keys [1]: [ss_customer_sk#3]
Right keys [1]: [c_customer_sk#77]
Join condition: None

(27) Project
Output [104]: [d_date_sk#48, d_date_id#49, d_date#50, d_month_seq#51, d_week_seq#52, d_quarter_seq#53, d_year#54, d_dow#55, d_moy#56, d_dom#57, d_qoy#58, d_fy_year#59, d_fy_quarter_seq#60, d_fy_week_seq#61, d_day_name#62, d_quarter_name#63, d_holiday#64, d_weekend#65, d_following_holiday#66, d_first_dom#67, d_last_dom#68, d_same_day_ly#69, d_same_day_lq#70, d_current_day#71, d_current_week#72, d_current_month#73, d_current_quarter#74, d_current_year#75, ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46, c_customer_sk#77, c_customer_id#78, c_current_cdemo_sk#79, c_current_hdemo_sk#80, c_current_addr_sk#81, c_first_shipto_date_sk#82, c_first_sales_date_sk#83, c_salutation#84, c_first_name#85, c_last_name#86, c_preferred_cust_flag#87, c_birth_day#88, c_birth_month#89, c_birth_year#90, c_birth_country#91, c_login#92, c_email_address#93, c_last_review_date#94, ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]
Input [104]: [ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46, d_date_sk#48, d_date_id#49, d_date#50, d_month_seq#51, d_week_seq#52, d_quarter_seq#53, d_year#54, d_dow#55, d_moy#56, d_dom#57, d_qoy#58, d_fy_year#59, d_fy_quarter_seq#60, d_fy_week_seq#61, d_day_name#62, d_quarter_name#63, d_holiday#64, d_weekend#65, d_following_holiday#66, d_first_dom#67, d_last_dom#68, d_same_day_ly#69, d_same_day_lq#70, d_current_day#71, d_current_week#72, d_current_month#73, d_current_quarter#74, d_current_year#75, c_customer_sk#77, c_customer_id#78, c_current_cdemo_sk#79, c_current_hdemo_sk#80, c_current_addr_sk#81, c_first_shipto_date_sk#82, c_first_sales_date_sk#83, c_salutation#84, c_first_name#85, c_last_name#86, c_preferred_cust_flag#87, c_birth_day#88, c_birth_month#89, c_birth_year#90, c_birth_country#91, c_login#92, c_email_address#93, c_last_review_date#94, ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]

(28) HashAggregate
Input [104]: [d_date_sk#48, d_date_id#49, d_date#50, d_month_seq#51, d_week_seq#52, d_quarter_seq#53, d_year#54, d_dow#55, d_moy#56, d_dom#57, d_qoy#58, d_fy_year#59, d_fy_quarter_seq#60, d_fy_week_seq#61, d_day_name#62, d_quarter_name#63, d_holiday#64, d_weekend#65, d_following_holiday#66, d_first_dom#67, d_last_dom#68, d_same_day_ly#69, d_same_day_lq#70, d_current_day#71, d_current_week#72, d_current_month#73, d_current_quarter#74, d_current_year#75, ss_sold_time_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_quantity#10, ss_wholesale_cost#11, ss_list_price#12, ss_sales_price#13, ss_ext_discount_amt#14, ss_ext_sales_price#15, ss_ext_wholesale_cost#16, ss_ext_list_price#17, ss_ext_tax#18, ss_coupon_amt#19, ss_net_paid#20, ss_net_paid_inc_tax#21, ss_net_profit#22, ss_sold_date_sk#23, i_item_sk#25, i_item_id#26, i_rec_start_date#27, i_rec_end_date#28, i_item_desc#29, i_current_price#30, i_wholesale_cost#31, i_brand_id#32, i_brand#33, i_class_id#34, i_class#35, i_category_id#36, i_category#37, i_manufact_id#38, i_manufact#39, i_size#40, i_formulation#41, i_color#42, i_units#43, i_container#44, i_manager_id#45, i_product_name#46, c_customer_sk#77, c_customer_id#78, c_current_cdemo_sk#79, c_current_hdemo_sk#80, c_current_addr_sk#81, c_first_shipto_date_sk#82, c_first_sales_date_sk#83, c_salutation#84, c_first_name#85, c_last_name#86, c_preferred_cust_flag#87, c_birth_day#88, c_birth_month#89, c_birth_year#90, c_birth_country#91, c_login#92, c_email_address#93, c_last_review_date#94, ca_address_sk#96, ca_address_id#97, ca_street_number#98, ca_street_name#99, ca_street_type#100, ca_suite_number#101, ca_city#102, ca_county#103, ca_state#104, ca_zip#105, ca_country#106, ca_gmt_offset#107, ca_location_type#108]
Keys [6]: [ca_zip#105, ss_store_sk#7, i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#15))]
Aggregate Attributes [1]: [sum#111]
Results [7]: [ca_zip#105, ss_store_sk#7, i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39, sum#112]

(29) Project [codegen id : 12]
Output [7]: [ca_zip#105, ss_store_sk#7, i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39, sum#112 AS _pushedexpression#113]
Input [7]: [ca_zip#105, ss_store_sk#7, i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39, sum#112]

(30) Scan parquet default.store
Output [29]: [s_store_sk#114, s_store_id#115, s_rec_start_date#116, s_rec_end_date#117, s_closed_date_sk#118, s_store_name#119, s_number_employees#120, s_floor_space#121, s_hours#122, s_manager#123, s_market_id#124, s_geography_class#125, s_market_desc#126, s_market_manager#127, s_division_id#128, s_division_name#129, s_company_id#130, s_company_name#131, s_street_number#132, s_street_name#133, s_street_type#134, s_suite_number#135, s_city#136, s_county#137, s_state#138, s_zip#139, s_country#140, s_gmt_offset#141, s_tax_percentage#142]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_rec_start_date:date,s_rec_end_date:date,s_closed_date_sk:int,s_store_name:string,s_number_employees:int,s_floor_space:int,s_hours:string,s_manager:string,s_market_id:int,s_geography_class:string,s_market_desc:string,s_market_manager:string,s_division_id:int,s_division_name:string,s_company_id:int,s_company_name:string,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string,s_country:string,s_gmt_offset:decimal(5,2),s_tax_percentage:decimal(5,2)>

(31) ColumnarToRow [codegen id : 11]
Input [29]: [s_store_sk#114, s_store_id#115, s_rec_start_date#116, s_rec_end_date#117, s_closed_date_sk#118, s_store_name#119, s_number_employees#120, s_floor_space#121, s_hours#122, s_manager#123, s_market_id#124, s_geography_class#125, s_market_desc#126, s_market_manager#127, s_division_id#128, s_division_name#129, s_company_id#130, s_company_name#131, s_street_number#132, s_street_name#133, s_street_type#134, s_suite_number#135, s_city#136, s_county#137, s_state#138, s_zip#139, s_country#140, s_gmt_offset#141, s_tax_percentage#142]

(32) Filter [codegen id : 11]
Input [29]: [s_store_sk#114, s_store_id#115, s_rec_start_date#116, s_rec_end_date#117, s_closed_date_sk#118, s_store_name#119, s_number_employees#120, s_floor_space#121, s_hours#122, s_manager#123, s_market_id#124, s_geography_class#125, s_market_desc#126, s_market_manager#127, s_division_id#128, s_division_name#129, s_company_id#130, s_company_name#131, s_street_number#132, s_street_name#133, s_street_type#134, s_suite_number#135, s_city#136, s_county#137, s_state#138, s_zip#139, s_country#140, s_gmt_offset#141, s_tax_percentage#142]
Condition : (isnotnull(s_zip#139) AND isnotnull(s_store_sk#114))

(33) HashAggregate [codegen id : 11]
Input [29]: [s_store_sk#114, s_store_id#115, s_rec_start_date#116, s_rec_end_date#117, s_closed_date_sk#118, s_store_name#119, s_number_employees#120, s_floor_space#121, s_hours#122, s_manager#123, s_market_id#124, s_geography_class#125, s_market_desc#126, s_market_manager#127, s_division_id#128, s_division_name#129, s_company_id#130, s_company_name#131, s_street_number#132, s_street_name#133, s_street_type#134, s_suite_number#135, s_city#136, s_county#137, s_state#138, s_zip#139, s_country#140, s_gmt_offset#141, s_tax_percentage#142]
Keys [2]: [s_store_sk#114, s_zip#139]
Functions: []
Aggregate Attributes: []
Results [2]: [s_store_sk#114, s_zip#139]

(34) BroadcastExchange
Input [2]: [s_store_sk#114, s_zip#139]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#143]

(35) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#114]
Join condition: NOT (substr(ca_zip#105, 1, 5) = substr(s_zip#139, 1, 5))

(36) Project [codegen id : 12]
Output [5]: [i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39, _pushedexpression#144]
Input [9]: [ca_zip#105, ss_store_sk#7, i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39, _pushedexpression#113, s_store_sk#114, s_zip#139]

(37) HashAggregate [codegen id : 12]
Input [5]: [i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39, _pushedexpression#144]
Keys [4]: [i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39]
Functions [1]: [partial_sum(_pushedexpression#144)]
Aggregate Attributes [2]: [sum#145, isEmpty#146]
Results [6]: [i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39, sum#147, isEmpty#148]

(38) Exchange
Input [6]: [i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39, sum#147, isEmpty#148]
Arguments: hashpartitioning(i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39, 5), ENSURE_REQUIREMENTS, [id=#149]

(39) HashAggregate [codegen id : 13]
Input [6]: [i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39, sum#147, isEmpty#148]
Keys [4]: [i_brand#33, i_brand_id#32, i_manufact_id#38, i_manufact#39]
Functions [1]: [sum(_pushedexpression#144)]
Aggregate Attributes [1]: [sum(_pushedexpression#144)#150]
Results [5]: [i_brand_id#32 AS brand_id#151, i_brand#33 AS brand#152, i_manufact_id#38, i_manufact#39, cast(sum(_pushedexpression#144)#150 as decimal(17,2)) AS ext_price#153]

(40) TakeOrderedAndProject
Input [5]: [brand_id#151, brand#152, i_manufact_id#38, i_manufact#39, ext_price#153]
Arguments: 100, [ext_price#153 DESC NULLS LAST, brand#152 ASC NULLS FIRST, brand_id#151 ASC NULLS FIRST, i_manufact_id#38 ASC NULLS FIRST, i_manufact#39 ASC NULLS FIRST], [brand_id#151, brand#152, i_manufact_id#38, i_manufact#39, ext_price#153]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#23 IN dynamicpruning#24
BroadcastExchange (44)
+- * Filter (43)
   +- * ColumnarToRow (42)
      +- Scan parquet default.date_dim (41)


(41) Scan parquet default.date_dim
Output [28]: [d_date_sk#48, d_date_id#49, d_date#50, d_month_seq#51, d_week_seq#52, d_quarter_seq#53, d_year#54, d_dow#55, d_moy#56, d_dom#57, d_qoy#58, d_fy_year#59, d_fy_quarter_seq#60, d_fy_week_seq#61, d_day_name#62, d_quarter_name#63, d_holiday#64, d_weekend#65, d_following_holiday#66, d_first_dom#67, d_last_dom#68, d_same_day_ly#69, d_same_day_lq#70, d_current_day#71, d_current_week#72, d_current_month#73, d_current_quarter#74, d_current_year#75]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(42) ColumnarToRow [codegen id : 1]
Input [28]: [d_date_sk#48, d_date_id#49, d_date#50, d_month_seq#51, d_week_seq#52, d_quarter_seq#53, d_year#54, d_dow#55, d_moy#56, d_dom#57, d_qoy#58, d_fy_year#59, d_fy_quarter_seq#60, d_fy_week_seq#61, d_day_name#62, d_quarter_name#63, d_holiday#64, d_weekend#65, d_following_holiday#66, d_first_dom#67, d_last_dom#68, d_same_day_ly#69, d_same_day_lq#70, d_current_day#71, d_current_week#72, d_current_month#73, d_current_quarter#74, d_current_year#75]

(43) Filter [codegen id : 1]
Input [28]: [d_date_sk#48, d_date_id#49, d_date#50, d_month_seq#51, d_week_seq#52, d_quarter_seq#53, d_year#54, d_dow#55, d_moy#56, d_dom#57, d_qoy#58, d_fy_year#59, d_fy_quarter_seq#60, d_fy_week_seq#61, d_day_name#62, d_quarter_name#63, d_holiday#64, d_weekend#65, d_following_holiday#66, d_first_dom#67, d_last_dom#68, d_same_day_ly#69, d_same_day_lq#70, d_current_day#71, d_current_week#72, d_current_month#73, d_current_quarter#74, d_current_year#75]
Condition : ((((isnotnull(d_moy#56) AND isnotnull(d_year#54)) AND (d_moy#56 = 11)) AND (d_year#54 = 1998)) AND isnotnull(d_date_sk#48))

(44) BroadcastExchange
Input [28]: [d_date_sk#48, d_date_id#49, d_date#50, d_month_seq#51, d_week_seq#52, d_quarter_seq#53, d_year#54, d_dow#55, d_moy#56, d_dom#57, d_qoy#58, d_fy_year#59, d_fy_quarter_seq#60, d_fy_week_seq#61, d_day_name#62, d_quarter_name#63, d_holiday#64, d_weekend#65, d_following_holiday#66, d_first_dom#67, d_last_dom#68, d_same_day_ly#69, d_same_day_lq#70, d_current_day#71, d_current_week#72, d_current_month#73, d_current_quarter#74, d_current_year#75]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#154]


