== Physical Plan ==
* HashAggregate (14)
+- Exchange (13)
   +- * HashAggregate (12)
      +- * Project (11)
         +- * BroadcastHashJoin Inner BuildRight (10)
            :- * HashAggregate (4)
            :  +- * Filter (3)
            :     +- * ColumnarToRow (2)
            :        +- Scan parquet default.lineitem (1)
            +- BroadcastExchange (9)
               +- * HashAggregate (8)
                  +- * Filter (7)
                     +- * ColumnarToRow (6)
                        +- Scan parquet default.part (5)


(1) Scan parquet default.lineitem
Output [16]: [l_orderkey#1, l_partkey#2, l_suppkey#3, l_linenumber#4, l_quantity#5, l_extendedprice#6, l_discount#7, l_tax#8, l_returnflag#9, l_linestatus#10, l_shipdate#11, l_commitdate#12, l_receiptdate#13, l_shipinstruct#14, l_shipmode#15, l_comment#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1995-09-01), LessThan(l_shipdate,1995-10-01), IsNotNull(l_partkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_linenumber:int,l_quantity:decimal(10,0),l_extendedprice:decimal(10,0),l_discount:decimal(10,0),l_tax:decimal(10,0),l_returnflag:string,l_linestatus:string,l_shipdate:date,l_commitdate:date,l_receiptdate:date,l_shipinstruct:string,l_shipmode:string,l_comment:string>

(2) ColumnarToRow [codegen id : 2]
Input [16]: [l_orderkey#1, l_partkey#2, l_suppkey#3, l_linenumber#4, l_quantity#5, l_extendedprice#6, l_discount#7, l_tax#8, l_returnflag#9, l_linestatus#10, l_shipdate#11, l_commitdate#12, l_receiptdate#13, l_shipinstruct#14, l_shipmode#15, l_comment#16]

(3) Filter [codegen id : 2]
Input [16]: [l_orderkey#1, l_partkey#2, l_suppkey#3, l_linenumber#4, l_quantity#5, l_extendedprice#6, l_discount#7, l_tax#8, l_returnflag#9, l_linestatus#10, l_shipdate#11, l_commitdate#12, l_receiptdate#13, l_shipinstruct#14, l_shipmode#15, l_comment#16]
Condition : (((isnotnull(l_shipdate#11) AND (l_shipdate#11 >= 1995-09-01)) AND (l_shipdate#11 < 1995-10-01)) AND isnotnull(l_partkey#2))

(4) HashAggregate [codegen id : 2]
Input [16]: [l_orderkey#1, l_partkey#2, l_suppkey#3, l_linenumber#4, l_quantity#5, l_extendedprice#6, l_discount#7, l_tax#8, l_returnflag#9, l_linestatus#10, l_shipdate#11, l_commitdate#12, l_receiptdate#13, l_shipinstruct#14, l_shipmode#15, l_comment#16]
Keys [1]: [l_partkey#2]
Functions: []
Aggregate Attributes: []
Results [1]: [l_partkey#2]

(5) Scan parquet default.part
Output [9]: [p_partkey#17, p_name#18, p_mfgr#19, p_brand#20, p_type#21, p_size#22, p_container#23, p_retailprice#24, p_comment#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/part]
PushedFilters: [IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_name:string,p_mfgr:string,p_brand:string,p_type:string,p_size:int,p_container:string,p_retailprice:decimal(10,0),p_comment:string>

(6) ColumnarToRow [codegen id : 1]
Input [9]: [p_partkey#17, p_name#18, p_mfgr#19, p_brand#20, p_type#21, p_size#22, p_container#23, p_retailprice#24, p_comment#25]

(7) Filter [codegen id : 1]
Input [9]: [p_partkey#17, p_name#18, p_mfgr#19, p_brand#20, p_type#21, p_size#22, p_container#23, p_retailprice#24, p_comment#25]
Condition : isnotnull(p_partkey#17)

(8) HashAggregate [codegen id : 1]
Input [9]: [p_partkey#17, p_name#18, p_mfgr#19, p_brand#20, p_type#21, p_size#22, p_container#23, p_retailprice#24, p_comment#25]
Keys [1]: [p_partkey#17]
Functions: []
Aggregate Attributes: []
Results [1]: [p_partkey#17]

(9) BroadcastExchange
Input [1]: [p_partkey#17]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#26]

(10) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [l_partkey#2]
Right keys [1]: [p_partkey#17]
Join condition: None

(11) Project [codegen id : 2]
Output: []
Input [2]: [l_partkey#2, p_partkey#17]

(12) HashAggregate [codegen id : 2]
Input: []
Keys: []
Functions [2]: [partial_sum(CASE WHEN StartsWith(p_type#21, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)) ELSE 0 END), partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))]
Aggregate Attributes [4]: [sum#27, isEmpty#28, sum#29, isEmpty#30]
Results [4]: [sum#31, isEmpty#32, sum#33, isEmpty#34]

(13) Exchange
Input [4]: [sum#31, isEmpty#32, sum#33, isEmpty#34]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#35]

(14) HashAggregate [codegen id : 3]
Input [4]: [sum#31, isEmpty#32, sum#33, isEmpty#34]
Keys: []
Functions [2]: [sum(CASE WHEN StartsWith(p_type#21, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)) ELSE 0 END), sum(CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))]
Aggregate Attributes [2]: [sum(CASE WHEN StartsWith(p_type#21, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)) ELSE 0 END)#36, sum(CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))#37]
Results [1]: [CheckOverflow((promote_precision(CheckOverflow((100.00 * promote_precision(cast(sum(CASE WHEN StartsWith(p_type#21, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)) ELSE 0 END)#36 as decimal(34,2)))), DecimalType(38,2))) / promote_precision(cast(sum(CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))#37 as decimal(38,2)))), DecimalType(38,6)) AS promo_revenue#38]

