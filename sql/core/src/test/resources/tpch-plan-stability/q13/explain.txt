== Physical Plan ==
* Sort (21)
+- Exchange (20)
   +- * HashAggregate (19)
      +- Exchange (18)
         +- * HashAggregate (17)
            +- * HashAggregate (16)
               +- Exchange (15)
                  +- * HashAggregate (14)
                     +- * Project (13)
                        +- * BroadcastHashJoin LeftOuter BuildRight (12)
                           :- * HashAggregate (3)
                           :  +- * ColumnarToRow (2)
                           :     +- Scan parquet default.customer (1)
                           +- BroadcastExchange (11)
                              +- * Project (10)
                                 +- * Project (9)
                                    +- * HashAggregate (8)
                                       +- * Project (7)
                                          +- * Filter (6)
                                             +- * ColumnarToRow (5)
                                                +- Scan parquet default.orders (4)


(1) Scan parquet default.customer
Output [8]: [c_custkey#1, c_name#2, c_address#3, c_nationkey#4, c_phone#5, c_acctbal#6, c_mktsegment#7, c_comment#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
ReadSchema: struct<c_custkey:bigint,c_name:string,c_address:string,c_nationkey:bigint,c_phone:string,c_acctbal:decimal(10,0),c_mktsegment:string,c_comment:string>

(2) ColumnarToRow [codegen id : 2]
Input [8]: [c_custkey#1, c_name#2, c_address#3, c_nationkey#4, c_phone#5, c_acctbal#6, c_mktsegment#7, c_comment#8]

(3) HashAggregate [codegen id : 2]
Input [8]: [c_custkey#1, c_name#2, c_address#3, c_nationkey#4, c_phone#5, c_acctbal#6, c_mktsegment#7, c_comment#8]
Keys [2]: [c_custkey#1, c_custkey#1]
Functions: []
Aggregate Attributes: []
Results [2]: [c_custkey#1, c_custkey#1]

(4) Scan parquet default.orders
Output [3]: [o_orderkey#9, o_custkey#10, o_comment#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/orders]
PushedFilters: [IsNotNull(o_comment), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_comment:string>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [o_orderkey#9, o_custkey#10, o_comment#11]

(6) Filter [codegen id : 1]
Input [3]: [o_orderkey#9, o_custkey#10, o_comment#11]
Condition : ((isnotnull(o_comment#11) AND NOT o_comment#11 LIKE %special%requests%) AND isnotnull(o_custkey#10))

(7) Project [codegen id : 1]
Output [2]: [o_orderkey#9, o_custkey#10]
Input [3]: [o_orderkey#9, o_custkey#10, o_comment#11]

(8) HashAggregate [codegen id : 1]
Input [2]: [o_orderkey#9, o_custkey#10]
Keys [1]: [o_custkey#10]
Functions [1]: [partial_count(o_orderkey#9)]
Aggregate Attributes [1]: [count#12]
Results [2]: [o_custkey#10, count#13]

(9) Project [codegen id : 1]
Output [2]: [o_custkey#10, count#13 AS _pushedexpression#14]
Input [2]: [o_custkey#10, count#13]

(10) Project [codegen id : 1]
Output [1]: [o_custkey#10]
Input [2]: [o_custkey#10, _pushedexpression#14]

(11) BroadcastExchange
Input [1]: [o_custkey#10]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#15]

(12) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [c_custkey#1]
Right keys [1]: [o_custkey#10]
Join condition: None

(13) Project [codegen id : 2]
Output [2]: [c_custkey#1, c_custkey#1]
Input [3]: [c_custkey#1, c_custkey#1, o_custkey#10]

(14) HashAggregate [codegen id : 2]
Input [2]: [c_custkey#1, c_custkey#1]
Keys [1]: [c_custkey#1]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#16]
Results [2]: [c_custkey#1, count#17]

(15) Exchange
Input [2]: [c_custkey#1, count#17]
Arguments: hashpartitioning(c_custkey#1, 5), ENSURE_REQUIREMENTS, [id=#18]

(16) HashAggregate [codegen id : 3]
Input [2]: [c_custkey#1, count#17]
Keys [1]: [c_custkey#1]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#19]
Results [1]: [count(1)#19 AS c_count#20]

(17) HashAggregate [codegen id : 3]
Input [1]: [c_count#20]
Keys [1]: [c_count#20]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#21]
Results [2]: [c_count#20, count#22]

(18) Exchange
Input [2]: [c_count#20, count#22]
Arguments: hashpartitioning(c_count#20, 5), ENSURE_REQUIREMENTS, [id=#23]

(19) HashAggregate [codegen id : 4]
Input [2]: [c_count#20, count#22]
Keys [1]: [c_count#20]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#24]
Results [2]: [c_count#20, count(1)#24 AS custdist#25]

(20) Exchange
Input [2]: [c_count#20, custdist#25]
Arguments: rangepartitioning(custdist#25 DESC NULLS LAST, c_count#20 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, [id=#26]

(21) Sort [codegen id : 5]
Input [2]: [c_count#20, custdist#25]
Arguments: [custdist#25 DESC NULLS LAST, c_count#20 DESC NULLS LAST], true, 0

