== Physical Plan ==
* Sort (39)
+- Exchange (38)
   +- * Project (37)
      +- * BroadcastHashJoin Inner BuildRight (36)
         :- * Project (30)
         :  +- * BroadcastHashJoin LeftSemi BuildRight (29)
         :     :- * Filter (3)
         :     :  +- * ColumnarToRow (2)
         :     :     +- Scan parquet default.supplier (1)
         :     +- BroadcastExchange (28)
         :        +- * HashAggregate (27)
         :           +- * Project (26)
         :              +- * BroadcastHashJoin Inner BuildRight (25)
         :                 :- * BroadcastHashJoin LeftSemi BuildRight (13)
         :                 :  :- * Filter (6)
         :                 :  :  +- * ColumnarToRow (5)
         :                 :  :     +- Scan parquet default.partsupp (4)
         :                 :  +- BroadcastExchange (12)
         :                 :     +- * HashAggregate (11)
         :                 :        +- * Project (10)
         :                 :           +- * Filter (9)
         :                 :              +- * ColumnarToRow (8)
         :                 :                 +- Scan parquet default.part (7)
         :                 +- BroadcastExchange (24)
         :                    +- * Filter (23)
         :                       +- * HashAggregate (22)
         :                          +- Exchange (21)
         :                             +- * HashAggregate (20)
         :                                +- * BroadcastHashJoin LeftSemi BuildRight (19)
         :                                   :- * Project (17)
         :                                   :  +- * Filter (16)
         :                                   :     +- * ColumnarToRow (15)
         :                                   :        +- Scan parquet default.lineitem (14)
         :                                   +- ReusedExchange (18)
         +- BroadcastExchange (35)
            +- * Project (34)
               +- * Filter (33)
                  +- * ColumnarToRow (32)
                     +- Scan parquet default.nation (31)


(1) Scan parquet default.supplier
Output [4]: [s_suppkey#1, s_name#2, s_address#3, s_nationkey#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/supplier]
PushedFilters: [IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint>

(2) ColumnarToRow [codegen id : 7]
Input [4]: [s_suppkey#1, s_name#2, s_address#3, s_nationkey#4]

(3) Filter [codegen id : 7]
Input [4]: [s_suppkey#1, s_name#2, s_address#3, s_nationkey#4]
Condition : isnotnull(s_nationkey#4)

(4) Scan parquet default.partsupp
Output [3]: [ps_partkey#5, ps_suppkey#6, ps_availqty#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/partsupp]
PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>

(5) ColumnarToRow [codegen id : 5]
Input [3]: [ps_partkey#5, ps_suppkey#6, ps_availqty#7]

(6) Filter [codegen id : 5]
Input [3]: [ps_partkey#5, ps_suppkey#6, ps_availqty#7]
Condition : ((isnotnull(ps_availqty#7) AND isnotnull(ps_partkey#5)) AND isnotnull(ps_suppkey#6))

(7) Scan parquet default.part
Output [2]: [p_partkey#8, p_name#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/part]
PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,forest)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(8) ColumnarToRow [codegen id : 1]
Input [2]: [p_partkey#8, p_name#9]

(9) Filter [codegen id : 1]
Input [2]: [p_partkey#8, p_name#9]
Condition : (isnotnull(p_name#9) AND StartsWith(p_name#9, forest))

(10) Project [codegen id : 1]
Output [1]: [p_partkey#8]
Input [2]: [p_partkey#8, p_name#9]

(11) HashAggregate [codegen id : 1]
Input [1]: [p_partkey#8]
Keys [1]: [p_partkey#8]
Functions: []
Aggregate Attributes: []
Results [1]: [p_partkey#8]

(12) BroadcastExchange
Input [1]: [p_partkey#8]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#10]

(13) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ps_partkey#5]
Right keys [1]: [p_partkey#8]
Join condition: None

(14) Scan parquet default.lineitem
Output [4]: [l_partkey#11, l_suppkey#12, l_quantity#13, l_shipdate#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1994-01-01), LessThan(l_shipdate,1995-01-01), IsNotNull(l_partkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(10,0),l_shipdate:date>

(15) ColumnarToRow [codegen id : 3]
Input [4]: [l_partkey#11, l_suppkey#12, l_quantity#13, l_shipdate#14]

(16) Filter [codegen id : 3]
Input [4]: [l_partkey#11, l_suppkey#12, l_quantity#13, l_shipdate#14]
Condition : ((((isnotnull(l_shipdate#14) AND (l_shipdate#14 >= 1994-01-01)) AND (l_shipdate#14 < 1995-01-01)) AND isnotnull(l_partkey#11)) AND isnotnull(l_suppkey#12))

(17) Project [codegen id : 3]
Output [3]: [l_partkey#11, l_suppkey#12, l_quantity#13]
Input [4]: [l_partkey#11, l_suppkey#12, l_quantity#13, l_shipdate#14]

(18) ReusedExchange [Reuses operator id: 12]
Output [1]: [p_partkey#8]

(19) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [l_partkey#11]
Right keys [1]: [p_partkey#8]
Join condition: None

(20) HashAggregate [codegen id : 3]
Input [3]: [l_partkey#11, l_suppkey#12, l_quantity#13]
Keys [2]: [l_partkey#11, l_suppkey#12]
Functions [1]: [partial_sum(l_quantity#13)]
Aggregate Attributes [2]: [sum#15, isEmpty#16]
Results [4]: [l_partkey#11, l_suppkey#12, sum#17, isEmpty#18]

(21) Exchange
Input [4]: [l_partkey#11, l_suppkey#12, sum#17, isEmpty#18]
Arguments: hashpartitioning(l_partkey#11, l_suppkey#12, 5), ENSURE_REQUIREMENTS, [id=#19]

(22) HashAggregate [codegen id : 4]
Input [4]: [l_partkey#11, l_suppkey#12, sum#17, isEmpty#18]
Keys [2]: [l_partkey#11, l_suppkey#12]
Functions [1]: [sum(l_quantity#13)]
Aggregate Attributes [1]: [sum(l_quantity#13)#20]
Results [3]: [CheckOverflow((0.5 * promote_precision(cast(sum(l_quantity#13)#20 as decimal(21,1)))), DecimalType(22,1)) AS (0.5 * sum(l_quantity))#21, l_partkey#11, l_suppkey#12]

(23) Filter [codegen id : 4]
Input [3]: [(0.5 * sum(l_quantity))#21, l_partkey#11, l_suppkey#12]
Condition : isnotnull((0.5 * sum(l_quantity))#21)

(24) BroadcastExchange
Input [3]: [(0.5 * sum(l_quantity))#21, l_partkey#11, l_suppkey#12]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true], input[2, bigint, true]),false), [id=#22]

(25) BroadcastHashJoin [codegen id : 5]
Left keys [2]: [ps_partkey#5, ps_suppkey#6]
Right keys [2]: [l_partkey#11, l_suppkey#12]
Join condition: (cast(ps_availqty#7 as decimal(22,1)) > (0.5 * sum(l_quantity))#21)

(26) Project [codegen id : 5]
Output [1]: [ps_suppkey#6]
Input [6]: [ps_partkey#5, ps_suppkey#6, ps_availqty#7, (0.5 * sum(l_quantity))#21, l_partkey#11, l_suppkey#12]

(27) HashAggregate [codegen id : 5]
Input [1]: [ps_suppkey#6]
Keys [1]: [ps_suppkey#6]
Functions: []
Aggregate Attributes: []
Results [1]: [ps_suppkey#6]

(28) BroadcastExchange
Input [1]: [ps_suppkey#6]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#23]

(29) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [s_suppkey#1]
Right keys [1]: [ps_suppkey#6]
Join condition: None

(30) Project [codegen id : 7]
Output [3]: [s_name#2, s_address#3, s_nationkey#4]
Input [4]: [s_suppkey#1, s_name#2, s_address#3, s_nationkey#4]

(31) Scan parquet default.nation
Output [2]: [n_nationkey#24, n_name#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/nation]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,CANADA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(32) ColumnarToRow [codegen id : 6]
Input [2]: [n_nationkey#24, n_name#25]

(33) Filter [codegen id : 6]
Input [2]: [n_nationkey#24, n_name#25]
Condition : ((isnotnull(n_name#25) AND (n_name#25 = CANADA)) AND isnotnull(n_nationkey#24))

(34) Project [codegen id : 6]
Output [1]: [n_nationkey#24]
Input [2]: [n_nationkey#24, n_name#25]

(35) BroadcastExchange
Input [1]: [n_nationkey#24]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#26]

(36) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [s_nationkey#4]
Right keys [1]: [n_nationkey#24]
Join condition: None

(37) Project [codegen id : 7]
Output [2]: [s_name#2, s_address#3]
Input [4]: [s_name#2, s_address#3, s_nationkey#4, n_nationkey#24]

(38) Exchange
Input [2]: [s_name#2, s_address#3]
Arguments: rangepartitioning(s_name#2 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#27]

(39) Sort [codegen id : 8]
Input [2]: [s_name#2, s_address#3]
Arguments: [s_name#2 ASC NULLS FIRST], true, 0

